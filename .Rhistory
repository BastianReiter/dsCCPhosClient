ServerProjectName <- CCPSiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# If ServerProjectName is "Virtual" (as it is the case when using virtual infrastructure in CCPhosApp) make the variable empty so that server Opal table names are just raw CCP table names
if (ServerProjectName == "Virtual") { ServerProjectName <- "" }
# Else add a dot ('.') to ServerProjectName according to Opal table name nomenclature
else { ServerProjectName <- paste0(ServerProjectName, ".") }
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, CCPTableNames_Raw)
}
# Get vector of all Opal table names that are available on the current server
AvailableTables <- TableAvailability %>%
rename(IsAvailable = ServerNames[i]) %>%
filter(IsAvailable == TRUE) %>%
pull(TableName)
# Loop through all tables from Opal DB and assign their content to objects (data.frames) in R session
for (j in 1:length(ServerTableNames))
{
if (ServerTableNames[j] %in% AvailableTables)
{
datashield.assign(conns = DataSources[[i]],
symbol = paste0("RDS_", CCPTableNames_Curated[j]),
value = ServerTableNames[j],
id.name = "_id")
}
}
}
BundledMessages <- list()
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table$ObjectValidity)
}
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(BundledMessages))
# Create list of vectors (one for each site) containing names of data.frames that are not of class "NULL"
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) unlist(ds.class(x = tablename, datasources = DataSources))) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames != "NULL"]))
ds.class(x = "RDS_Metastasis", datasources = DataSources)
ds.exists(x = "RDS_Metastasis", datasources = DataSources)
ds.class(x = "RDS_Diagnosis", datasources = DataSources)
# Create list of vectors (one for each site) containing names of data.frames that are not of class "NULL"
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) unlist(ds.exists(x = tablename, datasources = DataSources)))
ExistingRDSTables
# Create list of vectors (one for each site) containing names of data.frames that are not of class "NULL"
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) unlist(ds.exists(x = tablename, datasources = DataSources))) %>%
#map(\(tablename) unlist(ds.class(x = tablename, datasources = DataSources))) %>%
set_names(paste0("RDS_", CCPTableNames_Curated))
ExistingRDSTables$RDS_BioSampling
# Create list of vectors (one for each site) containing names of data.frames that are not of class "NULL"
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) unlist(ds.exists(x = tablename, datasources = DataSources))) %>%
#map(\(tablename) unlist(ds.class(x = tablename, datasources = DataSources))) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose()
ExistingRDSTables$SiteA
# Create list of vectors (one for each site) containing names of data.frames that are not of class "NULL"
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) unlist(ds.exists(x = tablename, datasources = DataSources))) %>%
#map(\(tablename) unlist(ds.class(x = tablename, datasources = DataSources))) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames != "NULL"]))
ExistingRDSTables$SiteA
# Create list of vectors (one for each site) containing names of data.frames that are not of class "NULL"
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) unlist(ds.exists(x = tablename, datasources = DataSources))) %>%
#map(\(tablename) unlist(ds.class(x = tablename, datasources = DataSources))) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames == TRUE]))
ExistingRDSTables$SiteA
# Create list of vectors (one for each site) containing names of actually existing data.frames
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) unlist(ds.exists(x = tablename, datasources = DataSources))) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames == TRUE]))
# For every site, consolidate all existing Raw Data Set tables in one list object called "RawDataSet"
ExistingRDSTables %>%
purrr::iwalk(function(RDSTableNames, servername)
{
dsBaseClient::ds.list(x = RDSTableNames,
newobj = "RawDataSet",
datasources = DataSources[servername])
})
# Make sure assignment of RawDataSet was successful on all servers
ObjectStatus_RawDataSet <- ds.GetObjectStatus(ObjectName = "RawDataSet",
DataSources = DataSources)
# Add info about RawDataSet assignment to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(ObjectStatus_RawDataSet$ObjectValidity))
# Add info about RawDataSet assignment to Messages
Messages$Assignment <- c(Messages$Assignment,
ObjectStatus_RawDataSet$ObjectValidity)
# Print messages on console
PrintMessages(Messages)
Messages$Assignment
?list_c
BundledMessages
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(BundledMessages))
Messages$Assignment
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(BundledMessages, names_to = "Test"))
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table)
}
BundledMessages
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(BundledMessages))
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table$ObjectValidity)
}
BundledMessages
BundledMessages <- list()
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table$ObjectValidity)
}
BundledMessages
BundledMessages <- list()
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table["ObjectValidity"])
}
BundledMessages
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- c(Topic = "Object assignment on servers")
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(BundledMessages))
Messages$Assignment
# Make sure assignment of RawDataSet was successful on all servers
ObjectStatus_RawDataSet <- ds.GetObjectStatus(ObjectName = "RawDataSet",
DataSources = DataSources)
# Add info about RawDataSet assignment to Messages
Messages$Assignment <- c(Messages$Assignment,
ObjectStatus_RawDataSet$ObjectValidity)
Messages$Assignment
devtools::load_all(".")
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
?stop
devtools::load_all(".")
?DSI::datashield.connections_find
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements()
rm(list = ls())
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements()
?list_c
rm(list=ls())
library(dsBaseClient)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements()
Messages <- LoadRawDataSet(SiteSpecifications = NULL)
devtools::load_all(".")
Messages <- LoadRawDataSet(SiteSpecifications = NULL)
?ds.exists
ds.meanSdGp()
?ds.meanSdGp()
devtools::load_all(".")
Messages <- LoadRawDataSet(SiteSpecifications = NULL)
devtools::load_all(".")
Messages <- LoadRawDataSet(SiteSpecifications = NULL)
RDSTableCheck <- ds.CheckDataSet(DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
require(dplyr)
require(dsBaseClient)
require(DSI)
require(purrr)
require(tidyr)
SiteSpecifications <- NULL
DSConnections <- CCPConnections
# Check validity of 'DSConnections' or find them programmatically if none are passed
DSConnections <- CheckDSConnections(DSConnections)
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- c(Topic = "Object assignment on servers")
# Get server names
ServerNames <- names(DSConnections)
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_Tables$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_Tables$TableName_Curated
# Check Opal table availability before assignment
OpalTableAvailability <- GetServerOpalInfo(SiteSpecifications = SiteSpecifications,
DSConnections = DSConnections)
# Loop through all participating sites / servers
for (i in 1:length(ServerNames))
{
# In case SiteSpecifications are NULL, server Opal table names are just raw CCP table names
ServerTableNames <- CCPTableNames_Raw
ServerProjectName <- NULL
# If SiteSpecifications are assigned, there can be server-specific project names and therefore server-specific Opal table names
if (!is.null(SiteSpecifications))
{
# Get server-specific project name
ServerProjectName <- SiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# If ServerProjectName is "Virtual" (as it is the case when using virtual infrastructure in CCPhosApp) make the variable empty so that server Opal table names are just raw CCP table names
if (ServerProjectName == "Virtual") { ServerProjectName <- "" }
# Else add a dot ('.') to ServerProjectName according to Opal table name nomenclature
else { ServerProjectName <- paste0(ServerProjectName, ".") }
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, CCPTableNames_Raw)
}
# Get vector of all Opal table names that are available on the current server
AvailableOpalTables <- OpalTableAvailability %>%
rename(IsAvailable = ServerNames[i]) %>%
filter(IsAvailable == TRUE) %>%
pull(TableName) %>%
paste0(ServerProjectName, .)
# Loop through all tables from Opal DB and assign their content to objects (data.frames) in R session
for (j in 1:length(ServerTableNames))
{
if (ServerTableNames[j] %in% AvailableOpalTables)
{
datashield.assign(conns = DSConnections[[i]],
symbol = paste0("RDS_", CCPTableNames_Curated[j]),
value = ServerTableNames[j],
id.name = "_id")
}
}
}
BundledMessages <- list()
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DSConnections = DSConnections)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table["ObjectValidity"])   # Must select list element 'ObjectValidity' this way to keep naming of vector and thus class 'Success', 'Warning' and so forth
}
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(BundledMessages))
Messages$Assignment
# Create list of vectors (one for each site) containing names of actually existing data.frames
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) ifelse(!is.na(tablename), unlist(ds.exists(x = tablename, datasources = DSConnections)), NULL)) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames == TRUE]))
ExistingRDSTables
# Create list of vectors (one for each site) containing names of actually existing data.frames
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(function(tablename) { if (!is.na(tablename)) { unlist(ds.exists(x = tablename, datasources = DSConnections)) } else { return(NULL) } })
ExistingRDSTables
# Create list of vectors (one for each site) containing names of actually existing data.frames
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(function(tablename) { if (!is.na(tablename)) { unlist(ds.exists(x = tablename, datasources = DSConnections)) } else { return(NULL) } }) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames == TRUE]))
ExistingRDSTables$SiteA
devtools::load_all(".")
Messages <- LoadRawDataSet(SiteSpecifications = NULL)
rm(list = ls())
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements()
Messages <- LoadRawDataSet(SiteSpecifications = NULL)
RDSTableCheck <- ds.CheckDataSet(DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements()
Messages <- LoadRawDataSet(SiteSpecifications = NULL)
RDSTableCheck <- ds.CheckDataSet(DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
rlang::last_trace()
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
ServerWorkspaceInfo
ServerWorkspaceInfo$Overview
RDSTableCheck <- ds.CheckDataSet(DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
SiteSpecifications <- NULL
DSConnections <- CCPConnections
# Create list of vectors (one for each site) containing names of actually existing data.frames
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(function(tablename) { if (!is.na(tablename)) { unlist(ds.exists(x = tablename, datasources = DSConnections)) } else { return(NULL) } }) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames == TRUE]))
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- c(Topic = "Object assignment on servers")
# Get server names
ServerNames <- names(DSConnections)
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_Tables$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_Tables$TableName_Curated
# Check Opal table availability before assignment
OpalTableAvailability <- GetServerOpalInfo(SiteSpecifications = SiteSpecifications,
DSConnections = DSConnections)
# Create list of vectors (one for each site) containing names of actually existing data.frames
ExistingRDSTables <- paste0("RDS_", CCPTableNames_Curated) %>%
map(function(tablename) { if (!is.na(tablename)) { unlist(ds.exists(x = tablename, datasources = DSConnections)) } else { return(NULL) } }) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames == TRUE]))
ExistingRDSTables$SiteA
i <- 1
# In case SiteSpecifications are NULL, server Opal table names are just raw CCP table names
ServerTableNames <- CCPTableNames_Raw
ServerProjectName <- NULL
# If SiteSpecifications are assigned, there can be server-specific project names and therefore server-specific Opal table names
if (!is.null(SiteSpecifications))
{
# Get server-specific project name
ServerProjectName <- SiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# If ServerProjectName is "Virtual" (as it is the case when using virtual infrastructure in CCPhosApp) make the variable empty so that server Opal table names are just raw CCP table names
if (ServerProjectName == "Virtual") { ServerProjectName <- "" }
# Else add a dot ('.') to ServerProjectName according to Opal table name nomenclature
else { ServerProjectName <- paste0(ServerProjectName, ".") }
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, CCPTableNames_Raw)
}
# Get vector of all Opal table names that are available on the current server
AvailableOpalTables <- OpalTableAvailability %>%
rename(IsAvailable = ServerNames[i]) %>%
filter(IsAvailable == TRUE) %>%
pull(TableName) %>%
paste0(ServerProjectName, .)
AvailableOpalTables
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements()
Messages <- LoadRawDataSet(SiteSpecifications = NULL)
RDSTableCheck <- ds.CheckDataSet(DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
