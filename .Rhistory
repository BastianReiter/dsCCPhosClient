# Initiate objects
Overview.Servers <- list()
Details.Servers <- list()
for (i in 1:length(ServerNames))
{
ObjectInfo <- tibble(Object = UniqueObjectNames)
ObjectInfo$ObjectExists <- ObjectInfo$Object %in% ServerObjectNames[[ServerNames[i]]]
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
MetaData <- ObjectInfo$Object %>%
map(function(object)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = object,
DSConnections = DSConnections[i])
return(ObjectMetaData[[ServerNames[i]]])
}) %>%
setNames(ObjectInfo$Object)
# Add some meta data to 'ObjectInfo'
ObjectInfo <- ObjectInfo %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = ServerNames[i], .before = 1)
Overview.Servers <- c(Overview.Servers, list(ObjectInfo))
names(Overview.Servers)[i] <- ServerNames[i]
Details.Servers[[i]] <- MetaData
names(Details.Servers)[i] <- ServerNames[i]
}
Overview.Servers$ServerName
Overview.Servers$ServerA
# Summarize server-specific overviews in 'Overview.All'
Overview.All <- Overview.Servers %>%
list_rbind(names_to = "ServerName")
View(Overview.All)
# Summarize server-specific overviews in 'Overview.All'
Overview.All <- Overview.Servers %>%
list_rbind(names_to = "ServerName") %>%
group_by(Object) %>%
summarize(ServerName = "All",
ObjectExists = case_when(all(ObjectExists == TRUE) ~ "Uniform (TRUE)",
all(ObjectExists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Class = ifelse(length(unique(Class)) == 1, paste0("Uniform (", unique(Class), ")"), "Varied"),
Length = ifelse(length(unique(Length)) == 1, paste0("Uniform (", unique(Length), ")"), paste0("Varied (", min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE), ")")),
RowCount = sum(RowCount, is.na = TRUE)) %>%
relocate(ServerName, .before = Object)
# Row-bind cumulative and server-specific overview data.frames
Overview <- c(list(Overview.All),
Overview.Servers)
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DSConnections))
ServerObjectNames <- DSI::datashield.symbols(conns = DSConnections)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# If the server workspaces are completely empty, stop function and return NULL
if (length(UniqueObjectNames) == 0) { return(NULL) }
# Initiate objects
Overview <- list()
Details.Servers <- list()
for (i in 1:length(ServerNames))
{
ServerOverview <- tibble(Object = UniqueObjectNames)
ServerOverview$ObjectExists <- ServerOverview$Object %in% ServerObjectNames[[ServerNames[i]]]
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
MetaData <- ServerOverview$Object %>%
map(function(object)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = object,
DSConnections = DSConnections[i])
return(ObjectMetaData[[ServerNames[i]]])
}) %>%
setNames(ServerOverview$Object)
# Add some meta data to 'ObjectInfo'
ServerOverview <- ServerOverview %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = ServerNames[i], .before = 1)
Overview <- c(Overview, list(ServerOverview))
names(Overview)[i] <- ServerNames[i]
Details.Servers[[i]] <- MetaData
names(Details.Servers)[i] <- ServerNames[i]
}
# Summarize server-specific overviews in 'Overview.All'
Overview.All <- Overview %>%
list_rbind(names_to = "ServerName") %>%
group_by(Object) %>%
summarize(ServerName = "All",
ObjectExists = case_when(all(ObjectExists == TRUE) ~ "Uniform (TRUE)",
all(ObjectExists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Class = ifelse(length(unique(Class)) == 1, paste0("Uniform (", unique(Class), ")"), "Varied"),
Length = ifelse(length(unique(Length)) == 1, paste0("Uniform (", unique(Length), ")"), paste0("Varied (", min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE), ")")),
RowCount = sum(RowCount, is.na = TRUE)) %>%
relocate(ServerName, .before = Object)
# Row-bind cumulative and server-specific overview data.frames
Overview <- c(list(All = Overview.All),
Overview)
# Initiate objects
Overview <- list()
Details.Servers <- list()
for (i in 1:length(ServerNames))
{
ServerOverview <- tibble(Object = UniqueObjectNames)
ServerOverview$ObjectExists <- ServerOverview$Object %in% ServerObjectNames[[ServerNames[i]]]
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
MetaData <- ServerOverview$Object %>%
map(function(object)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = object,
DSConnections = DSConnections[i])
return(ObjectMetaData[[ServerNames[i]]])
}) %>%
setNames(ServerOverview$Object)
# Add some meta data to 'ObjectInfo'
ServerOverview <- ServerOverview %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = ServerNames[i], .before = 1)
Overview <- c(Overview, list(ServerOverview))
names(Overview)[i] <- ServerNames[i]
Details.Servers[[i]] <- MetaData
names(Details.Servers)[i] <- ServerNames[i]
}
# Summarize server-specific overviews in 'Overview.All'
Overview.All <- Overview %>%
list_rbind(names_to = "ServerName") %>%
group_by(Object) %>%
summarize(ServerName = "All",
Class = ifelse(length(unique(Class)) == 1, paste0("Uniform (", unique(Class), ")"), "Varied"),
Length = ifelse(length(unique(Length)) == 1, paste0("Uniform (", unique(Length), ")"), paste0("Varied (", min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE), ")")),
RowCount = sum(RowCount, is.na = TRUE),
ObjectExists = case_when(all(ObjectExists == TRUE) ~ "Uniform (TRUE)",
all(ObjectExists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied")) %>%
relocate(ServerName, .before = Object)
# Row-bind cumulative and server-specific overview data.frames
Overview <- c(list(All = Overview.All),
Overview)
TestW <- Details.Servers %>%
list_transpose()
TestW$CDS_Diagnosis$ServerA$Structure
?ds.GetTableCheck
TC <- ds.GetTableCheck(TableName = "CDS_Diagnosis",
DSConnections = DSConnections)
devtools::load_all(".")
TC <- ds.GetTableCheck(TableName = "CDS_Diagnosis",
DSConnections = DSConnections)
devtools::load_all(".")
TC <- ds.GetTableCheck(TableName = "CDS_Diagnosis",
DSConnections = DSConnections)
TC$TableCheckOverview
TC$FeatureExistence
TestW <- Details.Servers %>%
list_transpose() %>%
names()
TestW <- Details.Servers %>%
list_transpose()
TableName <- "CDS_Staging"
RequiredFeatureNames <- filter(dsCCPhos::Meta_Features, TableName_Curated == "Staging")$FeatureName_Curated
GetTemplate <- FALSE
DSConnections <- CCPConnections
TableCheck <- DSI::datashield.aggregate(conns = DSConnections,
expr = call("GetTableCheckDS",
TableName.S = TableName,
RequiredFeatureNames.S = RequiredFeatureNames,
GetTemplate.S = GetTemplate))
# Transpose list for easier handling
TableCheck <- TableCheck %>%
list_transpose()
TableCheck$FeatureCheck$ServerA
FeatureCheck.All <- TableCheck$FeatureCheck %>%
list_rbind(names_to = "ServerName")
View(FeatureCheck.All)
# Summarize server-specific overviews in 'Overview.All'
Overview.All <- Overview %>%
list_rbind() %>%
group_by(Object) %>%
summarize(ServerName = "All",
Class = ifelse(length(unique(Class)) == 1, paste0("Uniform (", unique(Class), ")"), "Varied"),
Length = ifelse(length(unique(Length)) == 1, paste0("Uniform (", unique(Length), ")"), paste0("Varied (", min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE), ")")),
RowCount = sum(RowCount, is.na = TRUE),
ObjectExists = case_when(all(ObjectExists == TRUE) ~ "Uniform (TRUE)",
all(ObjectExists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied")) %>%
relocate(ServerName, .before = Object)
# Initiate objects
Overview <- list()
Details.Servers <- list()
for (i in 1:length(ServerNames))
{
ServerOverview <- tibble(Object = UniqueObjectNames)
ServerOverview$ObjectExists <- ServerOverview$Object %in% ServerObjectNames[[ServerNames[i]]]
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
MetaData <- ServerOverview$Object %>%
map(function(object)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = object,
DSConnections = DSConnections[i])
return(ObjectMetaData[[ServerNames[i]]])
}) %>%
setNames(ServerOverview$Object)
# Add some meta data to 'ObjectInfo'
ServerOverview <- ServerOverview %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = ServerNames[i], .before = 1)
Overview <- c(Overview, list(ServerOverview))
names(Overview)[i] <- ServerNames[i]
Details.Servers[[i]] <- MetaData
names(Details.Servers)[i] <- ServerNames[i]
}
# Summarize server-specific overviews in 'Overview.All'
Overview.All <- Overview %>%
list_rbind() %>%
group_by(Object) %>%
summarize(ServerName = "All",
Class = ifelse(length(unique(Class)) == 1, paste0("Uniform (", unique(Class), ")"), "Varied"),
Length = ifelse(length(unique(Length)) == 1, paste0("Uniform (", unique(Length), ")"), paste0("Varied (", min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE), ")")),
RowCount = sum(RowCount, is.na = TRUE),
ObjectExists = case_when(all(ObjectExists == TRUE) ~ "Uniform (TRUE)",
all(ObjectExists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied")) %>%
relocate(ServerName, .before = Object)
View(Overview.All)
TestMetaData <- ds.GetObjectMetaData(ObjectName = "CDS_Diagnosis",
DSConnections = DSConnections)
ABC <- list()
ABC$ghdjk
ServerObjectNames <- DSI::datashield.symbols(conns = DSConnections)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# If the server workspaces are completely empty, stop function and return NULL
if (length(UniqueObjectNames) == 0) { return(NULL) }
# Initiate objects
Overview <- list()
Details.Servers <- list()
i <- 1
ServerOverview <- tibble(Object = UniqueObjectNames) %>%
mutate(ObjectExists = Object %in% ServerObjectNames[[ServerNames[i]]])
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
ExistingObjects <- ServerOverview %>%
filter(ObjectExists == TRUE)
View(ExistingObjects)
MetaData <- ExistingObjects %>%
pull(Object) %>%
map(function(objectname)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = objectname,
DSConnections = DSConnections[i])
return(ObjectMetaData[[ServerNames[i]]])
}) %>%
setNames(ExistingObjects$Object)
# Add some meta data to 'ObjectInfo'
ServerOverview <- ServerOverview %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = ServerNames[i], .before = 1)
Overview <- c(Overview, list(ServerOverview))
names(Overview)[i] <- ServerNames[i]
Details.Servers[[i]] <- MetaData
names(Details.Servers)[i] <- ServerNames[i]
# Initiate objects
Overview <- list()
Details.Servers <- list()
for (i in 1:length(ServerNames))
{
ServerOverview <- tibble(Object = UniqueObjectNames) %>%
mutate(ObjectExists = Object %in% ServerObjectNames[[ServerNames[i]]])
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
ExistingObjects <- ServerOverview %>%
filter(ObjectExists == TRUE)
MetaData <- ExistingObjects %>%
pull(Object) %>%
map(function(objectname)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = objectname,
DSConnections = DSConnections[i])
return(ObjectMetaData[[ServerNames[i]]])
}) %>%
setNames(ExistingObjects$Object)
# Add some meta data to 'ObjectInfo'
ServerOverview <- ServerOverview %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = ServerNames[i], .before = 1)
Overview <- c(Overview, list(ServerOverview))
names(Overview)[i] <- ServerNames[i]
Details.Servers[[i]] <- MetaData
names(Details.Servers)[i] <- ServerNames[i]
}
TestMetaData <- ds.GetObjectMetaData(ObjectName = "CDS_Diagnosis",
DSConnections = DSConnections)
TestW <- Details.Servers %>%
list_transpose()
# Initiate objects
Overview <- list()
Details <- list()
for (i in 1:length(ServerNames))
{
ServerOverview <- tibble(Object = UniqueObjectNames) %>%
mutate(ObjectExists = Object %in% ServerObjectNames[[ServerNames[i]]])
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
ExistingObjects <- ServerOverview %>%
filter(ObjectExists == TRUE)
MetaData <- ExistingObjects %>%
pull(Object) %>%
map(function(objectname)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = objectname,
DSConnections = DSConnections[i])
return(ObjectMetaData[[ServerNames[i]]])
}) %>%
setNames(ExistingObjects$Object)
# Add some meta data to 'ObjectInfo'
ServerOverview <- ServerOverview %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = ServerNames[i], .before = 1)
Overview <- c(Overview, list(ServerOverview))
names(Overview)[i] <- ServerNames[i]
Details[[i]] <- MetaData
names(Details)[i] <- ServerNames[i]
}
# Summarize server-specific overviews in 'Overview.All'
Overview.All <- Overview %>%
list_rbind() %>%
group_by(Object) %>%
summarize(ServerName = "All",
ObjectExists = case_when(all(ObjectExists == TRUE) ~ "Uniform (TRUE)",
all(ObjectExists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Class = ifelse(length(unique(Class)) == 1, paste0("Uniform (", unique(Class), ")"), "Varied"),
Length = ifelse(length(unique(Length)) == 1, paste0("Uniform (", unique(Length), ")"), paste0("Varied (", min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE), ")")),
RowCount = sum(RowCount, is.na = TRUE)) %>%
relocate(ServerName, .before = Object)
# Row-bind cumulative and server-specific overview data.frames
Overview <- c(list(All = Overview.All),
Overview)
TestW <- Details %>%
list_transpose()
TestQ <- Details.Servers %>%
list_transpose() %>%
names() %>%
map(function(ObjectName)
{
TableCheck <- ds.GetTableCheck(TableName = ObjectName,
DSConnections = DSConnections)
})
TableCheck <- DSI::datashield.aggregate(conns = DSConnections,
expr = call("GetTableCheckDS",
TableName.S = TableName,
RequiredFeatureNames.S = RequiredFeatureNames,
GetTemplate.S = GetTemplate))
# Transpose list for easier handling
TableCheck <- TableCheck %>%
list_transpose()
View(FeatureCheck.All)
FeatureCheck.All <- TableCheck$FeatureCheck %>%
list_rbind() %>%
group_by(Feature) %>%
summarize(ServerName = "All",
Exists = case_when(all(Exists == TRUE) ~ "Uniform (TRUE)",
all(Exists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Type = ifelse(length(unique(Type)) == 1, paste0("Uniform (", unique(Type), ")"), "Varied"),
NonMissingValueRate = sum(NonMissingValueCount * NonMissingValueRate, na.rm = TRUE) / sum(NonMissingValueCount, na.rm = TRUE))
FeatureCheck.All <- TableCheck$FeatureCheck %>%
list_rbind()
FeatureCheck.AllW <- TableCheck$FeatureCheck %>%
list_rbind() %>%
group_by(Feature) %>%
summarize(ServerName = "All",
Exists = case_when(all(Exists == TRUE) ~ "Uniform (TRUE)",
all(Exists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Type = ifelse(length(unique(Type)) == 1, paste0("Uniform (", unique(Type), ")"), "Varied"),
NonMissingValueRate = sum(NonMissingValueCount * NonMissingValueRate, na.rm = TRUE) / sum(NonMissingValueCount, na.rm = TRUE))
View(FeatureCheck.AllW)
test <- NA
test > 0
FeatureCheck.AllW <- TableCheck$FeatureCheck %>%
list_rbind() %>%
group_by(Feature) %>%
summarize(ServerName = "All",
Exists = case_when(all(Exists == TRUE) ~ "Uniform (TRUE)",
all(Exists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Type = ifelse(length(unique(Type)) == 1, paste0("Uniform (", unique(Type), ")"), "Varied"),
NonMissingValueCount.Sum = sum(NonMissingValueCount, na.rm = TRUE),
NonMissingValueRate = ifelse(!is.na(NonMissingValueCount.Sum) & NonMissingValueCount.Sum > 0,
sum(NonMissingValueCount * NonMissingValueRate, na.rm = TRUE) / NonMissingValueCount.Sum,
NA))
FeatureCheck.AllW <- TableCheck$FeatureCheck %>%
list_rbind() %>%
group_by(Feature) %>%
summarize(ServerName = "All",
Exists = case_when(all(Exists == TRUE) ~ "Uniform (TRUE)",
all(Exists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Type = ifelse(length(unique(Type)) == 1, paste0("Uniform (", unique(Type), ")"), "Varied"),
NonMissingValueCount.Sum = sum(NonMissingValueCount, na.rm = TRUE),
NonMissingValueRate = ifelse(!is.na(NonMissingValueCount.Sum) & NonMissingValueCount.Sum > 0,
sum(NonMissingValueCount * NonMissingValueRate, na.rm = TRUE) / NonMissingValueCount.Sum,
0))
FeatureCheck <- c(list(All = FeatureCheck.All),
TableCheck$FeatureCheck)
FeatureCheck$All
FeatureCheck.All <- TableCheck$FeatureCheck %>%
list_rbind() %>%
group_by(Feature) %>%
summarize(ServerName = "All",
Exists = case_when(all(Exists == TRUE) ~ "Uniform (TRUE)",
all(Exists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Type = ifelse(length(unique(Type)) == 1, paste0("Uniform (", unique(Type), ")"), "Varied"),
NonMissingValueCount.Sum = sum(NonMissingValueCount, na.rm = TRUE),
NonMissingValueRate = ifelse(!is.na(NonMissingValueCount.Sum) & NonMissingValueCount.Sum > 0,
sum(NonMissingValueCount * NonMissingValueRate, na.rm = TRUE) / NonMissingValueCount.Sum,
0))
FeatureCheck <- c(list(All = FeatureCheck.All),
TableCheck$FeatureCheck)
FeatureCheck$All
FeatureCheck.All <- TableCheck$FeatureCheck %>%
list_rbind() %>%
group_by(Feature) %>%
summarize(ServerName = "All",
Exists = case_when(all(Exists == TRUE) ~ "Uniform (TRUE)",
all(Exists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Type = ifelse(length(unique(Type)) == 1, paste0("Uniform (", unique(Type), ")"), "Varied"),
NonMissingValueCount.Sum = sum(NonMissingValueCount, na.rm = TRUE),
NonMissingValueRate = ifelse(!is.na(NonMissingValueCount.Sum) & NonMissingValueCount.Sum > 0,
sum(NonMissingValueCount * NonMissingValueRate, na.rm = TRUE) / NonMissingValueCount.Sum,
0)) %>%
rename(NonMissingValueCount = "NonMissingValueCount.Sum")
View(FeatureCheck.All)
TableCheck$FeatureCheck
FeatureExistence <- FeatureCheck %>%
map(\(FeatureCheckTable) FeatureCheckTable %>% select(Feature, Exists)) %>%
list_rbind(names_to = "ServerName") %>%
pivot_wider(names_from = Feature,
values_from = Exists)
TableCheck <- DSI::datashield.aggregate(conns = DSConnections,
expr = call("GetTableCheckDS",
TableName.S = TableName,
RequiredFeatureNames.S = RequiredFeatureNames,
GetTemplate.S = GetTemplate))
# Transpose list for easier handling
TableCheck <- TableCheck %>%
list_transpose()
# Create overview data.frame containing whole-table parameters
TableCheckOverview <- tibble(ServerName = names(DSConnections),
TableExists = TableCheck$TableExists,
TableComplete = TableCheck$TableComplete,
RowCount = TableCheck$RowCount) %>%
rowwise() %>%
mutate(MissingFeatures = paste0(TableCheck$MissingFeatures[[ServerName]], collapse = ", ")) %>%
ungroup()
# Summarize server-specific 'FeatureCheck' tables for an additional cumulative table
FeatureCheck.All <- TableCheck$FeatureCheck %>%
list_rbind() %>%
group_by(Feature) %>%
summarize(ServerName = "All",
Exists.All = case_when(all(Exists == TRUE) ~ "Uniform (TRUE)",
all(Exists == FALSE) ~ "Uniform (FALSE)",
.default = "Varied"),
Type.All = ifelse(length(unique(Type)) == 1, paste0("Uniform (", unique(Type), ")"), "Varied"),
NonMissingValueCount.All = sum(NonMissingValueCount, na.rm = TRUE),
NonMissingValueRate.All = ifelse(!is.na(NonMissingValueCount.All) & NonMissingValueCount.All > 0,
sum(NonMissingValueCount * NonMissingValueRate, na.rm = TRUE) / NonMissingValueCount.All,
0))
# Add cumulative table to list of server-specific 'FeatureCheck' tables
FeatureCheck <- c(list(All = FeatureCheck.All),
TableCheck$FeatureCheck)
FeatureExistence <- FeatureCheck %>%
map(\(FeatureCheckTable) FeatureCheckTable %>% select(Feature, Exists)) %>%
list_rbind(names_to = "ServerName") %>%
pivot_wider(names_from = Feature,
values_from = Exists)
