file = "./Development/Reporting/CurationReport.rds")
# For testing purposes
CurationReportData <- CurationReports$SiteA
PathToReportTemplate <- "./Development/Reporting/CurationReport.qmd"
# Temporarily save R object containing curation report data to make it accessible to the Quarto background R sesssion
saveRDS(object = CurationReportData,
file = "./Development/Reporting/CurationReport.rds")
tryCatch({
quarto_render(input = PathToReportTemplate,
execute_params = list(PathToCurationReportData = "CurationReport.rds"))
CompletedSuccessfully <- TRUE
cat("Report created successfully!\n")
},
error = function(Error)
{
PathToRenderedReport <- NULL
CompletedSuccessfully <- FALSE
cat("Error rendering Quarto document:", conditionMessage(Error), "\n")
})
#| label: Setup
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = FALSE)
require(dplyr)
require(dsCCPhosClient)
require(gt)
require(purrr)
# Get temporarily saved curation report data
TransformationMonitors <- readRDS(file = params$PathToCurationReportData)
# For testing purposes
CurationReportData <- CurationReports$SiteA
PathToReportTemplate <- "./Development/Reporting/CurationReport.qmd"
# Temporarily save R object containing curation report data to make it accessible to the Quarto background R sesssion
saveRDS(object = CurationReportData,
file = "./Development/Reporting/CurationReport.rds")
tryCatch({
quarto_render(input = PathToReportTemplate,
execute_params = list(PathToCurationReportData = "CurationReport.rds"))
CompletedSuccessfully <- TRUE
cat("Report created successfully!\n")
},
error = function(Error)
{
PathToRenderedReport <- NULL
CompletedSuccessfully <- FALSE
cat("Error rendering Quarto document:", conditionMessage(Error), "\n")
})
if (CompletedSuccessfully == TRUE)
{
PathToRenderedReport <- str_replace(PathToReportTemplate, ".qmd", ".html")
browseURL(PathToRenderedReport)
}
devtools::load_all(".")
#library(dsBaseClient)
library(dsCCPhosClient)
DSI::datashield.logout(CCPConnections)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
devtools::load_all(".")
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# For testing purposes
DataSources <- CCPConnections
ProjectName <- "Virtual"
# Initiate output messaging objects
Messages <- list()
Messages$TableAvailability <- character()
Messages$Assignment <- character()
# Get server names
ServerNames <- names(DataSources)
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = CCPConnections)
RequiredTableAvailability <- tibble(TableName = dsCCPhosClient::Meta_TableNames$TableName_Raw)
for (i in 1:length(ServerNames))
{
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := TableName %in% TableAvailability[[ServerNames[i]]])
}
RequiredTableAvailability <- RequiredTableAvailability %>%
rowwise() %>%
mutate(IsAvailableEverywhere = all(c_across(all_of(ServerNames)) == TRUE),
NotAvailableAt = ifelse(IsAvailableEverywhere == FALSE,
paste0(ServerNames[c_across(all_of(ServerNames)) == FALSE], collapse = ", "),
NA)) %>%
ungroup()
# Compile output message concerning one table each and add it to Messages
for (i in 1:nrow(RequiredTableAvailability))
{
Row <- RequiredTableAvailability[i, ]
# Note: It's important to use 'dplyr::if_else()' instead of 'ifelse' here, otherwise the return won't be a named vector
Message <- if_else(Row$IsAvailableEverywhere == TRUE,
MakeFunctionMessage(Text = paste0("Opal data base table '",
Row$TableName,
"' is available on all servers!"),
IsClassSuccess = TRUE),
MakeFunctionMessage(Text = paste0("Opal data base table '",
Row$TableName,
"' is not available at ",
Row$NotAvailableAt),
IsClassWarning = TRUE))
Messages$TableAvailability <- c(Messages$TableAvailability,
Message)
}
Messages$TableAvailability
# Get table names
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
# Assign tables from Opal DB to object symbols in R session
for(i in 1:length(CCPTableNames_Raw))
{
datashield.assign(conns = CCPConnections,
symbol = paste0("RDS_", CCPTableNames_Curated[i]),
value = ifelse(ProjectName == "Virtual",
CCPTableNames_Raw[i],
paste0(ProjectName, ".", CCPTableNames_Raw[i])),
id.name = "_id")
# Make sure assignment was successful on all servers
ObjectInfo_Table <- ds.GetObjectInfo(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = CCPConnections)
# Add info about table assignment to Messages
Messages$Assignment <- c(Messages$Assignment,
ObjectInfo_Table)
}
Messages$Assignment
MessagesFromServer <- list()
# Assign tables from Opal DB to object symbols in R session
for(i in 1:length(CCPTableNames_Raw))
{
datashield.assign(conns = CCPConnections,
symbol = paste0("RDS_", CCPTableNames_Curated[i]),
value = ifelse(ProjectName == "Virtual",
CCPTableNames_Raw[i],
paste0(ProjectName, ".", CCPTableNames_Raw[i])),
id.name = "_id")
# Make sure assignment was successful on all servers
ObjectInfo_Table <- ds.GetObjectInfo(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = CCPConnections)
# Add info about table assignment to Messages
MessagesFromServer <- c(MessagesFromServer,
ObjectInfo_Table)
}
MessagesFromServer
unlist(MessagesFromServer)
?unlist
unlist(MessagesFromServer, use.names = FALSE)
BundledMessages <- list()
# Assign tables from Opal DB to object symbols in R session
for(i in 1:length(CCPTableNames_Raw))
{
datashield.assign(conns = CCPConnections,
symbol = paste0("RDS_", CCPTableNames_Curated[i]),
value = ifelse(ProjectName == "Virtual",
CCPTableNames_Raw[i],
paste0(ProjectName, ".", CCPTableNames_Raw[i])),
id.name = "_id")
# Make sure assignment was successful on all servers
ObjectInfo_Table <- ds.GetObjectInfo(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = CCPConnections)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectInfo_Table)
}
BundledMessages
?purrr::map_df
list_c(BundledMessages)
# Consolidate all raw data set tables in one list object called "RawDataSet"
dsBaseClient::ds.list(x = paste0("RDS_", CCPTableNames_Curated),
newobj = "RawDataSet",
datasources = CCPConnections)
# Make sure assignment of RawDataSet was successful on all servers
ObjectInfo_RawDataSet <- ds.GetObjectInfo(ObjectName = "RawDataSet",
DataSources = CCPConnections)
ObjectInfo_RawDataSet
DataSources <- CCPConnections
ProjectName <- "Virtual"
# Initiate output messaging objects
Messages <- list()
Messages$TableAvailability <- character()
Messages$Assignment <- character()
# Get server names
ServerNames <- names(DataSources)
# Assess availability of raw data set tables in Opal data base on servers
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = CCPConnections)
RequiredTableAvailability <- tibble(TableName = dsCCPhosClient::Meta_TableNames$TableName_Raw)
for (i in 1:length(ServerNames))
{
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := TableName %in% TableAvailability[[ServerNames[i]]])
}
RequiredTableAvailability <- RequiredTableAvailability %>%
rowwise() %>%
mutate(IsAvailableEverywhere = all(c_across(all_of(ServerNames)) == TRUE),
NotAvailableAt = ifelse(IsAvailableEverywhere == FALSE,
paste0(ServerNames[c_across(all_of(ServerNames)) == FALSE], collapse = ", "),
NA)) %>%
ungroup()
# Compile output message concerning one table each and add it to Messages
for (i in 1:nrow(RequiredTableAvailability))
{
Row <- RequiredTableAvailability[i, ]
# Note: It's important to use 'dplyr::if_else()' instead of 'ifelse' here, otherwise the return won't be a named vector
Message <- if_else(Row$IsAvailableEverywhere == TRUE,
MakeFunctionMessage(Text = paste0("Opal data base table '",
Row$TableName,
"' is available on all servers!"),
IsClassSuccess = TRUE),
MakeFunctionMessage(Text = paste0("Opal data base table '",
Row$TableName,
"' is not available at ",
Row$NotAvailableAt),
IsClassWarning = TRUE))
Messages$TableAvailability <- c(Messages$TableAvailability,
Message)
}
# Assignment in R server sessions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get table names
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
BundledMessages <- list()
# Assign tables from Opal DB to object symbols in R session
for(i in 1:length(CCPTableNames_Raw))
{
datashield.assign(conns = CCPConnections,
symbol = paste0("RDS_", CCPTableNames_Curated[i]),
value = ifelse(ProjectName == "Virtual",
CCPTableNames_Raw[i],
paste0(ProjectName, ".", CCPTableNames_Raw[i])),
id.name = "_id")
# Make sure assignment was successful on all servers
ObjectInfo_Table <- ds.GetObjectInfo(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = CCPConnections)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectInfo_Table)
}
# Turn list into (named) vector and assign it to Messages
Messages$Assignment <- purrr::list_c(BundledMessages)
# Consolidate all raw data set tables in one list object called "RawDataSet"
dsBaseClient::ds.list(x = paste0("RDS_", CCPTableNames_Curated),
newobj = "RawDataSet",
datasources = CCPConnections)
# Make sure assignment of RawDataSet was successful on all servers
ObjectInfo_RawDataSet <- ds.GetObjectInfo(ObjectName = "RawDataSet",
DataSources = CCPConnections)
# Add info about RawDataSet assignment to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(ObjectInfo_RawDataSet))
Messages
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
Messages_Loading
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
CCPConnections$SiteA
?DSI::datashield.login()
CCPConnections$SiteA()
CCPConnections$SiteA()
CCPConnections$SiteA
CCPConnections$SiteA[1]
CCPConnections$SiteA[[1]]
CCPConnections$SiteA
aggregateMethods(CCPConnections$SiteA)
DSI::datashield.connections()
rm(list=ls())
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
library(dsCCPhosClient)
# Install own dataSHIELD packages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#devtools::install_github(repo = "BastianReiter/dsCCPhos")
devtools::install_github(repo = "BastianReiter/dsCCPhosClient")
# Install own dataSHIELD packages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#devtools::install_github(repo = "BastianReiter/dsCCPhos")
devtools::install_github(repo = "BastianReiter/dsCCPhosClient")
?pkgconfig::set_config_in
globalenv()
?globalenv()
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
ServerCall <- call("GetReportingObjectDS",
ObjectName.S = "CurationReport")
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_ServerRequirements
PrintMessages(Messages_ServerRequirements)
paste0(unlist(Messages_ServerRequirements))
paste0(unlist(Messages_ServerRequirements), collapse = ",")
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
?ds.CurateData
?dsCCPhosClient::ds.AugmentData
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Staging)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
if (is.null(DataSources))
{
DataSources <- DSI::datashield.connections_find()
}
ServerCall <- call("GetReportingObjectDS",
ObjectName.S = "CurationReport")
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
Summary <- list()
for (i in 1:length(CurationReports[[1]]))      # Loop through all tables (Diagnosis, Histology, etc.)
{
SummaryOfTable <- data.frame()
for (j in 1:length(CurationReports))      # Loop through all servers
{
SummaryOfTable <- SummaryOfTable %>%
bind_rows(CurationReports[[j]][[i]])
}
if (nrow(SummaryOfTable) > 0)      # In case 'SummaryOfTable' is not empty
{
SummaryOfTable <- SummaryOfTable %>%
group_by(Feature, Value, IsValueEligible) %>%
summarize(Raw = sum(Raw),
Transformed = sum(Transformed),
Final = sum(Final))
}
Summary <- c(Summary,
list(SummaryOfTable))
}
length(CurationReports)
?tryCatch
?try
for (i in 1:length(CurationReports[[1]]))      # Loop through all tables (Diagnosis, Histology, etc.)
{
SummaryOfTable <- data.frame()
for (j in 1:length(CurationReports))      # Loop through all servers
{
SummaryOfTable <- SummaryOfTable %>%
bind_rows(CurationReports[[j]][[i]])
}
if (nrow(SummaryOfTable) > 0)      # In case 'SummaryOfTable' is not empty
{
try(SummaryOfTable <- SummaryOfTable %>%
group_by(Feature, Value, IsValueEligible) %>%
summarize(Raw = sum(Raw),
Transformed = sum(Transformed),
Final = sum(Final)))
}
Summary <- c(Summary,
list(SummaryOfTable))
}
names(CurationReports$SiteA)
length(CurationReports[[1]]
)
length(CurationReports[[1]]$Transformation)
CurationReports[[1]]$Transformation[[1]]
CurationReports$SiteA$UnlinkedEntries
UnlinkedEntriesSummary <- integer()
for (i in 1:length(CurationReports))      # Loop through all servers
{
UnlinkedEntriesSummary <- sum(UnlinkedEntriesSummary,
CurationReports[[i]]$UnlinkedEntries)
}
UnlinkedEntriesSummary
UnlinkedEntriesSummary <- integer()
for (i in 1:length(CurationReports))      # Loop through all servers
{
UnlinkedEntriesSummary <- UnlinkedEntriesSummary + CurationReports[[i]]$UnlinkedEntries
}
UnlinkedEntriesSummary
UnlinkedEntriesSummary <- CurationReports[[1]]$UnlinkedEntries
for (i in 2:length(CurationReports))      # Loop through all servers
{
UnlinkedEntriesSummary <- UnlinkedEntriesSummary + CurationReports[[i]]$UnlinkedEntries
}
UnlinkedEntriesSummary
CurationReports[[1]]$UnlinkedEntries
CurationReports[[2]]$UnlinkedEntries
CurationReports[[3]]$UnlinkedEntries
# Initiate summary with vector from first server
UnlinkedEntriesSummary <- CurationReports[[1]]$UnlinkedEntries
for (i in 5:length(CurationReports))      # Loop through all other servers
{
UnlinkedEntriesSummary <- UnlinkedEntriesSummary + CurationReports[[i]]$UnlinkedEntries
}
CurationReports[[1]]$DiagnosisClassification
dsCCPhosClient::ds.AugmentData()
?dsCCPhosClient::ds.AugmentData()
library(dsCCPhosClient)
?dsCCPhos::CurateDataDS
devtools::load_all(".")
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
DSI::datashield.logout(CCPConnections)
rm(list=ls())
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Staging)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Staging)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
typeof(CCPConnections)
devtools::load_all(".")
library(dsCCPhosClient)
