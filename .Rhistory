list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = NonMissingValueRate)
})
Test$RDS_BioSampling$SiteA$RateOfNonMissingValues
# Create list of data frames (one per RDS table) containing feature-specific non-missing value rates
NonMissingValueRates <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$NonMissingValueRates) %>%
list_rbind(names_to = "SiteName")
# pivot_wider(names_from = Feature,
#             values_from = NonMissingValueRate)
})
NonMissingValueRates$RDS_BioSampling
NonMissingValueRates$RDS_DiseaseStatus
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
# Create list of data frames (one per RDS table) containing info about existence of table features
FeatureExistence <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = Exists)
})
FeatureExistence
TableInfo <- TableCheck$SiteA$RDS_Diagnosis
TableInfo$FeatureExistence
sum(TableInfo$FeatureExistence$Exists)
sum(TableInfo$FeatureExistence$Exists)
CountExistingFeatures <- sum(TableInfo$FeatureExistence$Exists)
CountTotalFeatures <- nrow(TableInfo$FeatureExistence)
require(stingr)
require(stringr)
devtools::load_all(".")
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
?str_starts
devtools::load_all(".")
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSTableCheck$TableStatus$CheckRDSTables
RDSTableCheck$TableStatus$RDS_DiseaseStatus
RDSTableCheck$TableStatus$RDS_Histology
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
TableData <- RDSTableCheck$TableStatus$RDS_DiseaseStatus
CCPhosApp::DataFrameToHtmlTable(DataFrame = TableData,
ColContentHorizontalAlign = "center",
ColumnLabels = ColumnLabels,
ColumnMaxWidth = 14,
SemanticTableClass = "ui small compact celled structured table",
TurnColorValuesIntoDots = TRUE)
CCPhosApp::DataFrameToHtmlTable(DataFrame = TableData,
ColContentHorizontalAlign = "center",
#ColumnLabels = ColumnLabels,
ColumnMaxWidth = 14,
SemanticTableClass = "ui small compact celled structured table",
TurnColorValuesIntoDots = TRUE)
TableData <- RDSTableCheck$TableStatus
View(TableData)
TableData <- RDSTableCheck$TableStatus
CCPhosApp::DataFrameToHtmlTable(DataFrame = TableData,
ColContentHorizontalAlign = "center",
#ColumnLabels = ColumnLabels,
ColumnMaxWidth = 14,
SemanticTableClass = "ui small compact celled structured table",
TurnColorValuesIntoDots = TRUE)
saveRDS(TableData, file = "TestTable.rds")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
saveRDS(RDSTableCheck, "TestTableCheck.rds")
?colorRampPalette
?colorRamp
?colorRampPalette
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName <- "RawDataSet",
RequiredTableNames = paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated),
RequiredFeatureNames = RequiredTableNames.S %>%
map(\(tablename) filter(dsCCPhos::Meta_Features, TableName_Curated == str_remove(tablename, "RDS_"))$FeatureName_Raw) %>%
set_names(RequiredTableNames.S))
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName <- "RawDataSet",
RequiredTableNames = paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated),
RequiredFeatureNames = RequiredTableNames.S %>%
map(\(tablename) filter(dsCCPhos::Meta_Features, TableName_Curated == str_remove(tablename, "RDS_"))$FeatureName_Raw) %>%
set_names(RequiredTableNames))
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName <- "RawDataSet",
RequiredTableNames = paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated),
RequiredFeatureNames = RequiredTableNames %>%
map(\(tablename) filter(dsCCPhos::Meta_Features, TableName_Curated == str_remove(tablename, "RDS_"))$FeatureName_Raw) %>%
set_names(RequiredTableNames))
RequiredTableNames <- paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated)
RequiredFeatureNames <- RequiredTableNames %>%
map(\(tablename) filter(dsCCPhos::Meta_Features, TableName_Curated == str_remove(tablename, "RDS_"))$FeatureName_Raw) %>%
set_names(RequiredTableNames)
RequiredTableNames <- paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated)
RequiredFeatureNames <- RequiredTableNames %>%
map(\(tablename) filter(dsCCPhos::Meta_Features, TableName_Curated == str_remove(tablename, "RDS_"))$FeatureName_Raw) %>%
set_names(RequiredTableNames)
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "RawDataSet",
RequiredTableNames = RequiredTableNames,
RequiredFeatureNames = RequiredFeatureNames)
rlang::last_trace()
devtools::load_all(".")
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "RawDataSet")
RDSTableCheck$TableStatus
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
RDSTableCheck$TableStatus
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
CDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "CuratedDataSet",
AssumeCCPDataSet = TRUE)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
CDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "CuratedDataSet",
AssumeCCPDataSet = TRUE)
DataSources <- CCPConnections
DataSetName <- "RawDataSet"
AssumeCCPDataSet <- TRUE
require(dplyr)
require(purrr)
require(stringr)
require(tidyr)
ServerCall <- call("CheckDataSetDS",
DataSetName.S = DataSetName,
AssumeCCPDataSet.S = AssumeCCPDataSet)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
CountExistingFeatures <- sum(TableInfo$FeatureCheck$Exists)
CountTotalFeatures <- nrow(TableInfo$FeatureCheck)
if (Status != "grey") { Status <- paste0(Status, " (", CountExistingFeatures, "/", CountTotalFeatures, ")") }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ str_starts(.x, "green")) ~ "green",
if_any(-SiteName, ~ str_starts(.x, "red")) ~ "red",
if_any(-SiteName, ~ str_starts(.x, "yellow")) ~ "yellow",
TRUE ~ "grey"))
TableStatus
DataSources <- CCPConnections
DataSetName <- "CuratedDataSet"
AssumeCCPDataSet <- TRUE
ServerCall <- call("CheckDataSetDS",
DataSetName.S = DataSetName,
AssumeCCPDataSet.S = AssumeCCPDataSet)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
CountExistingFeatures <- sum(TableInfo$FeatureCheck$Exists)
CountTotalFeatures <- nrow(TableInfo$FeatureCheck)
if (Status != "grey") { Status <- paste0(Status, " (", CountExistingFeatures, "/", CountTotalFeatures, ")") }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ str_starts(.x, "green")) ~ "green",
if_any(-SiteName, ~ str_starts(.x, "red")) ~ "red",
if_any(-SiteName, ~ str_starts(.x, "yellow")) ~ "yellow",
TRUE ~ "grey"))
TableCheck$SiteA$BioSampling
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
RDSTableCheck$TableStatus
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
CDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "CuratedDataSet",
AssumeCCPDataSet = TRUE)
CDSTableCheck$TableStatus
View(CDSTableCheck$NonMissingValueRates)
View(CDSTableCheck$NonMissingValueRates$Metastasis)
View(CDSTableCheck$NonMissingValueRates$Staging)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
RDSTableCheck$TableStatus
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
Test <- list(Profile = "Default")
Test$Run <- TRUE
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckDataSet(DataSources = CCPConnections,
DataSetName = "RawDataSet",
AssumeCCPDataSet = TRUE)
RDSTableCheck$TableStatus
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
library(devtools)
library(dplyr)
# Linked to dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.CheckDataSet.R")
# use_r("ds.GetAugmentationReport.R")
use_r("ds.GetCohortDescription.R")
?call
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
#--- For Testing Purposes ---
DataSources <- CCPConnections
require(dplyr)
require(purrr)
#--- For Testing Purposes ---
# DataSources <- CCPConnections
DataSetName <- "AugmentedDataSet"
CCPDataSetType <- "ADS"
require(dplyr)
require(purrr)
# SiteReturns: Obtain descriptive data for each server calling dsCCPhos::GetCohortDescriptionDS()
SiteReturns <- DSI::datashield.aggregate(conns = DataSources,
expr = call("GetCohortDescriptionDS",
DataSetName.S = DataSetName,
CCPDataSetType.S = CCPDataSetType))
SiteReturns$SiteA$CohortSize_OverTime
SiteReturns$SiteA$Characteristics
?factor
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
DataSources <- CCPConnections
DataSetName <- "AugmentedDataSet"
CCPDataSetType <- "ADS"
require(dplyr)
require(purrr)
# SiteReturns: Obtain descriptive data for each server calling dsCCPhos::GetCohortDescriptionDS()
SiteReturns <- DSI::datashield.aggregate(conns = DataSources,
expr = call("GetCohortDescriptionDS",
DataSetName.S = DataSetName,
CCPDataSetType.S = CCPDataSetType))
SiteReturns$SiteA$Characteristics
# Convert site returns into tibble containing separate statistics
Test <- ls_SiteReturns %>%
list_rbind(names_to = "Site")
# Convert site returns into tibble containing separate statistics
Test <- SiteReturns %>%
list_rbind(names_to = "Site")
# Convert site returns into tibble containing separate statistics
Test <- SiteReturns %>% list_transpose()
Test$CohortSize_OverTime
# Convert site returns into tibble containing separate statistics
SiteReturns <- SiteReturns %>% list_transpose()
Demographics <- SiteReturns$Characteristics %>% list_transpose()
Demographics$Size
?list_transpose
Demographics$Gender
Demographics <- SiteReturns$Characteristics %>% list_transpose()
