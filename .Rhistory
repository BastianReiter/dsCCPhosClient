{
case_when(TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE ~ "green",
TableInfo$TableExists == FALSE ~ "red",
TableInfo$TableComplete == FALSE ~ "yellow",
TRUE ~ "grey")
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
#TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
TestData_WithEmptyTables <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData_WithEmptyTables.rds")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
require(dplyr)
require(purrr)
# For testing purposes
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
TableCheck$SiteA$RDS_BioSampling
View(TableCheck$SiteA$RDS_BioSampling$FeatureExistence)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
require(dplyr)
require(purrr)
# For testing purposes
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
case_when(TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE ~ "green",
TableInfo$TableExists == FALSE ~ "red",
TableInfo$TableComplete == FALSE ~ "yellow",
TRUE ~ "grey")
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName")
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
datashield.errors()
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
case_when(TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE ~ "green",
TableInfo$TableExists == FALSE ~ "red",
TableInfo$TableComplete == FALSE ~ "yellow",
TRUE ~ "grey")
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName")
View(TableStatus)
FeatureStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteFeatureStatus <- SiteTableCheck %>%
map(function(TableInfo)
{
TableInfo$FeatureExistence
})
})
purrr::transpose()
?purrr::transpose
Test <- TableCheck %>% list_transpose()
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind()
})
View(FeatureStatus$RDS_BioSampling)
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind(names_to = "SiteName")
})
View(FeatureStatus$RDS_BioSampling)
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind(names_to = "SiteName") %>%
as_tibble()
})
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_cbind() %>%
as_tibble()
})
View(FeatureStatus$RDS_BioSampling)
View(TableCheck$SiteA$RDS_BioSampling$FeatureExistence)
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind(names_to = "SiteName") %>%
as_tibble()
})
View(FeatureStatus$RDS_BioSampling)
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind(names_to = "SiteName")
})
View(FeatureStatus$RDS_BioSampling)
?pivot_wider
View(FeatureStatus$RDS_BioSampling)
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = FeatureName,
values_from = Exists)
})
View(FeatureStatus$RDS_BioSampling)
devtools::load_all(".")
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSTableCheck$TableStatus
RDSTableCheck$FeatureStatus$RDS_Diagnosis
View(TableStatus)
?across
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
?purrr::list_c
Test <- purrr::list_c("abc", list(a = "a1", b = "b1", c = "c1"))
devtools::load_all(".")
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
Messages$Assignment
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
require(dplyr)
require(dsBaseClient)
require(DSI)
require(purrr)
require(tidyr)
# For testing purposes
DataSources <- CCPConnections
ProjectName <- "Virtual"
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- c(Topic = "Object assignment on servers")
# Get server names
ServerNames <- names(DataSources)
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
# Loop through all participating sites / servers
for (i in 1:length(ServerNames))
{
# In case project is virtual, server Opal table names are just raw CCP table names
ServerTableNames <- CCPTableNames_Raw
# If project is not virtual, there can be server-specific project names and therefore server-specific Opal table names
if (!is.null(CCPSiteSpecifications))
{
# Get server-specific project name
ServerProjectName <- CCPSiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, ".", CCPTableNames_Raw)
}
# Loop through all tables from Opal DB and assign their content to objects (data.frames) in R session
for(i in 1:length(ServerTableNames))
{
datashield.assign(conns = DataSources,
symbol = paste0("RDS_", CCPTableNames_Curated[i]),
value = ServerTableNames[i],
id.name = "_id")
}
}
BundledMessages <- list()
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table)
}
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(BundledMessages))
Messages$Assignment
ObjectStatus_Table$ServerMessage
ObjectStatus_Table$ObjectValidity
CCPTableNames_Curated
BundledMessages
BundledMessages <- list()
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table)
}
CCPTableNames_Curated
# For testing purposes only
ObjectName <- "RDS_Patients"
DataSources <- CCPConnections
# Construct server-side function call
ServerCall <- call("GetObjectStatusDS",
ObjectName.S = ObjectName)
# Get object status info from every server
ObjectStatus <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
Test <- GetServerWorkspaceInfo(DataSources = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get names of symbols (objects) in all server workspaces
ServerObjectNames <- DSI::datashield.symbols(conns = DataSources)
# For testing purposes
DataSources <- CCPConnections
ProjectName <- "Virtual"
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- c(Topic = "Object assignment on servers")
# Get server names
ServerNames <- names(DataSources)
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
View(RDSTableCheck$FeatureStatus$RDS_Patient)
View(RDSTableCheck$FeatureStatus$RDS_Diagnosis)
HTMLTables <- RDSTableCheck$FeatureStatus %>%
map_chr(function(TableData)
{
CCPhosApp::DataFrameToHtmlTable(DataFrame = TableData,
ColContentHorizontalAlign = "center",
ColumnLabels = c(SiteName = "Site"),
SemanticTableClass = "ui small compact celled structured table",
TurnLogicalIntoIcon = TRUE)
})
test <- RDSTableCheck$FeatureStatus
HTMLTables <- RDSTableCheck$FeatureStatus %>%
map_chr(function(TableData)
{
CCPhosApp::DataFrameToHtmlTable(DataFrame = as.data.frame(TableData),
ColContentHorizontalAlign = "center",
ColumnLabels = c(SiteName = "Site"),
SemanticTableClass = "ui small compact celled structured table",
TurnLogicalIntoIcon = TRUE)
})
HTMLTables <- RDSTableCheck$FeatureStatus %>%
map_chr(function(TableData)
{
paste0(names(TableData), collapse = "")
# CCPhosApp::DataFrameToHtmlTable(DataFrame = as.data.frame(TableData),
#                      ColContentHorizontalAlign = "center",
#                      ColumnLabels = c(SiteName = "Site"),
#                      SemanticTableClass = "ui small compact celled structured table",
#                      TurnLogicalIntoIcon = TRUE)
})
Test <- CCPhosApp::DataFrameToHtmlTable(DataFrame = RDSTableCheck$FeatureStatus$RDS_Metastasis,
ColContentHorizontalAlign = "center",
ColumnLabels = c(SiteName = "Site"),
SemanticTableClass = "ui small compact celled structured table",
TurnLogicalIntoIcon = TRUE)
?html_text
??html_text
Test
htmltools::html_print(Test)
shiny::htmlOutput(Test)
as.character(Test)
htmltools::htmlEscape(as.character(Test))
Stringtest <- as.character(Test)
HTML(Stringtest)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# For testing purposes only
DataSources <- CCPConnections
ServerCall <- call("GetReportingObjectDS",
ObjectName.S = "CurationMessages")
CurationMessages <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
CurationMessages$SiteA$DiagnosisClassification
CurationMessages$SiteA$CheckCurationCompleted
CurationMessages$SiteA$DiagnosisRedundancies
CurationMessages$SiteA$DiagnosisAssociation
CurationMessages$SiteA$DiagnosisClassification
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) SiteMessages$CheckCurationCompleted ) %>%
list_rbind(names_to = "SiteName")
CurationMessages$SiteA$CheckCurationCompleted
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) SiteMessages$CheckCurationCompleted )
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) SiteMessages$CheckCurationCompleted ) %>%
as_tibble() %>%
list_rbind(names_to = "SiteName")
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) SiteMessages$CheckCurationCompleted ) %>%
as.data.frame() %>%
list_rbind(names_to = "SiteName")
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) list(SiteMessages$CheckCurationCompleted) ) %>%
list_rbind(names_to = "SiteName")
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) data.frame(SiteMessages$CheckCurationCompleted) ) %>%
list_rbind(names_to = "SiteName")
View(CheckCuration)
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) tibble(CheckCurationCompleted = SiteMessages$CheckCurationCompleted) ) %>%
list_rbind(names_to = "SiteName")
View(CurationMessages)
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) data.frame(CheckCurationCompleted = SiteMessages$CheckCurationCompleted) ) %>%
list_rbind(names_to = "SiteName")
View(CurationMessages)
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) data.frame(CheckCurationCompleted = SiteMessages$CheckCurationCompleted) ) %>%
list_rbind(names_to = "SiteName")
CheckCuration <- CurationMessages %>%
map(\(SiteMessages) tibble(CheckCurationCompleted = SiteMessages$CheckCurationCompleted) ) %>%
list_rbind(names_to = "SiteName")
View(CheckCuration)
MessagesCheckCuration <- CurationMessages %>%
imap(function(SiteMessages, sitename)
{
case_when(SiteMessages$CheckCurationCompleted == "green" ~ MakeFunctionMessage(Text = paste0("Curation on server '", sitename, "' performed successfully!"),
IsClassSuccess = TRUE),
SiteMessages$CheckCurationCompleted == "yellow" ~ MakeFunctionMessage(Text = paste0("Curation on server '", sitename, "' performed with warnings!"),
IsClassWarning = TRUE),
SiteMessages$CheckCurationCompleted == "red" ~ MakeFunctionMessage(Text = paste0("Curation on server '", sitename, "' could not be performed!"),
IsClassFailure = TRUE),
TRUE ~ MakeFunctionMessage(Text = paste0("Curation on server '", sitename, "' could not be assessed."),
IsClassFailure = TRUE))
}) %>%
list_c()
MessagesCheckCuration
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# For testing purposes only
DataSources <- CCPConnections
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
Messages <- ds.GetRDSValidationReport(DataSources = CCPConnections)
Messages$SiteA$RDS_Patient
summary(Messages$SiteA$RDS_Patient)
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
Meta_ValueSets <- dsCCPhos::Meta_ValueSets
library(dplyr)
library(readxl)
library(usethis)
Meta_ValueSets <- dsCCPhos::Meta_ValueSets
RuleSet_RawDataTransformation <- dsCCPhos::RuleSet_RawDataTransformation
Meta_TableNames <- dsCCPhos::Meta_TableNames
Meta_FeatureNames <- dsCCPhos::Meta_FeatureNames
Meta_ValueSets <- dsCCPhos::Meta_ValueSets
RuleSet_RawDataTransformation <- dsCCPhos::RuleSet_RawDataTransformation
RuleSet_DiagnosisRedundancy <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleSet_DiagnosisAssociation <- dsCCPhos::RuleSet_DiagnosisAssociation
dsCCPhos::RuleSet_RawDataHarmonization
RuleSet_RawDataHarmonization <- dsCCPhos::RuleSet_RawDataHarmonization
use_data(RuleSet_RawDataTransformation, overwrite = TRUE)
devtools::load_all(".")
