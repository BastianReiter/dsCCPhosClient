RawDataSetName.S = RawDataSetName,
Settings.S = Settings))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if assignment of CurationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = OutputName,
DSConnections = DSConnections))
}
CurationOutputObjects <- c("CuratedDataSet",
"CurationReport",
"Messages")
for(i in 1:length(CurationOutputObjects))
{
# Execute server-side list extraction
DSI::datashield.assign(conns = DSConnections,
symbol = CurationOutputObjects[i],
value = call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = CurationOutputObjects[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = CurationOutputObjects[i],
DSConnections = DSConnections))
}
}
# Optionally unpack (unlist) CuratedDataSet
if (UnpackCuratedDataSet == TRUE)
{
# Get curated table names
CCPTableNames.CDS <- dsCCPhosClient::Meta.Tables$TableName.Curated
for(i in 1:length(CCPTableNames.CDS))
{
# Execute server-side assign function
DSI::datashield.assign(conns = DSConnections,
symbol = paste0("CDS.", CCPTableNames.CDS[i]),      # E.g. 'CDS.Metastasis'
value = call("ExtractFromListDS",
ListName.S = "CuratedDataSet",
ObjectName.S = CCPTableNames.CDS[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = paste0("CDS.", CCPTableNames.CDS[i]),
DSConnections = DSConnections))
}
}
}
if (RunAssignmentChecks == TRUE)
{
# Turn list into (named) vector
Messages$Assignment <- purrr::list_c(Messages$Assignment)
# Add topic element to start of vector
Messages$Assignment <- c(Topic = "Object assignment on servers",
Messages$Assignment)
}
# Create table object for output
CurationCompletionCheck <- CurationMessages %>%
map(\(ServerMessages) tibble(CheckCurationCompletion = ServerMessages$CheckCurationCompletion) ) %>%
list_rbind(names_to = "ServerName")
# Create vector of messages informing about curation completion
Messages$CurationCompletion <- CurationMessages %>%
imap(function(ServerMessages, servername)
{
case_when(ServerMessages$CheckCurationCompletion == "green" ~ dsFredaClient::MakeFunctionMessage(Text = paste0("Curation on server '", servername, "' performed successfully!"),
IsClassSuccess = TRUE),
ServerMessages$CheckCurationCompletion == "yellow" ~ dsFredaClient::MakeFunctionMessage(Text = paste0("Curation on server '", servername, "' performed with warnings! \n",
ServerMessages$FinalMessage),
IsClassWarning = TRUE),
ServerMessages$CheckCurationCompletion == "red" ~ dsFredaClient::MakeFunctionMessage(Text = paste0("Curation on server '", servername, "' could not be performed! \n",
ServerMessages$FinalMessage),
IsClassFailure = TRUE),
TRUE ~ dsFredaClient::MakeFunctionMessage(Text = paste0("Curation on server '", servername, "' could not be assessed. \n",
ServerMessages$FinalMessage),
IsClassFailure = TRUE))
}) %>%
list_c()
# Add topic element to start of vector
Messages$CurationCompletion <- c(Topic = "Curation process completion",
Messages$CurationCompletion)
# Print messages on console
PrintMessages(Messages)
# Invisibly return Messages and Curation completion check object
invisible(list(Messages = Messages,
CurationCompletionCheck = CurationCompletionCheck))
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
devtools::load_all(".")
rm(DSConnections)
devtools::load_all(".")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
Meta.ADS <- dsCCPhos::Meta.ADS
library(dplyr)
library(usethis)
use_data(Meta.ADS, overwrite = TRUE)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
View(RDSTableCheck$TableStatus)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
# --- For Testing Purposes ---
DSConnections <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DSConnections))
ServerObjectNames <- DSI::datashield.symbols(conns = DSConnections)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# If the server workspaces are completely empty, stop function and return NULL
if (length(UniqueObjectNames) == 0) { return(NULL) }
# Initiate objects
Overview <- list()
ObjectDetails <- list()
for (servername in ServerNames)
{
ServerOverview <- tibble(Object = UniqueObjectNames) %>%
mutate(Exists = Object %in% ServerObjectNames[[servername]])
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
ExistingObjects <- ServerOverview %>%
filter(Exists == TRUE)
# Get meta data
MetaData <- ExistingObjects %>%
pull(Object) %>%
map(function(objectname)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = objectname,
DSConnections = DSConnections[servername])
return(ObjectMetaData[[servername]])
}) %>%
stats::setNames(ExistingObjects$Object)
# Add some meta data to 'ServerOverview'
ServerOverview <- ServerOverview %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = as.character(ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA)),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = servername, .before = 1)
# Extract structural details from object meta data
ServerObjectDetails <- MetaData %>%
map(\(ObjectMetaData) ObjectMetaData$Structure)
# Add server-specific overview table and object details to overall lists
Overview[[servername]] <- ServerOverview
ObjectDetails[[servername]] <- ServerObjectDetails
}
# Summarize server-specific overviews in 'Overview.All'
#-------------------------------------------------------------------------------
Overview.All <- Overview %>%
list_rbind() %>%
group_by(Object) %>%
summarize(ServerName = "All",
Exists.Info = case_when(n_distinct(Exists) == 1 ~ "Uniform",
.default = "Varied"),
Exists = case_when(all(Exists == TRUE) ~ TRUE,
.default = NA),
Class.Info = case_when(n_distinct(Class) == 1 ~ "Uniform",
.default = "Varied"),
Class = case_when(n_distinct(Class) == 1 ~ first(Class),
.default = "Varied"),
Length.Info = case_when(n_distinct(Length) == 1 ~ "Uniform",
.default = paste0("Varied (", min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE), ")")),
Length = case_when(n_distinct(Length) == 1 ~ first(Length),
n_distinct(Length) > 1 ~ paste0(min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE)),
.default = NA),
RowCount = sum(RowCount, na.rm = TRUE)) %>%
ungroup() %>%
relocate(ServerName, .before = Object)
# Row-bind cumulative and server-specific overview data.frames
Overview <- c(list(All = Overview.All),
Overview)
# For easier handling
ObjectDetails <- ObjectDetails %>%
list_transpose(simplify = FALSE)
# For all objects that are not of class 'data.frame', summarize server-specific object details
NonTableDetails <- Overview.All %>%
filter(!(Class == "data.frame")) %>%
pull(Object, name = Object) %>%
map(function(objectname)
{
# Row-bind all server-specific tables containing object structure details
ObjectDetails.All <- ObjectDetails[[objectname]] %>%     # This is a list with server-specific structural details for the current object
list_rbind()
#{ if (!is.data.frame(.) & !is.vector(.)) { list_rbind(.) } }
if (!length(ObjectDetails.All) == 0)
{
# Create a summarizing structure table
ObjectDetails.All <- ObjectDetails.All %>%
group_by(Element) %>%
summarize(ExistsEverywhere = case_when(n() == length(ServerNames) ~ TRUE,
.default = FALSE),
Type = case_when(length(unique(Type)) == 1 ~ unique(Type),
.default = "Varied")) %>%
ungroup()
} else { ObjectDetails.All <- NULL }
return(c(list(All = ObjectDetails.All),
ObjectDetails[[objectname]]))
})
# For all objects of class 'data.frame' use 'ds.GetTableCheck' to get more meta data
TableDetails <- Overview.All %>%
filter(Class == "data.frame") %>%
pull(Object, name = Object) %>%
map(function(objectname)
{
ds.GetTableCheck(TableName = objectname,
DSConnections = DSConnections) %>%
pluck("FeatureCheckOverview")
})
# Re-consolidate in 'ObjectDetails'
ObjectDetails <- c(NonTableDetails, TableDetails) %>%
list_transpose()
# Get eligible value sets from meta data
#-------------------------------------------------------------------------------
EligibleValues <- tibble(Object = UniqueObjectNames) %>%
mutate(TableWithoutPrefix = str_replace(Object, "^(RDS.|CDS.|ADS.)", ""),
Stage = case_when(str_starts(Object, "RDS.") ~ "Raw",
str_starts(Object, "CDS.") ~ "Curated",
str_starts(Object, "ADS.") ~ "Augmented",
.default = NA))
View(EligibleValues)
View(Overview.All)
# Get eligible value sets from meta data
#-------------------------------------------------------------------------------
EligibleValues <- Overview.All %>%
filter(Class == "data.frame") %>%
select(Object) %>%
mutate(TableWithoutPrefix = str_replace(Object, "^(RDS.|CDS.|ADS.)", ""),
Stage = case_when(str_starts(Object, "RDS.") ~ "Raw",
str_starts(Object, "CDS.") ~ "Curated",
str_starts(Object, "ADS.") ~ "Augmented",
.default = NA))
View(EligibleValues)
EligibleValues.RDS.CDS <- EligibleValues %>%
filter(Stage %in% c("Raw", "Curated")) %>%
left_join(dsCCPhosClient::Meta.Values, by = join_by(TableWithoutPrefix == Table), relationship = "many-to-many") %>%
mutate(Feature = case_when(Stage == "Raw" ~ FeatureName.Raw,
Stage == "Curated" ~ FeatureName.Curated,
.default = NA),
Value = case_when(Stage == "Raw" ~ Value.Raw,
Stage == "Curated" ~ Value.Curated,
.default = NA),
Label = case_when(Stage == "Raw" ~ Label.Raw,
Stage == "Curated" ~ Label.Curated,
.default = NA))
View(EligibleValues.RDS.CDS)
EligibleValues.RDS.CDS <- EligibleValues %>%
filter(Stage %in% c("Raw", "Curated")) %>%
left_join(dsCCPhosClient::Meta.Values, by = join_by(TableWithoutPrefix == Table), relationship = "many-to-many") %>%
mutate(Feature = case_when(Stage == "Raw" ~ FeatureName.Raw,
Stage == "Curated" ~ FeatureName.Curated,
.default = NA),
Value = case_when(Stage == "Raw" ~ Value.Raw,
Stage == "Curated" ~ Value.Curated,
.default = NA),
Label = case_when(Stage == "Raw" ~ Label.Raw,
Stage == "Curated" ~ Label.Curated,
.default = NA)) %>%
filter(!is.na(Feature) & !is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
View(EligibleValues.RDS.CDS)
EligibleValues.ADS <- EligibleValues %>%
filter(Stage == "Augmented") %>%
left_join(dsCCPhosClient::Meta.ADS, by = join_by(TableWithoutPrefix == TableName), relationship = "many-to-many")
View(EligibleValues.ADS)
EligibleValues.ADS <- EligibleValues %>%
filter(Stage == "Augmented") %>%
left_join(dsCCPhosClient::Meta.ADS, by = join_by(TableWithoutPrefix == TableName), relationship = "many-to-many") %>%
rename("Feature" == "FeatureName") %>%
select(Object,
Feature,
Value,
Label)
EligibleValues.ADS <- EligibleValues %>%
filter(Stage == "Augmented") %>%
left_join(dsCCPhosClient::Meta.ADS, by = join_by(TableWithoutPrefix == TableName), relationship = "many-to-many") %>%
rename("Feature" = "FeatureName") %>%
select(Object,
Feature,
Value,
Label)
EligibleValues <- EligibleValues.RDS.CDS %>%
bind_rows(EligibleValues.ADS) %>%
base::split(., .$Object) %>%
map(\(PerObject) base::split(PerObject, PerObject$Feature))
# Get eligible value sets from meta data
#-------------------------------------------------------------------------------
EligibleValues <- Overview.All %>%
filter(Class == "data.frame") %>%
select(Object) %>%
mutate(TableWithoutPrefix = str_replace(Object, "^(RDS.|CDS.|ADS.)", ""),
Stage = case_when(str_starts(Object, "RDS.") ~ "Raw",
str_starts(Object, "CDS.") ~ "Curated",
str_starts(Object, "ADS.") ~ "Augmented",
.default = NA))
EligibleValues.RDS.CDS <- EligibleValues %>%
filter(Stage %in% c("Raw", "Curated")) %>%
left_join(dsCCPhosClient::Meta.Values, by = join_by(TableWithoutPrefix == Table), relationship = "many-to-many") %>%
mutate(Feature = case_when(Stage == "Raw" ~ FeatureName.Raw,
Stage == "Curated" ~ FeatureName.Curated,
.default = NA),
Value = case_when(Stage == "Raw" ~ Value.Raw,
Stage == "Curated" ~ Value.Curated,
.default = NA),
Label = case_when(Stage == "Raw" ~ Label.Raw,
Stage == "Curated" ~ Label.Curated,
.default = NA)) %>%
filter(!is.na(Feature) & !is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
EligibleValues.ADS <- EligibleValues %>%
filter(Stage == "Augmented") %>%
left_join(dsCCPhosClient::Meta.ADS, by = join_by(TableWithoutPrefix == TableName), relationship = "many-to-many") %>%
rename("Feature" = "FeatureName") %>%
filter(!is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
EligibleValues <- EligibleValues.RDS.CDS %>%
bind_rows(EligibleValues.ADS) %>%
base::split(., .$Object) %>%
map(\(PerObject) base::split(PerObject, PerObject$Feature))
EligibleValues$ADS.Events$Aliquot
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
CDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CuratedDataSet",
Stage = "Curated")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "AugmentedDataSet")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
CohortDescription <- ds.GetCohortDescription(DataSetName = "AugmentedDataSet",
CCPDataSetType = "ADS")
?ds.GetCohortDescription
CohortDescription <- ds.GetCohortDescription(DataSetName = "AugmentedDataSet",
Stage = "Augmented")
Test <- ds.GetCrossTab(TableName = "ADS.Patient",
FeatureNames = c("Sex", "LastVitalStatus", "CountDiagnoses"),
RemoveNA = TRUE)
Test$CrossTab$All
ds.MutateTable(TableName = "ADS.Diagnosis",
MutateExpression = "UICCStageClassification = case_when(str_starts(TNM.T, '3') ~ 'III', .default = '<NA>')",
OutputName = "TestUICC")
ds.names("TestUICC")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = 1000,
SampleName = "RDSSample")
