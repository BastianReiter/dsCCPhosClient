?newDSLiteServer
?DSLite::newDSLiteServer
library(devtools)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
use_r("ds.CurateData")
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
use_r("ds.CurateData")
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
use_r("ds.CurateData.R")
?call
abc <- call("round", 10.5)
abc
eval(abc)
is.character(abc)
?datashield.assign
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
?datashield.aggregate
library(dsCCPhosClient)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
?dsCCPhosClient::ds.CurateData
Name_RawData <- "abc"
# Construct the the server-side function call
ServerCall <- call("CurateDataDS", Name_RawData)
ServerCall
library(devtools)
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
use_r("ds.AugmentData.R")
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.AugmentData.R")
# use_r("ds.CurateData.R")
# use_r("ds.CurationReport.R")
use_r("ds.TestObjectExistence")
# Adding function script files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.AugmentData.R")
# use_r("ds.CurateData.R")
# use_r("ds.CurationReport.R")
use_r("ds.TestObjectExistence.R")
library(dsCCPhosClient)
library(dsCCPhosClient)
?datashield.assign
library(dsCCPhosClient)
library(dsCCPhosClient)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
call("blblbla")
library(devtools)
# Linked to dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.GetCurationReport.R")
# use_r("ds.GetObjectInfo.R")
use_r("ds.GetValidationReport_RawData")
# Linked to dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.GetCurationReport.R")
# use_r("ds.GetObjectInfo.R")
use_r("ds.GetValidationReport_RawData.R")
# Linked to dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.GetCurationReport.R")
# use_r("ds.GetObjectInfo.R")
# use_r("ds.GetValidationReport_RawData.R")
use_r("ds.GetValidationReport_CuratedData.R")
# Linked to dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.GetCurationReport.R")
# use_r("ds.GetObjectInfo.R")
# use_r("ds.GetValidationReport_RawData.R")
# use_r("ds.GetValidationReport_CuratedData.R")
use_r("ds.GetValidationReport_AugmentedData.R")
library(dsCCPhosClient)
library(devtools)
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
use_r("ds.ConnectToCCP.R")
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.ConnectToCCP.R")
use_r("ds.CheckSiteRequirements.R")
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dplyr")
# use_package("DSI")
use_package("tibble")
?tibble
CCPSiteCredentials <- tibble::tibble(SiteName = NULL,
URL = NULL,
Token = NULL)
?add_row
library(tibble)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = NULL,
URL = NULL,
Token = NULL)
# Add site "Sissy"
CCPSiteCredentials %>% add_row(SiteName = "Sissy",
URL = "https://dktk-datashield-test/opal/",
Token = "625732d7-36d5-44d1-9550-7e7899e594cc")
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName,
URL,
Token)
?bind_rows
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials %>% add_row(SiteName = "Sissy",
URL = "https://dktk-datashield-test/opal/",
Token = "625732d7-36d5-44d1-9550-7e7899e594cc")
# Add site "Franz"
CCPSiteCredentials %>% add_row(SiteName = "Franz",
URL = "https://dktk-test/opal/",
Token = "73a4e20f-3474-4aa0-8696-6a485bda2242")
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://dktk-datashield-test/opal/",
Token = "625732d7-36d5-44d1-9550-7e7899e594cc")
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://dktk-datashield-test/opal/",
Token = "625732d7-36d5-44d1-9550-7e7899e594cc")
# Add site "Franz"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Franz",
URL = "https://dktk-test/opal/",
Token = "73a4e20f-3474-4aa0-8696-6a485bda2242")
devtools::load_all(".")
CCPConnections <- ds.ConnectToCCP(CCPSiteCredentials)
?set_config
devtools::load_all(".")
CCPConnections <- ds.ConnectToCCP(CCPSiteCredentials)
?use_proxy
?config
devtools::load_all(".")
CCPConnections <- ds.ConnectToCCP(CCPSiteCredentials)
View(CCPSiteCredentials)
devtools::load_all(".")
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://dktk-datashield-test/opal/",
Token = "625732d7-36d5-44d1-9550-7e7899e594cc")
# Add site "Franz"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Franz",
URL = "https://dktk-test/opal/",
Token = "73a4e20f-3474-4aa0-8696-6a485bda2242")
CCPConnections <- ds.ConnectToCCP(CCPSiteCredentials)
devtools::load_all(".")
devtools::load_all(".")
?set_config_in
devtools::load_all(".")
CCPConnections <- ds.ConnectToCCP(CCPSiteCredentials)
httr_options()
devtools::load_all(".")
CCPConnections <- ds.ConnectToCCP(CCPSiteCredentials)
devtools::load_all(".")
CCPConnections <- ds.ConnectToCCP(CCPSiteCredentials)
devtools::load_all(".")
CCPConnections <- ds.ConnectToCCP(CCPSiteCredentials)
devtools::load_all(".")
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
library(dsCCPhosClient)
library(dsCCPhosClient)
#' Linked to server-side ASSIGN method CurateDataDS()
#'
#' @param Name_RawDataSet String | Name of Raw Data Set object (list) on server | Default: 'RawDataSet'
#' @param Name_Output String | Name of assigned output object on server | Default: 'CurationOutput'
#' @param DataSources List of DSConnection objects
#'
#' @return A list of variables containing messages about object assignment for monitoring purposes.
#' @export
#'
#' @examples
ds.CurateData <- function(Name_Output = "CurationOutput",
Name_RawDataSet = "RawDataSet",
RuleProfile_DiagnosisAssociation = "Default",
RuleProfile_DiagnosisRedundancy = "Default",
DataSources = NULL)
{
# Look for DS connections
if (is.null(DataSources))
{
DataSources <- DSI::datashield.connections_find()
}
# Ensure DataSources is a list of DSConnection-class
if (!(is.list(DataSources) && all(unlist(lapply(DataSources, function(d) {methods::is(d,"DSConnection")})))))
{
stop("'DataSources' were expected to be a list of DSConnection-class objects", call. = FALSE)
}
# Construct the the server-side function call
ServerCall <- call("CurateDataDS", Name_RawDataSet)
# Execute the server-side function call
DSI::datashield.assign(conns = DataSources,
symbol = Name_Output,
value = ServerCall)
# Call helper function to check if object assignment succeeded
AssignmentInfo <- ds.GetObjectInfo(ObjectName = Name_Output,
DataSources = DataSources)
return(AssignmentInfo)
}
?call
Name_RawDataSet = "RawDataSet"
# Construct the the server-side function call
ServerCall <- call("CurateDataDS", Name_RawDataSet)
ServerCall
devtools::load_all(".")
devtools::load_all(".")
rm(list=ls())
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
library(devtools)
use_r("ds.UpdateCCPhos.R")
?DSI::datashield.assign
library(dsCCPhosClient)
library(dsCCPhosClient)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
