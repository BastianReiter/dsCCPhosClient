library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
typeof(CCPConnections)
devtools::load_all(".")
library(dsCCPhosClient)
load("C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/data/CCPhosColors.rda")
View(CCPhosColors)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
character(Topic = "Test")
character("Topic" = "Test")
c(Topic = "Test")
?cli::cat_bullet
cli::list_symbols()
stringr::str_length("Test")
?rep
devtools::load_all(".")
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Test <- list()
Test <- c("A", NULL, "C")
Test
cat("Test", "\n", "Test2")
cat("Test", "Test2")
paste0(rep("-", times = 4, collapse = "")
paste0(rep("-", times = 4, collapse = ""))
cat(paste0(rep("-", times = 4, collapse = "")))
?cat
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
View(Messages_ServerRequirements)
Messages_ServerRequirements
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
?cli::cli_format()
?cli::cat_line
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
library(dsCCPhosClient)
library(dplyr)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://dktk-datashield-test/opal/",
Token = "625732d7-36d5-44d1-9550-7e7899e594cc")
# Add site "Franz"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Franz",
URL = "https://dktk-test/opal/",
Token = "73a4e20f-3474-4aa0-8696-6a485bda2242")
CCPSiteCredentials
library(devtools)
use_data(CCPSiteCredentials, overwrite = TRUE)
library(dsCCPhosClient)
CCPSiteCredentials
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
# Make html file displaying tables from curation report
dsCCPhosClient::MakeCurationReport(CurationReportData = CurationReport,
PathToReportTemplate = "./Development/Reporting/CurationReport.qmd")
# Make html file displaying tables from curation report
dsCCPhosClient::MakeCurationReport(CurationReportData = CurationReports$All,
PathToReportTemplate = "./Development/Reporting/CurationReport.qmd")
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Transformation$Staging)
# List all objects in server-sided R sessions
DSI::datashield.symbols(conns = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
?shiny.semantic::semanticPage
devtools::load_all(".")
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_DataCuration
devtools::load_all(".")
devtools::load_all(".")
# List all objects in server-sided R sessions
DSI::datashield.symbols(conns = CCPConnections)
library(devtools)
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("CheckServerRequirements.R")
# use_r("ConnectToCCP.R")
# use_r("ConnectToVirtualCCP.R")
use_r("GetServerWorkspaceInfo.R")
# List all objects in server-sided R sessions
DSI::datashield.symbols(conns = CCPConnections)
DSI::datashield.resources(conns = CCPConnections)
DSI::dsListSymbols(conn = CCPConnections)
# List all objects in server-sided R sessions
DSI::datashield.symbols(conns = CCPConnections)
Test <- DSI::datashield.symbols(conns = CCPConnections)
Test2 <- unlist(Test)
Test2
unique(Test2)
# For testing purposes
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
# Get server names
ServerNames <- names(DataSources)
# Get names of symbols in all server workspaces
ServerSymbolNames <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring symbol names across servers (usually all symbol names should be the same on all servers)
OccurringSymbolNames <- unique(unlist(ServerSymbolNames))
?sort
DF <- as_tibble(Object = OccurringSymbolNames)
?as_tibble
DF <- tibble(Object = OccurringSymbolNames)
View(DF)
dsBaseClient::ds.class("CuratedDataSet", datasources = CCPConnections)
dsBaseClient::ds.class("RDS_BioSampling", datasources = CCPConnections)
dsBaseClient::ds.class(c("RDS_BioSampling", "RDS_Diagnosis"), datasources = CCPConnections)
dsBaseClient::ds.class(c("RDS_BioSampling", "RDS_Diagnoss"), datasources = CCPConnections)
?modify
dsBaseClient::ds.class("RDS_BioSampling", datasources = CCPConnections)
dsBaseClient::ds.class("RDS_BioSampling", datasources = CCPConnections)[1]
dsBaseClient::ds.class("RDS_BioSampling", datasources = CCPConnections)[[1]]
Output <- tibble(Object = OccurringSymbolNames) %>%
modify(Object,
function(object) { dsBaseClient::ds.class(x = object,
datasources = DataSources)[[1]] })
Output <- tibble(Object = OccurringSymbolNames)
Test <- purrr::modify(Output$Object,
function(object) { dsBaseClient::ds.class(x = object,
datasources = DataSources)[[1]] })
?bind_cols()
Output <- bind_cols(Output,
Type = purrr::modify(Output$Object,
function(object) { dsBaseClient::ds.class(x = object,
datasources = DataSources)[[1]] }))
View(Output)
# Get all uniquely occurring symbol names across servers (usually all symbol names should be the same on all servers)
OccurringSymbolNames <- sort(unique(unlist(ServerSymbolNames)))
Output <- bind_cols(Object = OccurringSymbolNames,
Type = purrr::modify(OccurringSymbolNames,
function(object) { dsBaseClient::ds.class(x = object,
datasources = DataSources)[[1]] }))
View(Output)
# Get names of symbols (objects) in all server workspaces
ServerSymbols <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
OccurringSymbolNames <- sort(unique(unlist(ServerSymbols)))
# Create tibble with object names and types
Output <- bind_cols(Object = OccurringSymbolNames,
Type = purrr::modify(OccurringSymbolNames,
function(object) { dsBaseClient::ds.class(x = object,
datasources = DataSources)[[1]] }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
Output$Object %in% ServerSymbols$SiteA
?setNames
ServerSymbols[["SiteA"]]
for (i in 1:length(ServerNames))
{
ServerColumn <- setNames(object = Output$Object %in% ServerSymbols[[ServerNames[i]]],
nm = ServerNames[i])
Output <- bind_cols(Output,
ServerColumn)
}
View(Output)
?assign
for (i in 1:length(ServerNames))
{
ServerColumn <- setNames(object = Output$Object %in% ServerSymbols[[ServerNames[i]]],
nm = ServerNames[i])
Output <- bind_cols(Output,
ServerNames[i] = ServerColumn)
?mutate
ServerColumns <- tibble()
for (i in 1:length(ServerNames))
{
Column <- Output$Object %in% ServerSymbols[[ServerNames[i]]]
ServerColumns <- bind_cols(ServerColumns,
Column)
}
ServerColumns <- NULL
for (i in 1:length(ServerNames))
{
Column <- Output$Object %in% ServerSymbols[[ServerNames[i]]]
ServerColumns <- bind_cols(ServerColumns,
Column)
}
colnames(ServerColumns) <- ServerNames
View(ServerColumns)
Output <- bind_cols(Output,
ServerColumns)
View(Output)
ds.GetObjectInfo("RDS_Diagnosis", CCPConnections)
devtools::load_all(".")
rm(list=ls())
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
Test <- GetServerWorkspaceInfo(DataSources = CCPConnections)
?bind_cols
devtools::load_all(".")
Test <- GetServerWorkspaceInfo(DataSources = CCPConnections)
View(Test)
library(dsCCPhosClient)
GetServerWorkspaceInfo(DataSources = CCPConnections)
devtools::load_all(".")
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
GetServerWorkspaceInfo(DataSources = CCPConnections)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
datashield.errors()
GetServerWorkspaceInfo(DataSources = CCPConnections)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
library(dsCCPhosClient)
GetServerWorkspaceInfo(DataSources = CCPConnections)
datashield.symbols(conns = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get names of symbols (objects) in all server workspaces
ServerObjectNames <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
UniqueObjectNames
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- bind_cols(Object = UniqueObjectNames,
Type = purrr::modify(UniqueObjectNames,
function(symbol) { dsBaseClient::ds.class(x = symbol,
datasources = DataSources)[[1]] }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
dsBaseClient::ds.class(x = "CuratedDataSet", datasources = DataSources)
dsBaseClient::ds.class(x = "CDS_BioSampling", datasources = DataSources)
DataSources[1]
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- bind_cols(Object = UniqueObjectNames,
Type = purrr::modify(UniqueObjectNames,
function(symbol) { dsBaseClient::ds.class(x = symbol,
datasources = DataSources[1]) }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- bind_cols(Object = UniqueObjectNames,
Type = purrr::modify(UniqueObjectNames,
function(symbol) { as.character(dsBaseClient::ds.class(x = symbol,
datasources = DataSources[1])) }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
Output
dsBaseClient::ds.class(x = "CDS_Diagnosis", datasources = DataSources)
devtools::load_all(".")
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages_UnpackingCDS <- dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CurationOutput",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# For testing purposes
CuratedDataSetName <- "CuratedDataSet"
OutputName <- "AugemntationOutput"
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
#Messages$Completion <- character()
Messages$Assignment <- list()
# Construct the server-side function call
ServerCall <- call("AugmentDataDS",
CuratedDataSetName.S = CuratedDataSetName)
# Execute the server-side function call
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
# Call helper function to check if assignment of AugmentationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = OutputName,
DataSources = DataSources))
AugmentationOutputObjects <- c("AugmentedDataSet",
"AugmentationReport",
"AugmentationMessages")
i <- 1
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# For testing purposes
CuratedDataSetName <- "CuratedDataSet"
OutputName <- "AugmentationOutput"
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
#Messages$Completion <- character()
Messages$Assignment <- list()
# Construct the server-side function call
ServerCall <- call("AugmentDataDS",
CuratedDataSetName.S = CuratedDataSetName)
# Execute the server-side function call
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
# Call helper function to check if assignment of AugmentationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = OutputName,
DataSources = DataSources))
AugmentationOutputObjects <- c("AugmentedDataSet",
"AugmentationReport",
"AugmentationMessages")
i <- 1
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
ServerCall
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
i <- 2
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
i <- 3
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
library(dsCCPhos)
i <- 2
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
