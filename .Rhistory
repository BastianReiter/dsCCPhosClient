group_by(Server) %>%
mutate(JointRelFreq = JointCount / sum(JointCount, na.rm = TRUE), .after = JointCount) %>%
ungroup()
# Then calculate Marginal Relative Frequencies
for (featurename in FeatureNames)
{
MargCountColumn <- sym(paste0("MargCount.", featurename))
MargRelFreqColumn <- sym(paste0("MargRelFreq.", featurename))
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(!!MargRelFreqColumn := !!MargCountColumn / sum(!!MargCountColumn, na.rm = TRUE),
.after = !!MargCountColumn) %>%
ungroup()
}
ChiSquaredTest <- NULL
if (length(FeatureNames) == 2)
{
# Get server-specific ChiSq.PValues from ServerReturns
ChiSquaredTest <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("ChiSq.PValue")
# Select relevant columns from CrossTab.Cumulated as preparation for conversion into object of class 'table'
PrepareTable <- CrossTab.Cumulated %>%
select(c(all_of(FeatureNames), "JointCount")) %>%
filter(if_all(all_of(FeatureNames), ~ !is.na(.)))
# Get object of class 'table' (chisq.test() needs a 'table' as argument)
TableObject <- xtabs(formula = reformulate(termlabels = FeatureNames,
response = "JointCount"),
data = PrepareTable)
# Perform Chi-Squared-Test
ChiSq.Cumulated <- chisq.test(x = TableObject)
# Bind cumulated Chi Squared test result with list of server-specific p-values
ChiSquaredTest <- c(list(All = ChiSq.Cumulated,
ChiSquaredTest))
}
rm(list=ls())
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "CountDiagnoses"))
View(Test$CrossTab)
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"))
View(Test$CrossTab)
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"),
RemoveNA = TRUE)
Test$CrossTab
View(Test$CrossTab)
devtools::load_all(".")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"),
RemoveNA = TRUE)
devtools::load_all(".")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"),
RemoveNA = TRUE)
View(Test$CrossTab$All)
devtools::load_all(".")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus", "CountDiagnoses"),
RemoveNA = TRUE)
View(Test$ChiSquaredTest)
View(Test$CrossTab$All)
ds.names("ADS_Diagnosis")
ds.MutateTable(TableName = "ADS_Diagnosis",
MutateExpression = "UICCStageClassification = case_when(str_starts(TNM_T, '3') ~ 'III', .default = '<NA>')")
ds.MutateTable(TableName = "ADS_Diagnosis",
MutateExpression = "UICCStageClassification = case_when(str_starts(TNM_T, '3') ~ 'III', .default = '<NA>')",
OutputName = "TestUICC")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
ds.MutateTable(TableName = "ADS_Diagnosis",
MutateExpression = "UICCStageClassification = case_when(str_starts(TNM_T, '3') ~ 'III', .default = '<NA>')",
OutputName = "TestUICC")
ds.names("TestUICC")
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
CohortDescription <- ds.GetCohortDescription(DataSetName = "AugmentedDataSet",
CCPDataSetType = "ADS")
CohortDescription <- ds.GetCohortDescription(DataSetName = "AugmentedDataSet",
CCPDataSetType = "ADS")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"),
RemoveNA = TRUE)
View(Test$CrossTab$All)
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus", "CountDiagnoses"),
RemoveNA = TRUE)
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus", "CountDiagnoses"),
RemoveNA = TRUE)
Test$CrossTab$All
View(Test$CrossTab$All)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
ServerWorkspaceInfo$Overview$All
library(resourcer)
?as.resource.data.frame
?readr::read_csv
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
# Then we can actually load the data of the resource into the server R session by calling 'as.resource.data.frame' on it
datashield.assign.expr(conns = CCPConnections,
symbol = "TestDataFrame",
expr = quote(as.resource.data.frame(TestResourceClient,
strict = 'TRUE',
col_types = cols(.default = "c"))))
# Then we can actually load the data of the resource into the server R session by calling 'as.resource.data.frame' on it
datashield.assign.expr(conns = CCPConnections,
symbol = "TestDataFrame",
expr = quote(as.resource.data.frame(TestResourceClient,
strict = 'TRUE')))
# Then we can actually load the data of the resource into the server R session by calling 'as.resource.data.frame' on it
datashield.assign.expr(conns = CCPConnections,
symbol = "TestDataFrame",
expr = quote(as.resource.data.frame(TestResourceClient,
strict = 'TRUE',
col_types = cols(.default = 'c'))))
# Then we can actually load the data of the resource into the server R session by calling 'as.resource.data.frame' on it
datashield.assign.expr(conns = CCPConnections,
symbol = "TestDataFrame",
expr = quote(as.resource.data.frame(TestResourceClient,
strict = 'TRUE')))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
?setNames
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
CheckServerRequirements()
dsCCPhosClient::CheckServerRequirements()
devtools::load_all(".")
dsCCPhosClient::CheckServerRequirements()
devtools::load_all(".")
dsCCPhosClient::CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
ds.names("RawDataSet")
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Module = "CCP",
TransformationStage = "Raw")
RDSTableCheck$TableStatus
RDSTableCheck$EligibleValueCounts$Staging
RDSTableCheck$EligibleValueRates$Staging
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
CDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CuratedDataSet",
Modul = "CCP",
TransformationStage = "Curated")
# Get curation reports
CurationReport <- ds.GetCurationReport()
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Module = "CCP",
TransformationStage = "Raw")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Module = "CCP",
TransformationStage = "Raw")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
dsCCPhosClient::Meta.Tables
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Module = "CCP",
TransformationStage = "Raw")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
#--- For Testing Purposes ---
RawDataSetName <- "RawDataSet"
OutputName <- "CurationOutput"
RunAssignmentChecks <- TRUE
UnpackCuratedDataSet <- TRUE
DSConnections <- CCPConnections
# Initiate output messaging objects
Messages <- list()
if (RunAssignmentChecks == TRUE) { Messages$Assignment <- list() }
Messages$CurationCompletion <- list()
# Execute the server-side function call
DSI::datashield.assign(conns = DSConnections,
symbol = OutputName,
value = call("CurateDataDS",
RawDataSetName.S = RawDataSetName,
Settings.S = Settings))
Settings <- NULL
# Execute the server-side function call
DSI::datashield.assign(conns = DSConnections,
symbol = OutputName,
value = call("CurateDataDS",
RawDataSetName.S = RawDataSetName,
Settings.S = Settings))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if assignment of CurationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = OutputName,
DSConnections = DSConnections))
}
CurationOutputObjects <- c("CuratedDataSet",
"CurationReport",
"CurationMessages")
i <- 1
# Execute server-side list extraction
DSI::datashield.assign(conns = DSConnections,
symbol = CurationOutputObjects[i],
value = call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = CurationOutputObjects[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = CurationOutputObjects[i],
DSConnections = DSConnections))
}
i <- 2
# Execute server-side list extraction
DSI::datashield.assign(conns = DSConnections,
symbol = CurationOutputObjects[i],
value = call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = CurationOutputObjects[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = CurationOutputObjects[i],
DSConnections = DSConnections))
}
i <- 3
# Execute server-side list extraction
DSI::datashield.assign(conns = DSConnections,
symbol = CurationOutputObjects[i],
value = call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = CurationOutputObjects[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = CurationOutputObjects[i],
DSConnections = DSConnections))
}
# Get curated table names
CCPTableNames.CDS <- dsCCPhosClient::Meta.Tables$TableName.Curated
for(i in 1:length(CCPTableNames.CDS))
{
# Execute server-side assign function
DSI::datashield.assign(conns = DSConnections,
symbol = paste0("CDS.", CCPTableNames.CDS[i]),      # E.g. 'CDS.Metastasis'
value = call("ExtractFromListDS",
ListName.S = "CuratedDataSet",
ObjectName.S = CCPTableNames.CDS[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = paste0("CDS.", CCPTableNames.CDS[i]),
DSConnections = DSConnections))
}
}
if (RunAssignmentChecks == TRUE)
{
# Turn list into (named) vector
Messages$Assignment <- purrr::list_c(Messages$Assignment)
# Add topic element to start of vector
Messages$Assignment <- c(Topic = "Object assignment on servers",
Messages$Assignment)
}
