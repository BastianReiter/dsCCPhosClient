"\\.",
"TableName" = ".*"),
too_few = "align_start") %>%
filter(across(everything(), ~ is.na(.x))
separate_wider_delim(cols = Object,
EligibleValues <- Overview.All %>%
filter(Class == "data.frame") %>%
select(Object) %>%
separate_wider_regex(cols = Object,
patterns = c("Module" = paste0("(?:", paste(names(dsFredaClient::Meta.Modules), collapse = "|"), ")"),
"\\.",
"DSType" = paste0("(?:", paste(c("RDS", "CDS", "ADS"), collapse = "|"), ")"),
"\\.",
"TableName" = ".*"),
too_few = "align_start") %>%
filter(across(everything(), ~ is.na(.x)))
?if_all
EligibleValues <- Overview.All %>%
filter(Class == "data.frame") %>%
select(Object) %>%
separate_wider_regex(cols = Object,
patterns = c("Module" = paste0("(?:", paste(names(dsFredaClient::Meta.Modules), collapse = "|"), ")"),
"\\.",
"DSType" = paste0("(?:", paste(c("RDS", "CDS", "ADS"), collapse = "|"), ")"),
"\\.",
"TableName" = ".*"),
too_few = "align_start") %>%
filter(if_all(everything(), ~ !is.na(.x)))
EligibleValues.RDS.CDS <- EligibleValues %>%
filter(Stage %in% c("Raw", "Curated")) %>%
left_join(dsCCPhosClient::Meta.Values, by = join_by(TableName == Table), relationship = "many-to-many") %>%
mutate(Feature = case_when(DSType == "RDS" ~ FeatureName.Raw,
DSType == "CDS" ~ FeatureName.Curated,
.default = NA),
Value = case_when(DSType == "RDS" ~ Value.Raw,
DSType == "CDS" ~ Value.Curated,
.default = NA),
Label = case_when(DSType == "RDS" ~ Label.Raw,
DSType == "CDS" ~ Label.Curated,
.default = NA)) %>%
filter(!is.na(Feature) & !is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
EligibleValues.RDS.CDS <- EligibleValues %>%
filter(DSType %in% c("RDS", "CDS")) %>%
left_join(dsCCPhosClient::Meta.Values, by = join_by(TableName == Table), relationship = "many-to-many") %>%
mutate(Feature = case_when(DSType == "RDS" ~ FeatureName.Raw,
DSType == "CDS" ~ FeatureName.Curated,
.default = NA),
Value = case_when(DSType == "RDS" ~ Value.Raw,
DSType == "CDS" ~ Value.Curated,
.default = NA),
Label = case_when(DSType == "RDS" ~ Label.Raw,
DSType == "CDS" ~ Label.Curated,
.default = NA)) %>%
filter(!is.na(Feature) & !is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
?separate_wider_regex
EligibleValues <- Overview.All %>%
filter(Class == "data.frame") %>%
select(Object) %>%
separate_wider_regex(cols = Object,
patterns = c("Module" = paste0("(?:", paste(names(dsFredaClient::Meta.Modules), collapse = "|"), ")"),
"\\.",
"DSType" = paste0("(?:", paste(c("RDS", "CDS", "ADS"), collapse = "|"), ")"),
"\\.",
"TableName" = ".*"),
too_few = "align_start",
cols_remove = FALSE) %>%
filter(if_all(everything(), ~ !is.na(.x)))
EligibleValues.RDS.CDS <- EligibleValues %>%
filter(DSType %in% c("RDS", "CDS")) %>%
left_join(dsCCPhosClient::Meta.Values, by = join_by(TableName == Table), relationship = "many-to-many") %>%
mutate(Feature = case_when(DSType == "RDS" ~ FeatureName.Raw,
DSType == "CDS" ~ FeatureName.Curated,
.default = NA),
Value = case_when(DSType == "RDS" ~ Value.Raw,
DSType == "CDS" ~ Value.Curated,
.default = NA),
Label = case_when(DSType == "RDS" ~ Label.Raw,
DSType == "CDS" ~ Label.Curated,
.default = NA)) %>%
filter(!is.na(Feature) & !is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
View(EligibleValues.RDS.CDS)
EligibleValues.ADS <- EligibleValues %>%
filter(DSType == "ADS") %>%
left_join(dsCCPhosClient::Meta.ADS, by = join_by(TableWithoutPrefix == TableName), relationship = "many-to-many") %>%
rename("Feature" = "FeatureName") %>%
filter(!is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
EligibleValues.ADS <- EligibleValues %>%
filter(DSType == "ADS") %>%
left_join(dsCCPhosClient::Meta.ADS, by = join_by(TableName == TableName), relationship = "many-to-many") %>%
rename("Feature" = "FeatureName") %>%
filter(!is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
View(EligibleValues.ADS)
EligibleValues <- EligibleValues.RDS.CDS %>%
bind_rows(EligibleValues.ADS) %>%
base::split(., .$Object) %>%
map(\(PerObject) base::split(PerObject, PerObject$Feature))
devtools::load_all(".")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
rm(DSConnections)
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
ServerWorkspaceInfo$EligibleValues
# --- For Testing Purposes ---
DSConnections <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DSConnections))
ServerObjectNames <- DSI::datashield.symbols(conns = DSConnections)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# If the server workspaces are completely empty, stop function and return NULL
if (length(UniqueObjectNames) == 0) { return(NULL) }
# Initiate objects
Overview <- list()
ObjectDetails <- list()
for (servername in ServerNames)
{
ServerOverview <- tibble(Object = UniqueObjectNames) %>%
mutate(Exists = Object %in% ServerObjectNames[[servername]])
# Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#-------------------------------------------------------------------------
ExistingObjects <- ServerOverview %>%
filter(Exists == TRUE)
# Get meta data
MetaData <- ExistingObjects %>%
pull(Object) %>%
map(function(objectname)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = objectname,
DSConnections = DSConnections[servername])
return(ObjectMetaData[[servername]])
}) %>%
stats::setNames(ExistingObjects$Object)
# Add some meta data to 'ServerOverview'
ServerOverview <- ServerOverview %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = as.character(ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA)),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = servername, .before = 1)
# Extract structural details from object meta data
ServerObjectDetails <- MetaData %>%
map(\(ObjectMetaData) ObjectMetaData$Structure)
# Add server-specific overview table and object details to overall lists
Overview[[servername]] <- ServerOverview
ObjectDetails[[servername]] <- ServerObjectDetails
}
#-------------------------------------------------------------------------------
# Summarize server-specific overviews in 'Overview.All'
#-------------------------------------------------------------------------------
Overview.All <- Overview %>%
list_rbind() %>%
group_by(Object) %>%
summarize(ServerName = "All",
Exists.Info = case_when(n_distinct(Exists) == 1 ~ "Uniform",
.default = "Varied"),
Exists = case_when(all(Exists == TRUE) ~ TRUE,
.default = NA),
Class.Info = case_when(n_distinct(Class) == 1 ~ "Uniform",
.default = "Varied"),
Class = case_when(n_distinct(Class) == 1 ~ first(Class),
.default = "Varied"),
Length.Info = case_when(n_distinct(Length) == 1 ~ "Uniform",
.default = paste0("Varied (", min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE), ")")),
Length = case_when(n_distinct(Length) == 1 ~ first(Length),
n_distinct(Length) > 1 ~ paste0(min(Length, na.rm = TRUE), " - ", max(Length, na.rm = TRUE)),
.default = NA),
RowCount = sum(RowCount, na.rm = TRUE)) %>%
ungroup() %>%
relocate(ServerName, .before = Object)
# Row-bind cumulative and server-specific overview data.frames
Overview <- c(list(All = Overview.All),
Overview)
# For easier handling
ObjectDetails <- ObjectDetails %>%
list_transpose(simplify = FALSE)
# For all objects that are not of class 'data.frame', summarize server-specific object details
NonTableDetails <- Overview.All %>%
filter(!(Class == "data.frame")) %>%
pull(Object, name = Object) %>%
map(function(objectname)
{
# Row-bind all server-specific tables containing object structure details
ObjectDetails.All <- ObjectDetails[[objectname]] %>%     # This is a list with server-specific structural details for the current object
list_rbind()
#{ if (!is.data.frame(.) & !is.vector(.)) { list_rbind(.) } }
if (!length(ObjectDetails.All) == 0)
{
# Create a summarizing structure table
ObjectDetails.All <- ObjectDetails.All %>%
group_by(Element) %>%
summarize(ExistsEverywhere = case_when(n() == length(ServerNames) ~ TRUE,
.default = FALSE),
Type = case_when(length(unique(Type)) == 1 ~ unique(Type),
.default = "Varied")) %>%
ungroup()
} else { ObjectDetails.All <- NULL }
return(c(list(All = ObjectDetails.All),
ObjectDetails[[objectname]]))
})
# For all objects of class 'data.frame' use 'ds.GetTableCheck' to get more meta data
TableDetails <- Overview.All %>%
filter(Class == "data.frame") %>%
pull(Object, name = Object) %>%
map(function(objectname)
{
ds.GetTableCheck(TableName = objectname,
DSConnections = DSConnections) %>%
pluck("FeatureCheckOverview")
})
# Re-consolidate in 'ObjectDetails'
ObjectDetails <- c(NonTableDetails, TableDetails) %>%
list_transpose()
# Use separate_wider_regex() to identify module and transformation stage (DataSet type) for every object that has a name of the form 'Module.Stage.TableName'
EligibleValues <- Overview.All %>%
filter(Class == "data.frame") %>%
select(Object) %>%
separate_wider_regex(cols = Object,
patterns = c("Module" = paste0("(?:", paste(names(dsFredaClient::Meta.Modules), collapse = "|"), ")"),
"\\.",
"DSType" = paste0("(?:", paste(c("RDS", "CDS", "ADS"), collapse = "|"), ")"),
"\\.",
"TableName" = ".*"),
too_few = "align_start",
cols_remove = FALSE) %>%
filter(if_all(everything(), ~ !is.na(.x)))
EligibleValues.RDS.CDS <- EligibleValues %>%
filter(DSType %in% c("RDS", "CDS")) %>%
left_join(dsCCPhosClient::Meta.Values, by = join_by(TableName == Table), relationship = "many-to-many") %>%
mutate(Feature = case_when(DSType == "RDS" ~ FeatureName.Raw,
DSType == "CDS" ~ FeatureName.Curated,
.default = NA),
Value = case_when(DSType == "RDS" ~ Value.Raw,
DSType == "CDS" ~ Value.Curated,
.default = NA),
Label = case_when(DSType == "RDS" ~ Label.Raw,
DSType == "CDS" ~ Label.Curated,
.default = NA)) %>%
filter(!is.na(Feature) & !is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
EligibleValues.ADS <- EligibleValues %>%
filter(DSType == "ADS") %>%
left_join(dsCCPhosClient::Meta.ADS, by = join_by(TableName == TableName), relationship = "many-to-many") %>%
rename("Feature" = "FeatureName") %>%
filter(!is.na(Value)) %>%
select(Object,
Feature,
Value,
Label)
EligibleValues <- EligibleValues.RDS.CDS %>%
bind_rows(EligibleValues.ADS) %>%
base::split(., .$Object) %>%
map(\(PerObject) base::split(PerObject, PerObject$Feature))
EligibleValues$CCP.ADS.Diagnosis$DiagnosisConfirmation
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.RawDataSet",
Stage = "Raw")
RDSTableCheck$TableRowCounts$Diagnosis
RDSTableCheck$FeatureExistence$Diagnosis#
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CCP.CuratedDataSet",
OutputName = "CCP.AugmentationOutput")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.AugmentedDataSet")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.AugmentedDataSet",
Stage = "Augmented")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
ServerWorkspaceInfo$EligibleValues$CCP.RDS.Diagnosis
ServerWorkspaceInfo$EligibleValues$CCP.RDS.Histology
Test <- DSLite::getDSLiteData(conns = CCPConnections, "CCP.RawDataSet")
View(Test$ServerA$Diagnosis)
View(Test$ServerA$DiseaseStatus)
View(Test$ServerA$Histology)
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.RawDataSet",
Stage = "Raw")
View(RDSTableCheck$EligibleValueCounts$Diagnosis)
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
ServerWorkspaceInfo$EligibleValues$CCP.RDS.Diagnosis
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.RawDataSet",
Module = "CCP",
Stage = "Raw")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CCP.CuratedDataSet",
OutputName = "CCP.AugmentationOutput")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.AugmentedDataSet",
Module = "CCP",
Stage = "Augmented")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
Test <- dsFredaClient::GetExplorationData()
Test <- dsFredaClient::GetExplorationData(TableSelection <- c("CCP.ADS.Diagnosis",
"CCP.ADS.DiseaseCourse",
"CCP.ADS.Events",
"CCP.ADS.Patient",
"CCP.ADS.Therapy"))
Test <- dsFredaClient::GetExplorationData(InputWorkspaceInfo = ServerWorkspaceInfo)
Test$CCP.ADS.Patient$LastVitalStatus$FeatureInfo
TestA <- ExploreFeature(TableName = "CCP.ADS.Patient",
FeatureName = "Sex")
TestA$FeatureInfo
Meta.ADS <- dsCCPhos::Meta.ADS
# Add feature to 'Meta.ADS' indicating if a feature should be part of an "order list" that can be passed to dsFredaClient::GetExplorationData()
Meta.ADS <- Meta.ADS %>%
mutate(ExploreRoutinely = case_when(TableName == "Events" & FeatureName %in% c("EventClass",
"EventSubclass") ~ TRUE,
TableName == "Diagnosis" & FeatureName %in% c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp") ~ TRUE,
TableName == "Patient" & FeatureName %in% c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses") ~ TRUE,
.default = FALSE))
library(dplyr)
library(usethis)
Meta.ADS <- dsCCPhos::Meta.ADS
# Add feature to 'Meta.ADS' indicating if a feature should be part of an "order list" that can be passed to dsFredaClient::GetExplorationData()
Meta.ADS <- Meta.ADS %>%
mutate(ExploreRoutinely = case_when(TableName == "Events" & FeatureName %in% c("EventClass",
"EventSubclass") ~ TRUE,
TableName == "Diagnosis" & FeatureName %in% c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp") ~ TRUE,
TableName == "Patient" & FeatureName %in% c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses") ~ TRUE,
.default = FALSE))
use_data(Meta.ADS, overwrite = TRUE)
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CCP.CuratedDataSet",
OutputName = "CCP.AugmentationOutput")
Test <- dsFredaClient::GetExplorationData(InputWorkspaceInfo = ServerWorkspaceInfo,
OrderList = list(Diagnosis = c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp"),
Patient = c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses")))
Test <- dsFredaClient::GetExplorationData(#InputWorkspaceInfo = ServerWorkspaceInfo,
OrderList = list(Diagnosis = c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp"),
Patient = c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses")))
Test <- dsFredaClient::GetExplorationData(#InputWorkspaceInfo = ServerWorkspaceInfo,
OrderList = list(CCP.ADS.Diagnosis = c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp"),
CCP.ADS.Patient = c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses")))
?CCPhosApp::Widget.ServerExplorer
