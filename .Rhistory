devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
# --- For Testing Purposes ---
# OrderList <- list(ADS.Diagnosis = c("Grading",
#                                     "PatientAgeAtDiagnosis",
#                                     "TNM.T"))
OrderList <- NULL
InputWorkspaceInfo <- ServerWorkspaceInfo
DSConnections <- CCPConnections
SuitableTables <- InputWorkspaceInfo$Overview$All %>%
filter(Exists == TRUE,
Exists.Info == "Uniform",
Class == "data.frame",
Class.Info == "Uniform") %>%
pull(Object)
OrderList <- InputWorkspaceInfo$ObjectDetails$All[SuitableTables] %>%
imap(function(TableInfo, tablename)
{
TableInfo %>%
filter(Type %in% c("character", "integer", "numeric", "double", "Date")) %>%
pull(Feature)
})
Exploration <- OrderList %>%
imap(function(FeatureNames, tablename)
{
FeatureNames %>%
map(\(featurename) dsFredaClient::ExploreFeature(TableName = tablename,
FeatureName = featurename,
DSConnections = DSConnections)) %>%
set_names(FeatureNames)
})
Test <- InputWorkspaceInfo$Overview$All
Test["ObjectName"]
Test["Object"]
Test[["Object"]]
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
# --- For Testing Purposes ---
# OrderList <- list(ADS.Diagnosis = c("Grading",
#                                     "PatientAgeAtDiagnosis",
#                                     "TNM.T"))
OrderList <- NULL
InputWorkspaceInfo <- ServerWorkspaceInfo
DSConnections <- CCPConnections
SuitableTables <- InputWorkspaceInfo$Overview$All %>%
filter(Exists == TRUE,
Exists.Info == "Uniform",
Class == "data.frame",
Class.Info == "Uniform") %>%
pull(Object)
OrderList <- InputWorkspaceInfo$ObjectDetails$All[SuitableTables] %>%
imap(function(TableInfo, tablename)
{
TableInfo %>%
filter(Type %in% c("character", "logical", "integer", "numeric", "double")) %>%
pull(Feature)
})
Exploration <- OrderList %>%
imap(function(FeatureNames, tablename)
{
FeatureNames %>%
map(\(featurename) dsFredaClient::ExploreFeature(TableName = tablename,
FeatureName = featurename,
DSConnections = DSConnections)) %>%
set_names(FeatureNames)
})
Test <- TestData$diagnosis
TableName <- RDS.Diagnosis
TableName <- "RDS.Diagnosis"
MetricFeatureName <- "icd-o_katalog_topographie_version"
# Making use of dsBaseClient::ds.meadSdGp() to obtain CUMULATED parametric statistics
CumulatedStatistics_Parametric <- dsBaseClient::ds.meanSdGp(x = paste0(TableName, "[['", MetricFeatureName, "']]"),
y = "1",
datasources = DSConnections)
# Making use of dsBaseClient::ds.meadSdGp() to obtain CUMULATED parametric statistics
CumulatedStatistics_Parametric <- dsBaseClient::ds.meanSdGp(x = paste0(TableName, "$`", MetricFeatureName, "`"),
y = "1",
datasources = DSConnections)
?dsBaseClient::ds.meanSdGp
Test <- Meta.ADS
View(Test)
Test <- Meta.Features
Test <- Meta.Features %>%
select(TableName.Curated,
FeatureName.Raw,
FeatureName.Curated)
?deframe
Test <- Meta.Features %>%
select(TableName.Curated,
FeatureName.Raw,
FeatureName.Curated) %>%
group_by(TableName.Curated) %>%
summarize(Features = list(set_names(FeatureName.Curated, FeatureName.Raw))) %>%
tibble::deframe()
Test$BioSampling
Test <- Meta.Features %>%
select(TableName.Curated,
FeatureName.Raw,
FeatureName.Curated) %>%
group_by(TableName.Curated) %>%
summarize(Features = list(set_names(FeatureName.Curated, FeatureName.Raw)))
View(Test)
Test <- Meta.Features %>%
select(TableName.Curated,
FeatureName.Raw,
FeatureName.Curated) %>%
group_by(TableName.Curated) %>%
deframe()
Test <- Meta.Features %>%
select(TableName.Curated,
FeatureName.Raw,
FeatureName.Curated) %>%
group_by(TableName.Curated) %>%
tibble::deframe()
Test <- Meta.Features %>%
select(TableName.Curated,
FeatureName.Raw,
FeatureName.Curated) %>%
group_by(TableName.Curated) %>%
summarize(Features = list(set_names(FeatureName.Curated, FeatureName.Raw))) %>%
tibble::deframe()
FeatureNameDictionary <- Meta.Features %>%
select(TableName.Curated,
FeatureName.Raw,
FeatureName.Curated) %>%
group_by(TableName.Curated) %>%
summarize(Features = list(set_names(FeatureName.Curated, FeatureName.Raw))) %>%
tibble::deframe()
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
rm(DSConnections)
LoadRawDataSet(ServerSpecifications = NULL)
ServerSpecifications <- NULL
OpalTableNames.Mapping <- setNames(dsCCPhosClient::Meta.Tables$TableName.Curated,
nm = dsCCPhosClient::Meta.Tables$TableName.Raw)
OpalTableNames.Dictionary <- list(All = setNames(dsCCPhosClient::Meta.Tables$TableName.Raw, nm = dsCCPhosClient::Meta.Tables$TableName.Curated))
RunAssignmentChecks <- TRUE
DSConnections <- CCPConnections
# Initiate output messaging objects
Messages <- list()
if (RunAssignmentChecks == TRUE) { Messages$Assignment <- c(Topic = "Object assignment on servers") }
# Get server names
ServerNames <- names(DSConnections)
# If argument 'OpalTableNames.Mapping' is an unnamed vector, set vector values as names
if (is.null(names(OpalTableNames.Mapping))) { names(OpalTableNames.Mapping) <- OpalTableNames.Mapping }
# Check Opal table availability
OpalDBInfo <- dsFredaClient::GetServerOpalDBInfo(ServerSpecifications = ServerSpecifications,
OpalTableNames.Required = names(OpalTableNames.Mapping),
OpalTableNames.Dictionary = OpalTableNames.Dictionary,
DSConnections = DSConnections)
# Loop through all participating servers
for (i in 1:length(ServerNames))
{
# Create data.frame containing mapping from Opal DB table names to R object names
OpalDBToR <- OpalDBInfo$OpalTables.Required %>%
filter(Server == ServerNames[i],
IsAvailable == TRUE,
IsRequired == TRUE) %>%
mutate(RTableName = case_when(OpalTableName.Generic %in% names(OpalTableNames.Mapping) ~ paste0("RDS.", OpalTableNames.Mapping[OpalTableName.Generic]),
.default = paste0("RDS.", OpalTableName.Generic)))
# Loop through available Opal DB tables and assign their content to objects (data.frames) in R session
for (j in 1:nrow(OpalDBToR))
{
DSI::datashield.assign.table(conns = DSConnections[[i]],
symbol = OpalDBToR$RTableName[j],
table = OpalDBToR$OpalTableName[j],
id.name = "_id")
# Add message about Opal data base to R session mapping
Messages$Assignment <- c(Messages$Assignment,
Info = paste0("Server '", names(DSConnections)[i], "': Mapped Opal table '", OpalDBToR$OpalTableName[j], "' to data.frame '", OpalDBToR$RTableName[j], "'."))
}
}
if (RunAssignmentChecks == TRUE)
{
BundledMessages <- list()
# Loop through all tables to get info about assignment on servers
for(tablename in OpalTableNames.Mapping)
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- dsFredaClient::ds.GetObjectStatus(ObjectName = paste0("RDS.", tablename),
DSConnections = DSConnections)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table["ObjectValidity"])   # Must select list element 'ObjectValidity' this way to keep naming of vector and thus class 'Success', 'Warning' and so forth
}
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
list_c(BundledMessages))
}
# Create dictionary (list of named character vectors)
FeatureNameDictionary <- dsCCPhosClient::Meta.Features %>%
select(TableName.Curated,
FeatureName.Raw,
FeatureName.Curated) %>%
group_by(TableName.Curated) %>%
summarize(Features = list(set_names(FeatureName.Curated, FeatureName.Raw))) %>%
tibble::deframe()
# Trigger server-side RDS preparation function
ds.PrepareRawData(RawDataSetName = "RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
FeatureNameDictionary = FeatureNameDictionary,
CompleteCharacterConversion = TRUE)
# Trigger server-side RDS preparation function
ds.PrepareRawData(RawDataSetName = "RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
FeatureNameDictionary = FeatureNameDictionary,
CompleteCharacterConversion = TRUE,
DSConnections = DSConnections)
rlang::last_trace()
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
ds.PrepareRawData(RawDataSetName = "RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
CompleteCharacterConversion = FALSE,
CurateFeatureNames = TRUE)
ds.PrepareRawData(RawDataSetName = "CCP.RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
CompleteCharacterConversion = FALSE,
CurateFeatureNames = TRUE)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.RawDataSet",
Stage = "Raw")
RDSValidationReports <- ds.GetRDSValidationReport()
ds.DrawSample(RawDataSetName = "CCP.RawDataSet",
SampleSize = 2000,
SampleName = "RDSSample")
LoadRawDataSet(ServerSpecifications = NULL)
devtools::load_all(".")
LoadRawDataSet(ServerSpecifications = NULL)
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.RawDataSet",
Stage = "Raw")
ds.DrawSample(RawDataSetName = "CCP.RawDataSet",
SampleSize = 2000,
SampleName = "RDSSample")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
devtools::load_all(".")
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
CDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.CuratedDataSet",
Stage = "Curated")
# Get curation reports
CurationReport <- ds.GetCurationReport(Module = "CCP")
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
# Get curation reports
CurationReport <- ds.GetCurationReport(Module = "CCP")
View(CurationReport$EntryCounts$BioSampling)
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CCP.CuratedDataSet",
OutputName = "CCP.AugmentationOutput")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.AugmentedDataSet")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
# --- For Testing Purposes ---
# OrderList <- list(ADS.Diagnosis = c("Grading",
#                                     "PatientAgeAtDiagnosis",
#                                     "TNM.T"))
OrderList <- NULL
InputWorkspaceInfo <- ServerWorkspaceInfo
DSConnections <- CCPConnections
SuitableTables <- InputWorkspaceInfo$Overview$All %>%
filter(Exists == TRUE,
Exists.Info == "Uniform",
Class == "data.frame",
Class.Info == "Uniform") %>%
pull(Object)
OrderList <- InputWorkspaceInfo$ObjectDetails$All[SuitableTables] %>%
imap(function(TableInfo, tablename)
{
TableInfo %>%
filter(Type %in% c("character", "logical", "integer", "numeric", "double")) %>%
pull(Feature)
})
Exploration <- OrderList %>%
imap(function(FeatureNames, tablename)
{
FeatureNames %>%
map(\(featurename) dsFredaClient::ExploreFeature(TableName = tablename,
FeatureName = featurename,
DSConnections = DSConnections)) %>%
set_names(FeatureNames)
})
TestFeat <- OrderList$CCP.RDS.Diagnosis
rlang::last_trace()
TestFeat
# --- For Testing Purposes ---
TableName <- "CCP.RDS.Diagnosis"
MetricFeatureName <- "ICDOTopographyVersion"
GroupingFeatureName <- NULL
RemoveMissings <- TRUE
DSConnections <- CCPConnections
# Get meta data of table object
TableMetaData <- ds.GetObjectMetaData(ObjectName = TableName,
DSConnections = DSConnections)
# Stop execution if referred table object is not a data.frame
if (TableMetaData$FirstEligible$Class != "data.frame") { stop("Error: The referred table object does not seem to be a data.frame.", call. = FALSE)}
# Get data type of feature in question
FeatureType <- TableMetaData$FirstEligible$DataTypes[MetricFeatureName]
# Stop function if referred feature is not of class 'numeric' or similar
if (!(FeatureType %in% c("double", "integer", "numeric"))) { stop(paste0("Error: The referred feature '", MetricFeatureName, "' is of class '", FeatureType, "' and therefore not suitable."), call. = FALSE) }
# ServerReturns: Obtain sample statistics for each server calling dsFreda::GetSampleStatisticsDS()
ServerReturns <- DSI::datashield.aggregate(conns = DSConnections,
expr = call("GetSampleStatisticsDS",
TableName.S = TableName,
MetricFeatureName.S = MetricFeatureName,
GroupingFeatureName.S = GroupingFeatureName,
RemoveMissings.S = RemoveMissings))
# Convert Server returns into tibble containing separate statistics
SeparateStatistics <- ServerReturns %>%
list_rbind(names_to = "Server")
View(SeparateStatistics)
# Making use of dsBaseClient::ds.meadSdGp() to obtain CUMULATED parametric statistics
CumulatedStatistics_Parametric <- dsBaseClient::ds.meanSdGp(x = paste0(TableName, "$", MetricFeatureName),      # Fails for irregular feature names like 'xyz-abc'. Using TableName[['FeatureName']] not possible due to DataSHIELD R parser
y = "1",
datasources = DSConnections)
# Making use of dsBaseClient::ds.quantileMean() to obtain CUMULATED non-parametric statistics
vc_CumulatedStatistics_Nonparametric <- dsBaseClient::ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "combine",
datasources = DSConnections)
CumulatedStatistics_Parametric$Mean_gp_study[1, "COMBINE"]
?is.vector
class(CumulatedStatistics_Parametric)
# Making use of dsBaseClient::ds.meadSdGp() to obtain CUMULATED parametric statistics
CumulatedStatistics_Parametric <- dsBaseClient::ds.meanSdGp(x = paste0(TableName, "$", MetricFeatureName),      # Fails for irregular feature names like 'xyz-abc'. Using TableName[['FeatureName']] not possible due to DataSHIELD R parser
y = "1",
datasources = DSConnections)
# Making use of dsBaseClient::ds.quantileMean() to obtain CUMULATED non-parametric statistics
vc_CumulatedStatistics_Nonparametric <- dsBaseClient::ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "combine",
datasources = DSConnections)
# Compiling cumulated statistics
CumulatedStatistics <- tibble(Server = "All",
N = ifelse(is.list(CumulatedStatistics_Parametric), CumulatedStatistics_Parametric$Nvalid_gp_study[1, "COMBINE"], NA),
q5 = vc_CumulatedStatistics_Nonparametric["5%"],
Q1 = vc_CumulatedStatistics_Nonparametric["25%"],
Median = vc_CumulatedStatistics_Nonparametric["50%"],
Q3 = vc_CumulatedStatistics_Nonparametric["75%"],
q95 = vc_CumulatedStatistics_Nonparametric["95%"],
MAD = NA,
Mean = ifelse(is.list(CumulatedStatistics_Parametric), CumulatedStatistics_Parametric$Mean_gp_study[1, "COMBINE"], NA),
SD = ifelse(is.list(CumulatedStatistics_Parametric), CumulatedStatistics_Parametric$StDev_gp_study[1, "COMBINE"], NA),
SEM = ifelse(is.list(CumulatedStatistics_Parametric), CumulatedStatistics_Parametric$SEM_gp_study[1, "COMBINE"], NA))
View(CumulatedStatistics)
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CCP.CuratedDataSet",
OutputName = "CCP.AugmentationOutput")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
# --- For Testing Purposes ---
# OrderList <- list(ADS.Diagnosis = c("Grading",
#                                     "PatientAgeAtDiagnosis",
#                                     "TNM.T"))
OrderList <- NULL
InputWorkspaceInfo <- ServerWorkspaceInfo
DSConnections <- CCPConnections
SuitableTables <- InputWorkspaceInfo$Overview$All %>%
filter(Exists == TRUE,
Exists.Info == "Uniform",
Class == "data.frame",
Class.Info == "Uniform") %>%
pull(Object)
OrderList <- InputWorkspaceInfo$ObjectDetails$All[SuitableTables] %>%
imap(function(TableInfo, tablename)
{
TableInfo %>%
filter(Type %in% c("character", "logical", "integer", "numeric", "double")) %>%
pull(Feature)
})
Exploration <- OrderList %>%
imap(function(FeatureNames, tablename)
{
FeatureNames %>%
map(\(featurename) dsFredaClient::ExploreFeature(TableName = tablename,
FeatureName = featurename,
DSConnections = DSConnections)) %>%
set_names(FeatureNames)
})
Exploration$CCP.ADS.Diagnosis$Grading$Statistics$AbsoluteFrequencies
TableSelection <- c("CCP.ADS.Diagnosis",
"CCP.ADS.DiseaseCourse",
"CCP.ADS.Events",
"CCP.ADS.Patient",
"CCP.ADS.Therapy")
SuitableTables <- SuitableTables[SuitableTables %in% TableSelection]
devtools::load_all(".")
