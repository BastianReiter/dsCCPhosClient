}
View(df_FrequencyTable)
?select
DataSources <- CCPConnections
library(dsBaseClient)
library(dsCCPhosClient)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Establish Connections to virtual servers using dsCCPhosClient::ConnectToVirtualCCP()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check server requirements using dsCCPhosClient::CheckServerRequirements()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Messages <- CheckServerRequirements(DataSources = CCPConnections)
# datashield.pkg_status(conns = CCPConnections)
# datashield.method_status(conns = CCPConnections)
# datashield.methods(conns = CCPConnections, type = "assign")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load Raw Data Set (RDS) from Opal data base to R sessions on servers
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Get validation report of Raw Data Set (RDS)
# ValidationReportRDS <- ds.GetValidationReport_RDS(Name_RawDataSet = "RawDataSet",
#                                                       DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
#View(CurationReports$All$Transformation$Monitors$Staging)
#View(CurationReports$All$Transformation$EligibilityOverviews$Staging)
#View(CurationReports$All$Transformation$ValueSetOverviews$Raw)
# Get validation report of Curated Data Set (CDS)
# ValidationReportCDS <- ds.GetValidationReport_CDS(Name_CurationOutput = "CurationOutput",
#                                                   DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Plot data on value eligibility for exemplary table in CDS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - Restructure eligibility overview table to meet requirements of plot function
# - Create separate data frames for each 'Feature' value
# - Columns in final object:
#   - 'Feature': contains names of features
#   - 'data': plot data for feature-specific plot
#-------------------------------------------------------------------------------
PlotData <- CurationReports$All$Transformation$EligibilityOverviews$Staging %>%
select(-ends_with("_Proportional")) %>%
pivot_longer(cols = c(Raw, Harmonized, Recoded, Final),
names_to = "Stage",
values_to = "Count") %>%
pivot_wider(names_from = "Eligibility",
values_from = "Count") %>%
nest(.by = Feature)      # 'Split' the whole table into smaller data frames for each 'Feature' value
library(plotly)
plot_ly(data = filter(PlotData, Feature == "UICCStage")$data[[1]],
x = ~Stage,
y = ~Eligible,
type = "bar",
name = "Eligible",
color = I(dsCCPhosClient::CCPhosColors$Green)) %>%
add_trace(y = ~Ineligible,
name = "Ineligible",
color = I(dsCCPhosClient::CCPhosColors$Red)) %>%
add_trace(y = ~Missing,
name = "Missing",
color = I(dsCCPhosClient::CCPhosColors$MediumGrey)) %>%
layout(xaxis = list(categoryorder = "array",
categoryarray = c("Raw", "Harmonized", "Recoded", "Final")),
yaxis = list(title = "Count"),
barmode = "stack")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Curated Data Set (CDS) into Augmented Data Set (ADS)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get overview of objects in server workspaces
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - Using dsCCPhosClient::GetServerWorkspaceInfo() and dsCCPhosClient::ds.GetObjectMetaData()
#-------------------------------------------------------------------------------
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
# Overview of all objects in server R sessions
View(ServerWorkspaceInfo$Overview)
# Detailed meta data of a particular object (also part of ServerWorkspaceInfo)
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
# Explore Object meta data: Structural overview
View(ObjectMetaData$FirstEligible$Structure)
# Get type of feature 'PatientID'
ObjectMetaData$FirstEligible$DataTypes["PatientID"]
DataSources <- CCPConnections
TableName <- "ADS_Patients"
FeatureName <- "TNM_T"
GroupingFeatureName <- NULL
MaxNumberCategories <- 5
if (!(is.character(TableName) & is.character(FeatureName)))
{
stop("Error: Arguments 'TableName' and 'FeatureName' must be character strings.", call. = FALSE)
}
if (is.null(DataSources))
{
DataSources <- DSI::datashield.connections_find()
}
require(dplyr)
require(purrr)
require(tibble)
require(tidyr)
# Get meta data of table object
TableMetaData <- ds.GetObjectMetaData(ObjectName = TableName,
DataSources = DataSources)
if (TableMetaData$FirstEligible$Class != "data.frame") { stop("Error: The referred table object does not seem to be a data.frame.", call. = FALSE)}
# Get data type of feature in question
FeatureType <- TableMetaData$FirstEligible$DataTypes[FeatureName]
# Stop function if referred feature is of class 'numeric' or similar
if (FeatureType %in% c("double", "integer", "numeric")) { stop(paste0("Error: The referred feature '", FeatureName, "' is of class '", FeatureType, "' and therefore not suitable."), call. = FALSE) }
# SiteReturns: Obtain sample statistics for each server calling dsCCPhos::GetFrequencyTableDS()
ls_SiteReturns <- DSI::datashield.aggregate(conns = DataSources,
expr = call("GetFrequencyTableDS",
TableName.S = TableName,
FeatureName.S = FeatureName,
GroupingFeatureName.S = GroupingFeatureName))
SiteNames <- names(DataSources)
# Convert site returns into tibble containing separate frequency tables
df_FrequencyTable <- ls_SiteReturns %>%
list_rbind(names_to = "Site") %>%
pivot_wider(names_from = Site,
names_glue = "{Site}_{.value}",
names_vary = "slowest",
values_from = c(AbsoluteFrequency, RelativeFrequency)) %>%
mutate(All_AbsoluteFrequency = rowSums(pick(paste0(SiteNames, "_AbsoluteFrequency")), na.rm = TRUE),
All_RelativeFrequency = All_AbsoluteFrequency / sum(All_AbsoluteFrequency),
.after = Value) %>%
arrange(desc(All_AbsoluteFrequency))
# If the number of unique values exceeds 'MaxNumberCategories', cumulate less frequent categories under 'Other' category
if (!is.null(MaxNumberCategories))
{
if (nrow(df_FrequencyTable) > MaxNumberCategories)
{
FrequenciesKeep <- df_FrequencyTable %>%
slice_head(n = MaxNumberCategories)
FrequenciesCumulate <- df_FrequencyTable %>%
slice_tail(n = nrow(df_FrequencyTable) - MaxNumberCategories) %>%
select(-Value) %>%
colSums(na.rm = TRUE) %>%
as_tibble_row() %>%
mutate(Value = "Other")
df_FrequencyTable <- bind_rows(FrequenciesKeep,
FrequenciesCumulate)
}
}
View(df_FrequencyTable)
?rename
?stringr::str_remove
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency"))
View(df_AbsoluteFrequencies)
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency")) %>%
pivot_wider(names_from = Value,
values_from = SiteNames)
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency")) %>%
pivot_wider(names_from = Value,
values_from = all_of(SiteNames))
View(df_AbsoluteFrequencies)
View(df_AbsoluteFrequencies)
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency")) %>%
pivot_wider(names_from = Value,
values_from = c(everything(),
-All))
View(df_AbsoluteFrequencies)
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency")) %>%
pivot_wider(names_from = Value,
values_from = c(everything(),
-Value))
View(df_AbsoluteFrequencies)
?pivot_wider
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency")) %>%
t()
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency")) %>%
t() %>%
as_tibble()
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency"))
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency"))
View(df_AbsoluteFrequencies)
df_AbsoluteFrequencies <- as_tibble(cbind(nms = names(df_AbsoluteFrequencies),
t(df_AbsoluteFrequencies)))
View(df_AbsoluteFrequencies)
?tidyr::spread
?tidyr::gather
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency"))
df_AbsoluteFrequencies <- df_AbsoluteFrequencies %>%
pivot_longer(cols = -Value,
names_to = "Value")
View(df_AbsoluteFrequencies)
df_AbsoluteFrequencies <- df_AbsoluteFrequencies %>%
pivot_longer(cols = -Value,
names_to = "value")
?pivot_longer
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency"))
df_AbsoluteFrequencies <- df_AbsoluteFrequencies %>%
pivot_longer(cols = -Value,
names_to = "Test")
View(df_AbsoluteFrequencies)
df_AbsoluteFrequencies <- df_AbsoluteFrequencies %>%
pivot_longer(cols = -Value,
names_to = "Site") %>%
pivot_wider(names_from = Value,
values_from = c(everything(),
-Value))
df_AbsoluteFrequencies <- df_AbsoluteFrequencies %>%
pivot_longer(cols = -Value,
names_to = "Site")
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency"))
df_AbsoluteFrequencies <- df_AbsoluteFrequencies %>%
pivot_longer(cols = -Value,
names_to = "Site")
df_AbsoluteFrequencies <- df_AbsoluteFrequencies %>%
pivot_longer(cols = -Value,
names_to = "Site") %>%
pivot_wider(names_from = Value,
values_from = value)
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency"))
df_AbsoluteFrequencies <- df_AbsoluteFrequencies %>%
pivot_longer(cols = -Value,
names_to = "Site") %>%
pivot_wider(names_from = Value,
values_from = value)
View(df_AbsoluteFrequencies)
df_RelativeFrequencies <- df_FrequencyTable %>%
select(Value,
contains("RelativeFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_RelativeFrequency"),
.cols = contains("RelativeFrequency"))
df_RelativeFrequencies <- df_RelativeFrequencies %>%
pivot_longer(cols = -Value,
names_to = "Site") %>%
pivot_wider(names_from = Value,
values_from = value)
View(df_RelativeFrequencies)
# Select only absolute frequ
df_AbsoluteFrequencies <- df_FrequencyTable %>%
select(Value,
contains("AbsoluteFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_AbsoluteFrequency"),
.cols = contains("AbsoluteFrequency")) %>%
pivot_longer(cols = -Value,
names_to = "Site") %>%
pivot_wider(names_from = Value,
values_from = value)
df_RelativeFrequencies <- df_FrequencyTable %>%
select(Value,
contains("RelativeFrequency")) %>%
rename_with(.fn = \(colnames) str_remove(colnames, "_RelativeFrequency"),
.cols = contains("RelativeFrequency")) %>%
pivot_longer(cols = -Value,
names_to = "Site") %>%
pivot_wider(names_from = Value,
values_from = value)
View(df_AbsoluteFrequencies)
View(df_RelativeFrequencies)
devtools::load_all(".")
Test <- ds.GetFrequencyTable(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T",
MaxNumberCategories = 5)
Test$AbsoluteFrequencies
Test$RelativeFrequencies
Test
Test <- ds.GetFrequencyTable(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T",
MaxNumberCategories = 5)
TableData <- Test$AbsoluteFrequencies %>%
bind_rows(Test$RelativeFrequencies) %>%
group_by(Site) %>%
summarize(across(-Site, ~ paste0(.x, collapse = "/")))
TableData <- Test$AbsoluteFrequencies %>%
bind_rows(Test$RelativeFrequencies)
View(TableData)
TableData <- Test$AbsoluteFrequencies %>%
bind_rows(Test$RelativeFrequencies) %>%
group_by(Site) %>%
summarize(across(everything(), ~ paste0(.x, collapse = "/")))
View(TableData)
TableData <- Test$AbsoluteFrequencies %>%
bind_rows(Test$RelativeFrequencies) %>%
group_by(Site) %>%
summarize(across(everything(), ~ paste0(.x, collapse = " / ")))
Rel <- Test$RelativeFrequencies %>%
mutate(across(-Site, paste0("(", round(.x * 100, 0), "%)")))
?across
Rel <- Test$RelativeFrequencies %>%
mutate(across(-Site, ~ paste0("(", round(.x * 100, 0), "%)")))
View(Rel)
RelativeFrequencies <- Test$RelativeFrequencies %>%
mutate(across(-Site, ~ paste0("(", round(.x * 100, 0), "%)")))
TableData <- Test$AbsoluteFrequencies %>%
bind_rows(RelativeFrequencies) %>%
group_by(Site) %>%
summarize(across(everything(), ~ paste0(.x, collapse = "  ")))
TableData <- Test$AbsoluteFrequencies %>%
across(everything(), as.character) %>%
bind_rows(RelativeFrequencies) %>%
group_by(Site) %>%
summarize(across(everything(), ~ paste0(.x, collapse = "  ")))
TableData <- Test$AbsoluteFrequencies %>%
mutate(across(everything(), as.character)) %>%
bind_rows(RelativeFrequencies) %>%
group_by(Site) %>%
summarize(across(everything(), ~ paste0(.x, collapse = "  ")))
View(TableData)
Test$AbsoluteFrequencies
PlotData <- Test$AbsoluteFrequencies %>%
pivot_longer(cols = -Site,
names_to = "Value")
View(PlotData)
PlotData <- Test$AbsoluteFrequencies %>%
pivot_longer(cols = -Site,
names_to = "Value") %>%
pivot_wider(names_from = Site,
values_from = value)
View(PlotData)
PlotData <- Test$AbsoluteFrequencies %>%
pivot_longer(cols = -Site,
names_to = "Value") %>%
pivot_wider(names_from = Site,
values_from = value) %>%
select(-All)
?plot_ly
PlotData <- Test$AbsoluteFrequencies %>%
pivot_longer(cols = -Site,
names_to = "Value")
?pivot_longer
PlotData <- Test$AbsoluteFrequencies %>%
pivot_longer(cols = -Site,
names_to = "Value",
values_to = "Frequency")
PlotData <- Test$AbsoluteFrequencies %>%
pivot_longer(cols = -Site,
names_to = "Value",
values_to = "Frequency") %>%
filter(Site != "All")
?ggplot
PlotData <- Test$AbsoluteFrequencies %>%
pivot_longer(cols = -Site,
names_to = "Value",
values_to = "AbsoluteFrequency") %>%
filter(Site != "All")
Plot <- ggplot(data = PlotData,
mapping = aes(fill = Site,
x = Value,
y = AbsoluteFrequency)) +
geom_bar(position = "stack",
stat = "identity")
Plot
Plot <- ggplot(data = PlotData,
mapping = aes(fill = Site,
x = Value,
y = AbsoluteFrequency)) +
geom_bar(position = "stack",
stat = "identity") %>%
ggplotly()
Plot <- ggplot(data = PlotData,
mapping = aes(fill = Site,
x = Value,
y = AbsoluteFrequency)) +
geom_bar(position = "stack",
stat = "identity")
Plot <- ggplotly(Plot)
Plot <- ggplot(data = PlotData,
mapping = aes(fill = Site,
x = Value,
y = AbsoluteFrequency)) +
geom_bar(position = "stack",
stat = "identity")
Plot
ggplotly(Plot)
Plot <- ggplot(data = as.data.frame(PlotData),
mapping = aes(fill = Site,
x = Value,
y = AbsoluteFrequency)) +
geom_bar(position = "stack",
stat = "identity")
Plot
ggplotly(Plot)
devtools::load_all(".")
Plot <- MakeColumnPlot(DataFrame = PlotData,
XFeature = Value,
YFeature = AbsoluteFrequency)
??label_wrap
devtools::load_all(".")
Plot <- MakeColumnPlot(DataFrame = PlotData,
XFeature = Value,
YFeature = AbsoluteFrequency)
Plot
PlotData <- Test$AbsoluteFrequencies %>%
pivot_longer(cols = -Site,
names_to = "Value",
values_to = "AbsoluteFrequency") %>%
filter(Site != "All")
Plot <- MakeColumnPlot(DataFrame = PlotData,
XFeature = Value,
YFeature = AbsoluteFrequency)
Plot
Plot <- MakeColumnPlot(DataFrame = PlotData,
XFeature = Value,
YFeature = AbsoluteFrequency,
FillPalette = c("All" = CCPhosColors$MediumGrey,
"SiteA" = CCPhosColors$Primary,
"SiteB" = CCPhosColors$Secondary,
"SiteC" = CCPhosColors$Tertiary))
Plot
Plot <- MakeColumnPlot(DataFrame = PlotData,
XFeature = Value,
YFeature = AbsoluteFrequency,
FillPalette = c("SiteA" = CCPhosColors$Primary,
"SiteB" = CCPhosColors$Secondary,
"SiteC" = CCPhosColors$Tertiary))
Plot
rlang::last_trace()
devtools::load_all(".")
Plot <- MakeColumnPlot(DataFrame = PlotData,
XFeature = Value,
YFeature = AbsoluteFrequency,
FillPalette = c("SiteA" = CCPhosColors$Primary,
"SiteB" = CCPhosColors$Secondary,
"SiteC" = CCPhosColors$Tertiary))
Plot
devtools::load_all(".")
Plot <- ggplot(data = as.data.frame(PlotData),
mapping = aes(fill = Site,
x = Value,
y = AbsoluteFrequency)) +
geom_bar(position = "stack",
stat = "identity")
Plot <- MakeColumnPlot(DataFrame = PlotData,
XFeature = Value,
YFeature = AbsoluteFrequency,
FillPalette = c("SiteA" = CCPhosColors$Primary,
"SiteB" = CCPhosColors$Secondary,
"SiteC" = CCPhosColors$Tertiary))
Plot
rlang::last_trace()
