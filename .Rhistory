DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages_UnpackingADS <- dsCCPhosClient::ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
# For Testing Purposes
TableName <- "ADS_Patients"
MetricFeatureName <- "PatientAgeAtDiagnosis"
DataSources <- CCPConnections
ls_ParametricStatistics <- ds.meanSdGp(x = paste0(TableName, "$", MetricFeatureName),
y = "1",
datasources = DataSources)
ls_NonParametricStatistics_Split <- ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "split",
datasources = DataSources)
vc_NonParametricStatistics_Combined <- ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "combine",
datasources = DataSources)
df_NonParametricStatistics <- as.data.frame(rbind(t(as.data.frame(ls_NonParametricStatistics_Split)),
"All" = vc_NonParametricStatistics_Combined))
ls_ParametricStatistics <- ds.meanSdGp(x = paste0(TableName, "$", MetricFeatureName),
y = "1",
datasources = DataSources)
ls_NonParametricStatistics_Split$SiteA
ls_NonParametricStatistics_Split$SiteB
ds.colnames(x = "ADS_Patients",
datasources = CCPConnections)
ds.mean(x = "ADS_Patients$PatientAgeAtDiagnosis",
datasources = CCPConnections)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
devtools::load_all(".")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages_UnpackingCDS <- dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages_UnpackingADS <- dsCCPhosClient::ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
ds.colnames(x = "ADS_Patients",
datasources = CCPConnections)
ds.mean(x = "ADS_Patients$PatientAgeAtDiagnosis",
datasources = CCPConnections)
ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections)
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = CCPhosColors$MediumGrey,
"SiteA" = CCPhosColors$Primary,
"SiteB" = CCPhosColors$Secondary,
"SiteC" = CCPhosColors$Tertiary))
TestPlot
ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
devtools::load_all(".")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
library(dsCCPhosClient)
View(GetServerWorkspaceInfo(DataSources = CCPConnections))
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages_UnpackingCDS <- dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages_UnpackingADS <- dsCCPhosClient::ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections)
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = CCPhosColors$MediumGrey,
"SiteA" = CCPhosColors$Primary,
"SiteB" = CCPhosColors$Secondary,
"SiteC" = CCPhosColors$Tertiary))
TestPlot
devtools::load_all(".")
library(dsCCPhosClient)
ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
MetaData_ADS_Patients <- ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
View(MetaData_ADS_Patients$SiteA$ContentOverview)
View(GetServerWorkspaceInfo(DataSources = CCPConnections))
CCPConnections[["SiteA"]]
?map
# For testing purposes
DataSources <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get names of symbols (objects) in all server workspaces
ServerObjectNames <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- bind_cols(Object = UniqueObjectNames,
Type = purrr::modify(UniqueObjectNames,
function(symbol) { as.character(dsBaseClient::ds.class(x = symbol,
datasources = DataSources)[[1]]) }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
# Create server-specific columns that give feedback on existence of objects (TRUE / FALSE)
ServerColumns <- NULL
# For testing purposes
DataSources <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get names of symbols (objects) in all server workspaces
ServerObjectNames <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- bind_cols(Object = UniqueObjectNames,
Type = purrr::modify(UniqueObjectNames,
function(symbol) { as.character(dsBaseClient::ds.class(x = symbol,
datasources = DataSources)[[1]]) }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
# Create server-specific columns that give feedback on existence of objects (TRUE / FALSE)
ServerColumns <- NULL
for (i in 1:length(ServerNames))
{
Column <- Output$Object %in% ServerObjectNames[[ServerNames[i]]]
ServerColumns <- cbind(ServerColumns,      # Using cbind() instead of bind_cols() because it's quiet
Column)
}
colnames(ServerColumns) <- ServerNames
# Bind columns to Output data frame
Output <- bind_cols(Output,
ServerColumns)
MetaData <- Output$Object %>%
purrr::map(\(objectname) ds.GetObjectMetaData(ObjectName = objectname,
DataSources = DataSources))
MetaData$SiteA
DataSources[[1]]
MetaData <- Output$Object %>%
purrr::map(\(objectname) ds.GetObjectMetaData(ObjectName = objectname,
DataSources = DataSources[[1]]))
MetaData <- Output$Object %>%
purrr::map(\(objectname) ds.GetObjectMetaData(ObjectName = objectname,
DataSources = DataSources[1]))
MetaData <- Output$Object %>%
purrr::map(\(objectname) ds.GetObjectMetaData(ObjectName = objectname,
DataSources = DataSources[1])[[1]])
?pick
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = pick(all_of(ServerNames)))
View(MetaData)
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = paste0(pick(all_of(ServerNames))))
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = paste0(pick(all_of(ServerNames)), collapse = ""))
View(MetaData)
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = ServerNames[pick(all_of(ServerNames))])
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = ServerNames[as.vector(pick(all_of(ServerNames)))])
Test <- c("A", "B", "C")
Test[TRUE]
Test[c(TRUE, FALSE, TRUE)]
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = ServerNames[as.logical(pick(all_of(ServerNames)))])
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = paste0(ServerNames[as.logical(pick(all_of(ServerNames)))], collapse = " "))
View(MetaData)
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = paste0(ServerNames[unlist(pick(all_of(ServerNames)))], collapse = " "))
View(MetaData)
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = first(ServerNames[unlist(pick(all_of(ServerNames)))]))
View(MetaData)
first(Test[c(FALSE)])
first(Test[c(TRUE)])
Test[c(TRUE)]
Test[FALSE]
Test[TRUE]
?purrr::pmap
DataSources["SiteA"]
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = first(ServerNames[unlist(pick(all_of(ServerNames)))])) %>%      # Get name of any (first) server that hosts the object in question
ungroup() %>%
select(Object,
LookAt) %>%
purrr::pmap(function(objectname, servername)
{
ds.GetObjectMetaData(ObjectName = objectname,
DataSources = DataSources[servername])
})
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = first(ServerNames[unlist(pick(all_of(ServerNames)))])) %>%      # Get name of any (first) server that hosts the object in question
ungroup() %>%
select(Object,
LookAt) %>%
purrr::pmap(function(Object, LookAt)
{
ds.GetObjectMetaData(ObjectName = Object,
DataSources = DataSources[LookAt])
})
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = first(ServerNames[unlist(pick(all_of(ServerNames)))])) %>%      # Get name of any (first) server that hosts the object in question
ungroup() %>%
select(Object,
LookAt) %>%
purrr::pmap(function(Object, LookAt)
{
ds.GetObjectMetaData(ObjectName = Object,
DataSources = DataSources[LookAt])[[1]]
})
MetaData <- Output %>%
rowwise() %>%
mutate(LookAt = first(ServerNames[unlist(pick(all_of(ServerNames)))])) %>%      # Get name of any (first) server that hosts the object in question
ungroup() %>%
select(Object,
LookAt) %>%
purrr::pmap(function(Object, LookAt)
{
ds.GetObjectMetaData(ObjectName = Object,
DataSources = DataSources[LookAt])[[1]]
}) %>%
setNames(Output$Object)
MetaData$ADS_Events$ContentOverview
devtools::load_all(".")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
View(GetServerWorkspaceInfo(DataSources = CCPConnections))
# For testing purposes
DataSources <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get names of symbols (objects) in all server workspaces
ServerObjectNames <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- tibble(Object = UniqueObjectNames)
# Create server-specific columns that give feedback on existence of objects (TRUE / FALSE)
ServerColumns <- NULL
for (i in 1:length(ServerNames))
{
Column <- Output$Object %in% ServerObjectNames[[ServerNames[i]]]
ServerColumns <- cbind(ServerColumns,      # Using cbind() instead of bind_cols() because it's quiet
Column)
}
colnames(ServerColumns) <- ServerNames
# Bind columns to Output data frame
Output <- bind_cols(Output,
ServerColumns)
View(Output)
MetaData <- Output %>%
rowwise() %>%
mutate(ServerToLookAt = first(ServerNames[unlist(pick(all_of(ServerNames)))])) %>%      # Get name of any (first) server that hosts the object in question
ungroup() %>%
select(Object,
ServerToLookAt) %>%
pmap(function(Object, ServerToLookAt)
{
if (!is.na(ServerToLookAt))
{
ds.GetObjectMetaData(ObjectName = Object,
DataSources = DataSources[ServerToLookAt])[[1]]
}
else { return(list()) }
}) %>%
setNames(Output$Object)
MetaData$RDS_Histology$ContentOverview
Test <- as.data.frame(MetaData)
MetaData["RDS_BioSampling"]
MetaData["RDS_BioSampling"]$Class
MetaData[["RDS_BioSampling"]]$Class
Output <- Output %>%
rowwise() %>%
mutate(Class = MetaData[[Object]]$Class)
View(Output)
Output <- Output %>%
rowwise() %>%
mutate(Class = MetaData[[Object]]$Class,
Length = MetaData[[Object]]$Length,
RowCount = MetaData[[Object]]$RowCount) %>%
nest(ContentOverview = MetaData[[Object]]$ContentOverview)
Output <- Output %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA)) %>%
nest(ContentOverview = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA))
?nest
Output <- Output %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA))
View(Output)
devtools::load_all(".")
library(dsCCPhosClient)
# For testing purposes
DataSources <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get names of symbols (objects) in all server workspaces
ServerObjectNames <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# Initiate 'ObjectInfo' tibble
ObjectInfo <- tibble(Object = UniqueObjectNames)
# Create server-specific columns that give feedback on existence of objects (TRUE / FALSE)
ServerColumns <- NULL
for (i in 1:length(ServerNames))
{
Column <- Output$Object %in% ServerObjectNames[[ServerNames[i]]]
ServerColumns <- cbind(ServerColumns,      # Using cbind() instead of bind_cols() because it's quiet
Column)
}
# Name columns according to server names
colnames(ServerColumns) <- ServerNames
# Bind columns to Output data frame
ObjectInfo <- bind_cols(Output,
ServerColumns)
ObjectInfo
rm(list=ls())
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get names of symbols (objects) in all server workspaces
ServerObjectNames <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
# Initiate 'ObjectInfo' tibble
ObjectInfo <- tibble(Object = UniqueObjectNames)
# Create server-specific columns that give feedback on existence of objects (TRUE / FALSE)
ServerColumns <- NULL
for (i in 1:length(ServerNames))
{
Column <- Output$Object %in% ServerObjectNames[[ServerNames[i]]]
ServerColumns <- cbind(ServerColumns,      # Using cbind() instead of bind_cols() because it's quiet
Column)
}
# Name columns according to server names
colnames(ServerColumns) <- ServerNames
# Bind columns to Output data frame
ObjectInfo <- bind_cols(Output,
ServerColumns)
# Create server-specific columns that give feedback on existence of objects (TRUE / FALSE)
ServerColumns <- NULL
for (i in 1:length(ServerNames))
{
Column <- ObjectInfo$Object %in% ServerObjectNames[[ServerNames[i]]]
ServerColumns <- cbind(ServerColumns,      # Using cbind() instead of bind_cols() because it's quiet
Column)
}
# Name columns according to server names
colnames(ServerColumns) <- ServerNames
# Bind columns to Output data frame
ObjectInfo <- bind_cols(Output,
ServerColumns)
# Bind columns to Output data frame
ObjectInfo <- bind_cols(ObjectInfo,
ServerColumns)
MetaData <- ObjectInfo %>%
rowwise() %>%
mutate(ServerToLookAt = first(ServerNames[unlist(pick(all_of(ServerNames)))])) %>%      # Get name of any (first) server that hosts the object in question
ungroup() %>%
select(Object,
ServerToLookAt) %>%
pmap(function(Object, ServerToLookAt)
{
if (!is.na(ServerToLookAt))
{
ds.GetObjectMetaData(ObjectName = Object,
DataSources = DataSources[ServerToLookAt])[[1]]
}
else { return(list()) }
}) %>%
setNames(ObjectInfo$Object)
# Add some meta data to 'ObjectInfo'
ObjectInfo <- ObjectInfo %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA))
# Return list
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
return(list(Overview = ObjectInfo,
Details = MetaData))
devtools::load_all(".")
library(dsCCPhosClient)
rm(list=ls())
devtools::load_all(".")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
View(GetServerWorkspaceInfo(DataSources = CCPConnections))
# Overview of all objects
View(GetServerWorkspaceInfo(DataSources = CCPConnections)$Overview)
# Detailed into into an object
View(GetServerWorkspaceInfo(DataSources = CCPConnections)$Details)
# Detailed view into into an object
View(GetServerWorkspaceInfo(DataSources = CCPConnections)$Details$RDS_Patient)
# Detailed meta data of a particular object
MetaData <- GetServerWorkspaceInfo(DataSources = CCPConnections)$Details$RDS_Patient
# View of object structure
View(MetaData$ContentOverview)
# Detailed meta data of a particular object
MetaData <- GetServerWorkspaceInfo(DataSources = CCPConnections)$Details
MetaData[[1]]
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Overview of all objects
View(GetServerWorkspaceInfo(DataSources = CCPConnections)$Overview)
# Detailed meta data of a particular object
MetaData <- GetServerWorkspaceInfo(DataSources = CCPConnections)$Details[[1]]
# View of particular object structure
View(MetaData$ContentOverview)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
View(CurationReports$All$Transformation$EligibilityOverviews$Staging)
PlotData <- CurationReports$All$Transformation$EligibilityOverviews$Staging %>%
select(-ends_with("_Proportional")) %>%
pivot_longer(cols = c(Raw, Harmonized, Recoded, Final),
names_to = "Stage",
values_to = "Count") %>%
pivot_wider(names_from = "Eligibility",
values_from = "Count") %>%
nest(.by = Feature)
PlotData$Feature
PlotData$Feature
filter(PlotData, Feature == "UICCStage")$data
PlotData[1, 1]
PlotData[1, 2]
PlotData[1, 2]$data
PlotData["UICCStage", 2]
PlotData["UICCStage", 2]$data
