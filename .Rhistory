MetaDataComplete <- list()
for (i in 1:length(ServerNames))
{
#print(i)
ObjectInfo <- tibble(Object = UniqueObjectNames)
ObjectInfo$ObjectExists <- ObjectInfo$Object %in% ServerObjectNames[[ServerNames[i]]]
#ServerColumns <- cbind(ServerColumns,      # Using cbind() instead of bind_cols() because it's quiet
#                       Column)
#}
# Name columns according to server names
#colnames(ServerColumns) <- "ObjectExists"
# Bind columns to Output data frame
# ObjectInfo <- bind_cols(ObjectInfo,
#                        ServerColumns)
# 2) Collect meta data about existing objects and attach some of it to 'ObjectInfo'
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MetaData <- ObjectInfo$Object %>%
map(function(object)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = object,
DataSources = DataSources[i])
return(ObjectMetaData$FirstEligible)      # The meta data for an object is collected from the first server where the object actually exists (in case it does not exist everywhere)
}) %>%
setNames(ObjectInfo$Object)
# Add some meta data to 'ObjectInfo'
ObjectInfo <- ObjectInfo %>%
rowwise() %>%
mutate(Class = ifelse(!is.null(MetaData[[Object]]$Class), MetaData[[Object]]$Class, NA),
Length = ifelse(!is.null(MetaData[[Object]]$Length), MetaData[[Object]]$Length, NA),
RowCount = ifelse(!is.null(MetaData[[Object]]$RowCount), MetaData[[Object]]$RowCount, NA),
.after = Object) %>%
ungroup() %>%
mutate(ServerName = ServerNames[i], .before = 1)
ObjectInfoComplete <- rbind(ObjectInfoComplete, ObjectInfo)
MetaDataComplete[[i]] <- MetaData
names(MetaDataComplete)[i] <- ServerNames[i]
}
i <- 1
#print(i)
ObjectInfo <- tibble(Object = UniqueObjectNames)
ObjectInfo$ObjectExists <- ObjectInfo$Object %in% ServerObjectNames[[ServerNames[i]]]
ObjectInfo
MetaData <- ObjectInfo$Object %>%
map(function(object)
{
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = object,
DataSources = DataSources[i])
return(ObjectMetaData$FirstEligible)      # The meta data for an object is collected from the first server where the object actually exists (in case it does not exist everywhere)
}) %>%
setNames(ObjectInfo$Object)
object <- "TestData"
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = object,
DataSources = DataSources[i])
i <- 2
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = object,
DataSources = DataSources[i])
i <- 1
### For testing purposes
ObjectName <- "TestData"
DataSources <- CCPConnections
require(purrr)
# Construct server-side function call
ServerCall <- call("GetObjectMetaDataDS",
ObjectName.S = ObjectName)
# Get object meta data from every server
ObjectMetaData <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
?DSI::datashield.assign.resource()
# List resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# List resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# List resources at servers
DSI::datashield.resources(conns = CCPConnections)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
url = "file://./Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
library(resourcer)
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo$Overview
View(ServerWorkspaceInfo$Overview)
View(ServerWorkspaceInfo$Details)
?resourcer::as.resource.data.frame()
TestResource.client <- resourcer::newResourceClient(TestResource.res)
class(TestResource.client)
TestResource.client
as.data.frame(TestResource.client)
data.frame(TestResource.client)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
url = "file://./Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
dsBaseClient::ds.dataFrame(x = TestResourceClient)
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo
?ds.dataFrame
dsBaseClient::ds.dataFrame(x = "TestResourceClient",
newobj = "TestDF")
?newDSLiteServer
devtools::load_all(".")
devtools::load_all(".")
file.path(tempdir(), ".dslite")
tempdir()
?file.path
wd()
getwd()
file.path(getwd(), "Development/Test/VirtualWD")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
url = "file://./Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res),
WorkingDirectory = file.path(getwd(), "Development/Test/VirtualWD"))
?getwd
devtools::load_all(".")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res),
WorkingDirectory = file.path(getwd(), "Development/Test/VirtualWD"))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
dsBaseClient::ds.dataFrame(x = "TestResourceClient",
newobj = "TestDF")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://../../DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res),
WorkingDirectory = file.path(getwd(), "Development/Test/VirtualWD"))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
dsBaseClient::ds.dataFrame(x = "TestResourceClient",
newobj = "TestDF")
?newDSLiteServer
?DSI::datashield.assign.resource()
DSLiteServer$getSessionIds()
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file:///C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/VirtualWD/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res),
WorkingDirectory = file.path(getwd(), "Development/Test/VirtualWD"))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
dsBaseClient::ds.dataFrame(x = "TestResourceClient",
newobj = "TestDF")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/VirtualWD/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res),
WorkingDirectory = file.path(getwd(), "Development/Test/VirtualWD"))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
dsBaseClient::ds.dataFrame(x = "TestResourceClient",
newobj = "TestDF")
?data+
?data
data("CNSIM1")
View(CNSIM1)
CCPConnections
CCPConnections$SiteA
CCPConnections$SiteA@sid
?file.copy
CCPConnections$SiteA@server
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/VirtualWD/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res),
WorkingDirectory = file.path(getwd(), "Development/Test/VirtualWD"))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
dsBaseClient::ds.dataFrame(x = "TestResourceClient",
newobj = "TestDF")
?resourcer::as.resource.data.frame()
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo$Details$TestDF
dsBaseClient::ds.list(x = "TestResourceClient",
newobj = "TestDF")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo$Overview
ServerWorkspaceInfo$Details$TestDF
dsBaseClient::ds.dataFrame(x = "TestResourceClient",
newobj = "TestDF")
ds.GetObjectMetaData("TestDF", DataSources = CCPConnections)
datashield.assign.expr(conns = CCPConnections,
symbol = "Testdf",
expr = quote(as.resource.data.frame(TestResourceClient)))
devtools::load_all(".")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/VirtualWD/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
datashield.assign.expr(conns = CCPConnections,
symbol = "Testdf",
expr = quote(as.resource.data.frame(TestResourceClient)))
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo$Overview
ServerWorkspaceInfo$Details$Testdf
?as.resource.data.frame
datashield.assign.expr(conns = CCPConnections,
symbol = "Testdf",
expr = quote(as.resource.data.frame(TestResourceClient, strict = 'TRUE')))
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo$Details$Testdf$Structure
ServerWorkspaceInfo$Details$Testdf
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/VirtualWD/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
library(resourcer)
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
datashield.assign.expr(conns = CCPConnections,
symbol = "Testdf",
expr = quote(as.resource.data.frame(TestResourceClient, strict = 'TRUE')))
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo$Overview
ServerWorkspaceInfo$Details$Testdf
devtools::load_all(".")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo$Details$Testdf
Test <- getDSLiteData(conns = CCPConnections,
symbol = "Testdf")
Test$SiteA
dsCCPhos::GetObjectMetaDataDS("Test")
dsCCPhos::GetObjectMetaDataDS("Test$SiteA")
Test <- getDSLiteData(conns = CCPConnections,
symbol = "Testdf")$SiteA
dsCCPhos::GetObjectMetaDataDS("Test")
ObjectName.S <- "Test"
MetaData <- list()
Object <- get(ObjectName.S, envir = parent.frame())
MetaData$ObjectExists <- TRUE
MetaData$Class <- class(Object)[1]      # Some objects return more than one string as class info (e.g. ResourceClient objects). Take only first string for these cases.
MetaData$Class
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
DataTypes <- sapply(Object, class)      # Return class/type of every element in 'Object'
DataTypes
?sapply
as.vector(DataTypes)
DataTypes <- lapply(Object, class)      # Return class/type of every element in 'Object'
DataTypes
Object <- TestData$metastasis
DataTypes <- sapply(Object, class)      # Return class/type of every element in 'Object'
DataTypes
Object <- get(ObjectName.S, envir = parent.frame())
?as.vector
DataTypes <- sapply(Object, class)      # Return class/type of every element in 'Object'
as.vector(DataTypes, mode = "list")
as.vector(DataTypes, mode = "character")
DataTypes <- lapply(Object, class)      # Return class/type of every element in 'Object'
DataTypesList <- lapply(Object, class)      # Return class/type of every element in 'Object'
?lapply
DataTypes <- lapply(DataTypesList, paste, collapse = "/")
DataTypes
DataTypes <- sapply(DataTypesList, paste, collapse = "/")
DataTypes
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource.res <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource.res))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# Assign 'TestResource' of class 'ResourceClient' to symbol 'TestResClient' in R session
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
datashield.assign.expr(conns = CCPConnections,
symbol = "Testdf",
expr = quote(as.resource.data.frame(TestResourceClient, strict = 'TRUE')))
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
ServerWorkspaceInfo$Details$Testdf
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
DSI::dsListResources(CCPConnections)
DSI::dsListResources(conn = CCPConnections)
# List all resources at servers
DSI::datashield.resources(conns = CCPConnections)
# Status/Accessibility of a specific resource
DSI::datashield.resource_status(conns = CCPConnections,
resource = "TestResource")
DSI::datashield.assign.resource(conns = CCPConnections,
symbol = "TestResourceClient",
resource = "TestResource")
# Then we can actually load the data of the resource into the server R session by calling 'as.resource.data.frame' on it
datashield.assign.expr(conns = CCPConnections,
symbol = "TestDataFrame",
expr = quote(as.resource.data.frame(TestResourceClient, strict = 'TRUE')))
