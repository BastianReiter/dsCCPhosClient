library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.RawDataSet",
Stage = "Raw")
View(RDSTableCheck$EligibleValueCounts$Diagnosis)
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
ServerWorkspaceInfo$EligibleValues$CCP.RDS.Diagnosis
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.RawDataSet",
Module = "CCP",
Stage = "Raw")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CCP.CuratedDataSet",
OutputName = "CCP.AugmentationOutput")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "CCP.AugmentedDataSet",
Module = "CCP",
Stage = "Augmented")
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
Test <- dsFredaClient::GetExplorationData()
Test <- dsFredaClient::GetExplorationData(TableSelection <- c("CCP.ADS.Diagnosis",
"CCP.ADS.DiseaseCourse",
"CCP.ADS.Events",
"CCP.ADS.Patient",
"CCP.ADS.Therapy"))
Test <- dsFredaClient::GetExplorationData(InputWorkspaceInfo = ServerWorkspaceInfo)
Test$CCP.ADS.Patient$LastVitalStatus$FeatureInfo
TestA <- ExploreFeature(TableName = "CCP.ADS.Patient",
FeatureName = "Sex")
TestA$FeatureInfo
Meta.ADS <- dsCCPhos::Meta.ADS
# Add feature to 'Meta.ADS' indicating if a feature should be part of an "order list" that can be passed to dsFredaClient::GetExplorationData()
Meta.ADS <- Meta.ADS %>%
mutate(ExploreRoutinely = case_when(TableName == "Events" & FeatureName %in% c("EventClass",
"EventSubclass") ~ TRUE,
TableName == "Diagnosis" & FeatureName %in% c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp") ~ TRUE,
TableName == "Patient" & FeatureName %in% c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses") ~ TRUE,
.default = FALSE))
library(dplyr)
library(usethis)
Meta.ADS <- dsCCPhos::Meta.ADS
# Add feature to 'Meta.ADS' indicating if a feature should be part of an "order list" that can be passed to dsFredaClient::GetExplorationData()
Meta.ADS <- Meta.ADS %>%
mutate(ExploreRoutinely = case_when(TableName == "Events" & FeatureName %in% c("EventClass",
"EventSubclass") ~ TRUE,
TableName == "Diagnosis" & FeatureName %in% c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp") ~ TRUE,
TableName == "Patient" & FeatureName %in% c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses") ~ TRUE,
.default = FALSE))
use_data(Meta.ADS, overwrite = TRUE)
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CCP.CuratedDataSet",
OutputName = "CCP.AugmentationOutput")
Test <- dsFredaClient::GetExplorationData(InputWorkspaceInfo = ServerWorkspaceInfo,
OrderList = list(Diagnosis = c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp"),
Patient = c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses")))
Test <- dsFredaClient::GetExplorationData(#InputWorkspaceInfo = ServerWorkspaceInfo,
OrderList = list(Diagnosis = c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp"),
Patient = c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses")))
Test <- dsFredaClient::GetExplorationData(#InputWorkspaceInfo = ServerWorkspaceInfo,
OrderList = list(CCP.ADS.Diagnosis = c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp"),
CCP.ADS.Patient = c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses")))
?CCPhosApp::Widget.ServerExplorer
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# --- For Testing Purposes ---
ServerSpecifications <- NULL
OpalTableNames.Mapping <- setNames(dsCCPhosClient::Meta.Tables$TableName.Curated,
nm = dsCCPhosClient::Meta.Tables$TableName.Raw)
OpalTableNames.Dictionary <- list(All = setNames(dsCCPhosClient::Meta.Tables$TableName.Raw, nm = dsCCPhosClient::Meta.Tables$TableName.Curated))
RunAssignmentChecks <- TRUE
DSConnections <- CCPConnections
# --- Argument Validation ---
assert_that(is.character(OpalTableNames.Mapping),
is.flag(RunAssignmentChecks))
if (!is.null(ServerSpecifications)) { is.data.frame(ServerSpecifications) }
if (!is.null(OpalTableNames.Dictionary)) { is.list(OpalTableNames.Dictionary) }
# Initiate output messaging objects
Messages <- list()
if (RunAssignmentChecks == TRUE) { Messages$Assignment <- c(Topic = "Object assignment on servers") }
# Get server names
ServerNames <- names(DSConnections)
# If argument 'OpalTableNames.Mapping' is an unnamed vector, set vector values as names
if (is.null(names(OpalTableNames.Mapping))) { names(OpalTableNames.Mapping) <- OpalTableNames.Mapping }
# Check Opal table availability
OpalDBInfo <- dsFredaClient::GetServerOpalDBInfo(ServerSpecifications = ServerSpecifications,
OpalTableNames.Required = names(OpalTableNames.Mapping),
OpalTableNames.Dictionary = OpalTableNames.Dictionary,
DSConnections = DSConnections)
# Loop through all participating servers
for (i in 1:length(ServerNames))
{
# Create data.frame containing mapping from Opal DB table names to R object names
OpalDBToR <- OpalDBInfo$OpalTables.Required %>%
filter(Server == ServerNames[i],
IsAvailable == TRUE,
IsRequired == TRUE) %>%
mutate(RTableName = case_when(OpalTableName.Generic %in% names(OpalTableNames.Mapping) ~ paste0("CCP.RDS.", OpalTableNames.Mapping[OpalTableName.Generic]),
.default = paste0("CCP.RDS.", OpalTableName.Generic)))
# Loop through available Opal DB tables and assign their content to objects (data.frames) in R session
for (j in 1:nrow(OpalDBToR))
{
DSI::datashield.assign.table(conns = DSConnections[[i]],
symbol = OpalDBToR$RTableName[j],
table = OpalDBToR$OpalTableName[j],
id.name = "_id")
# Add message about Opal data base to R session mapping
Messages$Assignment <- c(Messages$Assignment,
Info = paste0("Server '", names(DSConnections)[i], "': Mapped Opal table '", OpalDBToR$OpalTableName[j], "' to data.frame '", OpalDBToR$RTableName[j], "'."))
}
}
if (RunAssignmentChecks == TRUE)
{
BundledMessages <- list()
# Loop through all tables to get info about assignment on servers
for(tablename in OpalTableNames.Mapping)
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- dsFredaClient::ds.GetObjectStatus(ObjectName = paste0("CCP.RDS.", tablename),
DSConnections = DSConnections)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table["ObjectValidity"])   # Must select list element 'ObjectValidity' this way to keep naming of vector and thus class 'Success', 'Warning' and so forth
}
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
list_c(BundledMessages))
}
# Create list of vectors (one for each server) containing names of actually existing data.frames
ExistingRDSTables <- paste0("CCP.RDS.", OpalTableNames.Mapping) %>%
map(function(tablename)
{
if (!is.na(tablename))
{
unlist(dsBaseClient::ds.exists(x = tablename, datasources = DSConnections))
} else {
return(NULL)
}
}) %>%
set_names(paste0("CCP.RDS.", OpalTableNames.Mapping)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames == TRUE]))
# For every server, consolidate all existing Raw Data Set tables in one list object called "CCP.RawDataSet"
ExistingRDSTables %>%
iwalk(function(RDSTableNames, servername)
{
# Note: Tables within list 'CCP.RawDataSet' are named WITHOUT prefix 'CCP.RDS.'
dsFredaClient::ds.MakeList(ObjectNames = setNames(object = RDSTableNames,
nm = str_remove(RDSTableNames, "CCP.RDS.")),
OutputName = "CCP.RawDataSet",
DSConnections = DSConnections[servername])
})
if (RunAssignmentChecks == TRUE)
{
# Make sure assignment of CCP.RawDataSet was successful on all servers
ObjectStatus_RawDataSet <- dsFredaClient::ds.GetObjectStatus(ObjectName = "CCP.RawDataSet",
DSConnections = DSConnections)
# Add info about CCP.RawDataSet assignment to Messages
Messages$Assignment <- c(Messages$Assignment,
ObjectStatus_RawDataSet$ObjectValidity)
}
dsFredaClient::ds.PrepareRawData(RawDataSetName = "CCP.RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
FeatureNameDictionary = list(GeneralCondition = c("_id" = "GeneralConditionID"),
OtherClassification = c("_id" = "OtherClassificationID"),
Surgery = c("OPS-Version" = "OPSVersion"),
TherapyRecommendation = c("_id" = "TherapyRecommendationID")),
RunFuzzyStringMatching = FALSE,
CompleteCharacterConversion = FALSE,
CurateFeatureNames = TRUE,
DSConnections = DSConnections)
rlang::last_trace()
dsFredaClient::ds.PrepareRawData(RawDataSetName = "CCP.RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
FeatureNameDictionary = list(#GeneralCondition = c("_id" = "GeneralConditionID"),
#OtherClassification = c("_id" = "OtherClassificationID"),
Surgery = c("OPS-Version" = "OPSVersion")),
#TherapyRecommendation = c("_id" = "TherapyRecommendationID")),
RunFuzzyStringMatching = FALSE,
CompleteCharacterConversion = FALSE,
CurateFeatureNames = TRUE,
DSConnections = DSConnections)
dsFredaClient::ds.PrepareRawData(RawDataSetName = "CCP.RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
FeatureNameDictionary = list(),#GeneralCondition = c("_id" = "GeneralConditionID"),
#OtherClassification = c("_id" = "OtherClassificationID"),
#Surgery = c("OPS-Version" = "OPSVersion")),
#TherapyRecommendation = c("_id" = "TherapyRecommendationID")),
RunFuzzyStringMatching = FALSE,
CompleteCharacterConversion = FALSE,
CurateFeatureNames = TRUE,
DSConnections = DSConnections)
dsFredaClient::ds.PrepareRawData(RawDataSetName = "CCP.RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
FeatureNameDictionary = list(GeneralCondition = c("_id" = "GeneralConditionID")),
#OtherClassification = c("_id" = "OtherClassificationID"),
#Surgery = c("OPS-Version" = "OPSVersion")),
#TherapyRecommendation = c("_id" = "TherapyRecommendationID")),
RunFuzzyStringMatching = FALSE,
CompleteCharacterConversion = FALSE,
CurateFeatureNames = TRUE,
DSConnections = DSConnections)
dsFredaClient::ds.PrepareRawData(RawDataSetName = "CCP.RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
FeatureNameDictionary = list(#GeneralCondition = c("_id" = "GeneralConditionID")),
OtherClassification = c("_id" = "OtherClassificationID")),
#Surgery = c("OPS-Version" = "OPSVersion")),
#TherapyRecommendation = c("_id" = "TherapyRecommendationID")),
RunFuzzyStringMatching = FALSE,
CompleteCharacterConversion = FALSE,
CurateFeatureNames = TRUE,
DSConnections = DSConnections)
# Loop through all participating servers
for (i in 1:length(ServerNames))
{
# Create data.frame containing mapping from Opal DB table names to R object names
OpalDBToR <- OpalDBInfo$OpalTables.Required %>%
filter(Server == ServerNames[i],
IsAvailable == TRUE,
IsRequired == TRUE) %>%
mutate(RTableName = case_when(OpalTableName.Generic %in% names(OpalTableNames.Mapping) ~ paste0("CCP.RDS.", OpalTableNames.Mapping[OpalTableName.Generic]),
.default = paste0("CCP.RDS.", OpalTableName.Generic)))
# Loop through available Opal DB tables and assign their content to objects (data.frames) in R session
for (j in 1:nrow(OpalDBToR))
{
DSI::datashield.assign.table(conns = DSConnections[[i]],
symbol = OpalDBToR$RTableName[j],
table = OpalDBToR$OpalTableName[j],
id.name = "_id")
# Add message about Opal data base to R session mapping
Messages$Assignment <- c(Messages$Assignment,
Info = paste0("Server '", names(DSConnections)[i], "': Mapped Opal table '", OpalDBToR$OpalTableName[j], "' to data.frame '", OpalDBToR$RTableName[j], "'."))
}
}
if (RunAssignmentChecks == TRUE)
{
BundledMessages <- list()
# Loop through all tables to get info about assignment on servers
for(tablename in OpalTableNames.Mapping)
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- dsFredaClient::ds.GetObjectStatus(ObjectName = paste0("CCP.RDS.", tablename),
DSConnections = DSConnections)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table["ObjectValidity"])   # Must select list element 'ObjectValidity' this way to keep naming of vector and thus class 'Success', 'Warning' and so forth
}
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
list_c(BundledMessages))
}
# Create list of vectors (one for each server) containing names of actually existing data.frames
ExistingRDSTables <- paste0("CCP.RDS.", OpalTableNames.Mapping) %>%
map(function(tablename)
{
if (!is.na(tablename))
{
unlist(dsBaseClient::ds.exists(x = tablename, datasources = DSConnections))
} else {
return(NULL)
}
}) %>%
set_names(paste0("CCP.RDS.", OpalTableNames.Mapping)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames == TRUE]))
# For every server, consolidate all existing Raw Data Set tables in one list object called "CCP.RawDataSet"
ExistingRDSTables %>%
iwalk(function(RDSTableNames, servername)
{
# Note: Tables within list 'CCP.RawDataSet' are named WITHOUT prefix 'CCP.RDS.'
dsFredaClient::ds.MakeList(ObjectNames = setNames(object = RDSTableNames,
nm = str_remove(RDSTableNames, "CCP.RDS.")),
OutputName = "CCP.RawDataSet",
DSConnections = DSConnections[servername])
})
if (RunAssignmentChecks == TRUE)
{
# Make sure assignment of CCP.RawDataSet was successful on all servers
ObjectStatus_RawDataSet <- dsFredaClient::ds.GetObjectStatus(ObjectName = "CCP.RawDataSet",
DSConnections = DSConnections)
# Add info about CCP.RawDataSet assignment to Messages
Messages$Assignment <- c(Messages$Assignment,
ObjectStatus_RawDataSet$ObjectValidity)
}
dsFredaClient::ds.PrepareRawData(RawDataSetName = "CCP.RawDataSet",
Module = "CCP",
RDSTableNames = dsCCPhosClient::Meta.Tables$TableName.Curated,
FeatureNameDictionary = list(),#GeneralCondition = c("_id" = "GeneralConditionID")),
#OtherClassification = c("_id" = "OtherClassificationID")),
#Surgery = c("OPS-Version" = "OPSVersion")),
#TherapyRecommendation = c("_id" = "TherapyRecommendationID")),
RunFuzzyStringMatching = TRUE,
CompleteCharacterConversion = FALSE,
CurateFeatureNames = TRUE,
DSConnections = DSConnections)
library(dplyr)
library(usethis)
Meta.ADS <- dsCCPhos::Meta.ADS
Meta.Tables <- dsCCPhos::Meta.Tables
Meta.Features <- dsCCPhos::Meta.Features
Meta.Values <- dsCCPhos::Meta.Values
Set.DataHarmonization <- dsCCPhos::Set.DataHarmonization
Set.DiagnosisAssociation <- dsCCPhos::Set.DiagnosisAssociation
Set.DiagnosisRedundancy <- dsCCPhos::Set.DiagnosisRedundancy
Set.Dictionary <- dsCCPhos::Set.Dictionary
Set.FeatureObligations <- dsCCPhos::Set.FeatureObligations
Set.FeatureTracking <- dsCCPhos::Set.FeatureTracking
Set.FuzzyStringMatching <- dsCCPhos::Set.FuzzyStringMatching
Set.TransformativeExpressions <- dsCCPhos::Set.TransformativeExpressions
# Add feature to 'Meta.ADS' indicating if a feature should be part of an "order list" that can be passed to dsFredaClient::GetExplorationData()
Meta.ADS <- Meta.ADS %>%
mutate(ExploreRoutinely = case_when(TableName == "Events" & FeatureName %in% c("EventClass",
"EventSubclass") ~ TRUE,
TableName == "Diagnosis" & FeatureName %in% c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp") ~ TRUE,
TableName == "Patient" & FeatureName %in% c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses") ~ TRUE,
.default = FALSE))
use_data(Meta.ADS, overwrite = TRUE)
use_data(Meta.Tables, overwrite = TRUE)
use_data(Meta.Features, overwrite = TRUE)
use_data(Meta.Values, overwrite = TRUE)
use_data(Set.DataHarmonization, overwrite = TRUE)
use_data(Set.DiagnosisAssociation, overwrite = TRUE)
use_data(Set.DiagnosisRedundancy, overwrite = TRUE)
use_data(Set.Dictionary, overwrite = TRUE)
use_data(Set.FeatureObligations, overwrite = TRUE)
use_data(Set.FeatureTracking, overwrite = TRUE)
use_data(Set.FuzzyStringMatching, overwrite = TRUE)
use_data(Set.TransformativeExpressions, overwrite = TRUE)
devtools::load_all(".")
library(dsBaseClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse")
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "CCP.RawDataSet",
Settings = NULL,
OutputName = "CCP.CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CCP.CuratedDataSet",
OutputName = "CCP.AugmentationOutput")
Messages <- ds.JoinTables(TableNameA = "CCP.ADS.Patient",
TableNameB = "CCP.ADS.Diagnosis",
ByStatement = "PatientID",
OutputName = "AnalysisDataSet")
TestCrossTab <- ds.GetCrossTab(TableName = "CCP.ADS.Patient",
FeatureNames = c("Sex", "LastVitalStatus", "CountDiagnoses"),
RemoveNA = TRUE)
TestCrossTab$CrossTab$All
View(TestCrossTab$CrossTab$All)
CohortDescription <- ds.GetCohortDescription(DataSetName = "CCP.AugmentedDataSet",
Stage = "Augmented")
