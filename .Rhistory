{
MargCountColumn <- sym(paste0("MargCount.", featurename))
IsMaskedColumn <- sym(paste0("IsMasked.MargCount.", featurename))
CrossTab.Separate <- CrossTab.Separate %>%
group_by(across(c(Server, all_of(featurename)))) %>%
fill(!!MargCountColumn, .direction = "downup") %>%
ungroup() %>%
mutate(!!MargCountColumn := if_else(is.na(!!MargCountColumn) & (is.na(!!IsMaskedColumn) | !!IsMaskedColumn == FALSE),
0,
!!MargCountColumn))
}
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
CrossTab.Separate <- CrossTab.Separate %>%
expand(Server, Sex, CountDiagnoses) %>%      # This will harmonize the extent of value combinations to facilitate further function logic
left_join(CrossTab.Separate, by = join_by(Server, Sex, CountDiagnoses)) %>%
mutate(across(all_of(FeatureNames),      # Turn NAs into character for syntax reasons (later group_by not working properly otherwise)
~ if_else(is.na(.x), "<NA>", .x))) %>%
mutate(Count = if_else(is.na(Count) & (is.na(IsMasked.Count) | IsMasked.Count == FALSE),      # Turn NAs in 'Count' into 0, if they do not stand for a value that has been masked by servers
0,
Count))
# Go through 'FeatureNames' for consecutive grouping and fill operation to complete marginal counts
for (featurename in FeatureNames)
{
MargCountColumn <- sym(paste0("MargCount.", featurename))
IsMaskedColumn <- sym(paste0("IsMasked.MargCount.", featurename))
CrossTab.Separate <- CrossTab.Separate %>%
group_by(across(c(Server, featurename))) %>%
fill(!!MargCountColumn, .direction = "downup") %>%
ungroup() %>%
mutate(!!MargCountColumn := if_else(is.na(!!MargCountColumn) & (is.na(!!IsMaskedColumn) | !!IsMaskedColumn == FALSE),
0,
!!MargCountColumn))
}
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
CrossTab.Separate <- CrossTab.Separate %>%
expand(Server, Sex, CountDiagnoses) %>%      # This will harmonize the extent of value combinations to facilitate further function logic
left_join(CrossTab.Separate, by = join_by(Server, Sex, CountDiagnoses)) %>%
mutate(across(all_of(FeatureNames),      # Turn NAs into character for syntax reasons (later group_by not working properly otherwise)
~ if_else(is.na(.x), "<NA>", .x))) %>%
mutate(Count = if_else(is.na(Count) & (is.na(IsMasked.Count) | IsMasked.Count == FALSE),      # Turn NAs in 'Count' into 0, if they do not stand for a value that has been masked by servers
0,
Count))
# Go through 'FeatureNames' for consecutive grouping and fill operation to complete marginal counts
for (featurename in FeatureNames)
{
MargCountColumn <- sym(paste0("MargCount.", featurename))
IsMaskedColumn <- sym(paste0("IsMasked.MargCount.", featurename))
CrossTab.Separate <- CrossTab.Separate %>%
group_by(across(c(Server, all_of(featurename)))) %>%
fill(!!MargCountColumn, .direction = "downup") %>%
ungroup() %>%
mutate(!!MargCountColumn := if_else(is.na(!!MargCountColumn) & (is.na(!!IsMaskedColumn) | !!IsMaskedColumn == FALSE),
0,
!!MargCountColumn))
}
CrossTab.Cumulated <- CrossTab.Separate %>%
group_by(across(all_of(FeatureNames))) %>%
summarize(Server = "All",
Count = sum(Count, na.rm = TRUE))
CrossTab.Cumulated <- CrossTab.Separate %>%
group_by(across(all_of(FeatureNames))) %>%
summarize(Server = "All",
Count = sum(Count, na.rm = TRUE))
CrossTab.Cumulated <- CrossTab.Separate %>%
group_by(across(all_of(FeatureNames))) %>%
summarize(across(c("Count", starts_with("MarginalCount")),
~ sum(.x, na.rm = TRUE)))
CrossTab.Cumulated <- CrossTab.Separate %>%
group_by(across(all_of(FeatureNames))) %>%
summarize(across(c("Count", starts_with("MargCount.")),
~ sum(.x, na.rm = TRUE))) %>%
as.data.frame()
CrossTab <- CrossTab.Cumulated %>%
bind_rows(CrossTab.Separate) %>%
relocate(Server, .before = 1)
CrossTab.Cumulated <- CrossTab.Separate %>%
group_by(across(all_of(FeatureNames))) %>%
summarize(Server = "All",
across(c("Count", starts_with("MargCount.")),
~ sum(.x, na.rm = TRUE))) %>%
ungroup() %>%
as.data.frame()
CrossTab <- CrossTab.Cumulated %>%
bind_rows(CrossTab.Separate) %>%
relocate(Server, .before = 1)
CrossTab.Cumulated <- CrossTab.Separate %>%
group_by(across(all_of(FeatureNames))) %>%
summarize(Server = "All",
across(c("Count", starts_with("MargCount.")),
~ sum(.x, na.rm = TRUE)),
across(starts_with("IsMasked."),
~ sum(.x == TRUE, na.rm = TRUE),
.names = "ServersWithMaskedCounts.{.col}")) %>%
rename_with(.cols = starts_with("ServersWithMaskedCounts.IsMasked."),
.fn = ~ str_remove(.x, "IsMasked.")) %>%
ungroup() %>%
as.data.frame()
CrossTab <- CrossTab.Cumulated %>%
bind_rows(CrossTab.Separate) %>%
relocate(Server, .before = 1)
?loglin
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(RelFreq = Count / sum(Count, na.rm = TRUE), .after = Count)
# Bind server-specific and cumulated CrossTabs together
CrossTab <- CrossTab.Cumulated %>%
bind_rows(CrossTab.Separate) %>%
relocate(Server, .before = 1)
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(RelFreq = Count / sum(Count, na.rm = TRUE), .after = Count) %>%
ungroup()
for (featurename in FeatureNames)
{
MargCountColumn <- sym(paste0("MargCount.", featurename))
MargRelFreqColumn <- sym(paste0("MargRelFreq.", featurename))
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(!!MargRelFreqColumn := !!MargCountColumn / sum(!!MargCountColumn, na.rm = TRUE)) %>%
ungroup()
}
# Bind server-specific and cumulated CrossTabs together
CrossTab <- CrossTab.Cumulated %>%
bind_rows(CrossTab.Separate) %>%
relocate(Server, .before = 1)
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(RelFreq = Count / sum(Count, na.rm = TRUE), .after = Count) %>%
ungroup()
for (featurename in FeatureNames)
{
MargCountColumn <- sym(paste0("MargCount.", featurename))
MargRelFreqColumn <- sym(paste0("MargRelFreq.", featurename))
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(!!MargRelFreqColumn := !!MargCountColumn / sum(!!MargCountColumn, na.rm = TRUE),
.after = !!MargCountColumn) %>%
ungroup()
}
View(CrossTab.Cumulated)
# Bind server-specific and cumulated CrossTabs together
CrossTab <- CrossTab.Cumulated %>%
bind_rows(CrossTab.Separate) %>%
relocate(Server, .before = 1) %>%
group_by(Server) %>%
arrange(across(all_of(FeatureNames),
~ .x == "<NA>"))
?arrange
# Bind server-specific and cumulated CrossTabs together
CrossTab <- CrossTab.Cumulated %>%
bind_rows(CrossTab.Separate) %>%
relocate(Server, .before = 1) %>%
group_by(Server) %>%
arrange(across(all_of(FeatureNames),
~ .x == "<NA>"),
.by_group = TRUE) %>%
ungroup()
# First calculate the Joint Relative Frequencies for
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(RelFreq = Count / sum(Count, na.rm = TRUE), .after = Count) %>%
ungroup()
# Then calculate Marginal Relative Frequencies
for (featurename in FeatureNames)
{
MargCountColumn <- sym(paste0("MargCount.", featurename))
MargRelFreqColumn <- sym(paste0("MargRelFreq.", featurename))
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(!!MargRelFreqColumn := !!MargCountColumn / sum(!!MargCountColumn, na.rm = TRUE),
.after = !!MargCountColumn) %>%
ungroup()
}
PrepareTable <- CrossTab.Cumulated %>%
select(c(all_of(FeatureNames), "Count")) %>%
filter(if_all(all_of(FeatureNames), ~ !is.na(.)))
View(PrepareTable)
TableObject <- xtabs(formula = reformulate(termlabels = FeatureNames,
response = "Count"),
data = PrepareTable)
ChiSq <- chisq.test(x = TableObject)
# Create data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("ChiSq.PValue") %>%
list_rbind(names_to = "Server")
# Create data.frame from ServerReturns
ChiSQ.PValue.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("ChiSq.PValue")
View(ChiSQ.PValue.Separate)
?expand
library(dsBaseClient)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
?expand
devtools::load_all(".")
Test <- ds.GetCohortDescription()
Test
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "CountDiagnoses"))
?join_by
devtools::load_all(".")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "CountDiagnoses"))
devtools::load_all(".")
TableName <- "ADS_Patient"
FeatureNames <- c("Sex", "CountDiagnoses")
DSConnections <- CCPConnections
rm(CCPConnections)
# --- For Testing Purposes ---
# TableName <- "ADS_Patient"
# FeatureNames <- c("Sex", "CountDiagnoses")
RemoveNA = FALSE
# --- Argument assertions ---
assert_that(is.string(TableName),
is.character(FeatureNames),
is.logical(RemoveNA))
# Get (maximum) number of unique values for selected features and multiply them to calculate the projected number of value combinations
ProjectedCombinations <- sapply(FeatureNames, function(featurename)
{ ds.GetFeatureInfo(TableName = TableName,
FeatureName = featurename) %>%
pull(CountUniqueValues) %>%
max(na.rm = TRUE)
}) %>%
prod(na.rm = TRUE)
# Paste elements of 'FeatureNames' together and encode the resulting string to make it passable through DSI
FeatureNamesString <- paste0(FeatureNames, collapse = ", ") %>%
.encode_tidy_eval(.get_encode_dictionary())
# Call server-side function
ServerReturns <- DSI::datashield.aggregate(conns = DSConnections,
expr = call("GetCrossTabDS",
TableName.S = TableName,
FeatureNames.S = FeatureNamesString,
RemoveNA.S = RemoveNA))
# Create coherent data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(all_of(c("Server", FeatureNames))) %>%      # This will harmonize the extent of value combinations to facilitate further function logic
left_join(CrossTab.Separate, by = join_by(!!!syms(c("Server", FeatureNames)))) %>%
mutate(across(all_of(FeatureNames),      # Turn NAs into character for syntax reasons (later group_by not working properly otherwise)
~ if_else(is.na(.x), "<NA>", .x))) %>%
mutate(JointCount = if_else(is.na(JointCount) & (is.na(IsMasked.JointCount) | IsMasked.JointCount == FALSE),      # Turn NAs in 'JointCount' into 0, if they do not stand for a value that has been masked by servers
0,
JointCount))
# Create coherent data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(all_of(c("Server", FeatureNames)))     # This will harmonize the extent of value combinations to facilitate further function logic
View(CrossTab.Separate)
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(c(Server, all_of(FeatureNames)))     # This will harmonize the extent of value combinations to facilitate further function logic
# Create coherent data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
View(CrossTab.Separate)
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(c(Server, all_of(FeatureNames)))     # This will harmonize the extent of value combinations to facilitate further function logic
?expand
# Create coherent data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(Server, all_of(FeatureNames))     # This will harmonize the extent of value combinations to facilitate further function logic
# Create coherent data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(all_of(FeatureNames))     # This will harmonize the extent of value combinations to facilitate further function logic
# Create coherent data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(!!!syms(FeatureNames))     # This will harmonize the extent of value combinations to facilitate further function logic
# Create coherent data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(!!!syms(c("Server", FeatureNames)))     # This will harmonize the extent of value combinations to facilitate further function logic
# Create coherent data.frame from ServerReturns
CrossTab.Separate <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("CrossTab") %>%
list_rbind(names_to = "Server")
# Process CrossTab.Separate
CrossTab.Separate <- CrossTab.Separate %>%
expand(!!!syms(c("Server", FeatureNames))) %>%     # This will harmonize the extent of value combinations to facilitate further function logic
left_join(CrossTab.Separate, by = join_by(!!!syms(c("Server", FeatureNames)))) %>%
mutate(across(all_of(FeatureNames),      # Turn NAs into character for syntax reasons (later group_by not working properly otherwise)
~ if_else(is.na(.x), "<NA>", .x))) %>%
mutate(JointCount = if_else(is.na(JointCount) & (is.na(IsMasked.JointCount) | IsMasked.JointCount == FALSE),      # Turn NAs in 'JointCount' into 0, if they do not stand for a value that has been masked by servers
0,
JointCount))
# Go through 'FeatureNames' for consecutive grouping and fill operation to complete marginal counts where they are missing
for (featurename in FeatureNames)
{
MargCountColumn <- sym(paste0("MargCount.", featurename))
IsMaskedColumn <- sym(paste0("IsMasked.MargCount.", featurename))
CrossTab.Separate <- CrossTab.Separate %>%
group_by(across(c(Server, all_of(featurename)))) %>%
fill(!!MargCountColumn, .direction = "downup") %>%
ungroup() %>%
mutate(!!MargCountColumn := if_else(is.na(!!MargCountColumn) & (is.na(!!IsMaskedColumn) | !!IsMaskedColumn == FALSE),      # Turn NAs in MarginalCounts into 0, if they do not stand for a value that has been masked by servers
0,
!!MargCountColumn))
}
# Create cumulated CrossTab
CrossTab.Cumulated <- CrossTab.Separate %>%
group_by(across(all_of(FeatureNames))) %>%
summarize(Server = "All",
across(c("JointCount", starts_with("MargCount.")),
~ sum(.x, na.rm = TRUE)),
across(starts_with("IsMasked."),
~ sum(.x == TRUE, na.rm = TRUE),
.names = "ServersWithMaskedCounts.{.col}")) %>%
rename_with(.cols = starts_with("ServersWithMaskedCounts.IsMasked."),
.fn = ~ str_remove(.x, "IsMasked.")) %>%
ungroup() %>%
as.data.frame()
# Bind server-specific and cumulated CrossTabs together
CrossTab <- CrossTab.Cumulated %>%
bind_rows(CrossTab.Separate) %>%
relocate(Server, .before = 1) %>%
group_by(Server) %>%
arrange(across(all_of(FeatureNames),   # For cosmetic reasons put rows with '<NA>' values in the feature columns at the bottom
~ .x == "<NA>"),
.by_group = TRUE) %>%
ungroup()
# First calculate the Joint Relative Frequencies for
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(JointRelFreq = JointCount / sum(JointCount, na.rm = TRUE), .after = JointCount) %>%
ungroup()
# Then calculate Marginal Relative Frequencies
for (featurename in FeatureNames)
{
MargCountColumn <- sym(paste0("MargCount.", featurename))
MargRelFreqColumn <- sym(paste0("MargRelFreq.", featurename))
CrossTab <- CrossTab %>%
group_by(Server) %>%
mutate(!!MargRelFreqColumn := !!MargCountColumn / sum(!!MargCountColumn, na.rm = TRUE),
.after = !!MargCountColumn) %>%
ungroup()
}
ChiSquaredTest <- NULL
if (length(FeatureNames) == 2)
{
# Get server-specific ChiSq.PValues from ServerReturns
ChiSquaredTest <- ServerReturns %>%
list_transpose(simplify = FALSE) %>%
pluck("ChiSq.PValue")
# Select relevant columns from CrossTab.Cumulated as preparation for conversion into object of class 'table'
PrepareTable <- CrossTab.Cumulated %>%
select(c(all_of(FeatureNames), "JointCount")) %>%
filter(if_all(all_of(FeatureNames), ~ !is.na(.)))
# Get object of class 'table' (chisq.test() needs a 'table' as argument)
TableObject <- xtabs(formula = reformulate(termlabels = FeatureNames,
response = "JointCount"),
data = PrepareTable)
# Perform Chi-Squared-Test
ChiSq.Cumulated <- chisq.test(x = TableObject)
# Bind cumulated Chi Squared test result with list of server-specific p-values
ChiSquaredTest <- c(list(All = ChiSq.Cumulated,
ChiSquaredTest))
}
rm(list=ls())
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "CountDiagnoses"))
View(Test$CrossTab)
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"))
View(Test$CrossTab)
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"),
RemoveNA = TRUE)
Test$CrossTab
View(Test$CrossTab)
devtools::load_all(".")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"),
RemoveNA = TRUE)
devtools::load_all(".")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus"),
RemoveNA = TRUE)
View(Test$CrossTab$All)
devtools::load_all(".")
Test <- ds.GetCrossTab(TableName = "ADS_Patient",
FeatureNames = c("Sex", "LastVitalStatus", "CountDiagnoses"),
RemoveNA = TRUE)
View(Test$ChiSquaredTest)
View(Test$CrossTab$All)
ds.names("ADS_Diagnosis")
ds.MutateTable(TableName = "ADS_Diagnosis",
MutateExpression = "UICCStageClassification = case_when(str_starts(TNM_T, '3') ~ 'III', .default = '<NA>')")
ds.MutateTable(TableName = "ADS_Diagnosis",
MutateExpression = "UICCStageClassification = case_when(str_starts(TNM_T, '3') ~ 'III', .default = '<NA>')",
OutputName = "TestUICC")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
ds.MutateTable(TableName = "ADS_Diagnosis",
MutateExpression = "UICCStageClassification = case_when(str_starts(TNM_T, '3') ~ 'III', .default = '<NA>')",
OutputName = "TestUICC")
ds.names("TestUICC")
devtools::load_all(".")
