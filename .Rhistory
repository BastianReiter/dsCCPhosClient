})
# Turn list into data.frame
df_TableCheck <- do.call(rbind, ls_TableCheck)
View(df_TableCheck)
# For testing purposes
DataSources <- CCPConnections
ProjectName <- "Virtual"
# Get server names
ServerNames <- names(DataSources)
# Get table names of CCP core data set
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
datashield.table_status(conns = CCPConnections,)
datashield.table_status(conns = CCPConnections, table = "patient")
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = CCPConnections)
RequiredTableAvailability <- tibble(TableName = dsCCPhosClient::Meta_TableNames$TableName_Raw)
for (i in 1:length(ServerNames))
{
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := TableName %in% TableAvailability[[ServerNames[i]]])
}
View(RequiredTableAvailability)
?datashield.assign
DSI::datashield.logout(CCPConnections)
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Total.RData")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = CCPTestData_Total,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
MessagesServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# For testing purposes
DataSources <- CCPConnections
ProjectName <- "Virtual"
# Initiate output messaging objects
Messages <- list()
Messages$TableAvailability <- character()
Messages$Assignment <- character()
# Get server names
ServerNames <- names(DataSources)
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = CCPConnections)
RequiredTableAvailability <- tibble(TableName = dsCCPhosClient::Meta_TableNames$TableName_Raw)
for (i in 1:length(ServerNames))
{
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := TableName %in% TableAvailability[[ServerNames[i]]])
}
RequiredTableAvailability <- RequiredTableAvailability %>%
rowwise() %>%
mutate(IsAvailableEverywhere = all(c_across(ServerNames) == TRUE),
NotAvailableAt = ifelse(IsAvailableEverywhere == FALSE,
paste0(ServerNames[c_across(ServerNames) == FALSE], collapse = ", "),
NA)) %>%
ungroup()
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = CCPConnections)
RequiredTableAvailability <- tibble(TableName = dsCCPhosClient::Meta_TableNames$TableName_Raw)
for (i in 1:length(ServerNames))
{
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := TableName %in% TableAvailability[[ServerNames[i]]])
}
RequiredTableAvailability <- RequiredTableAvailability %>%
rowwise() %>%
mutate(IsAvailableEverywhere = all(c_across(all_of(ServerNames) == TRUE)),
NotAvailableAt = ifelse(IsAvailableEverywhere == FALSE,
paste0(ServerNames[c_across(ServerNames) == FALSE], collapse = ", "),
NA)) %>%
ungroup()
RequiredTableAvailability <- RequiredTableAvailability %>%
rowwise() %>%
mutate(IsAvailableEverywhere = all(c_across(all_of(ServerNames)) == TRUE),
NotAvailableAt = ifelse(IsAvailableEverywhere == FALSE,
paste0(ServerNames[c_across(ServerNames) == FALSE], collapse = ", "),
NA)) %>%
ungroup()
View(RequiredTableAvailability)
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = CCPConnections)
RequiredTableAvailability <- tibble(TableName = dsCCPhosClient::Meta_TableNames$TableName_Raw)
for (i in 1:length(ServerNames))
{
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := TableName %in% TableAvailability[[ServerNames[i]]])
}
RequiredTableAvailability <- RequiredTableAvailability %>%
rowwise() %>%
mutate(IsAvailableEverywhere = all(c_across(all_of(ServerNames)) == TRUE),
NotAvailableAt = ifelse(IsAvailableEverywhere == FALSE,
paste0(ServerNames[c_across(all_of(ServerNames)) == FALSE], collapse = ", "),
NA)) %>%
ungroup()
View(RequiredTableAvailability)
# Compile output message concerning one table each and add it to Messages
for (i in 1:nrow(RequiredTableAvailability))
{
Row <- RequiredTableAvailability[i, ]
Message <- paste0("Table ",
Row$TableName,
ifelse(Row$IsAvailableEverywhere == TRUE,
" is available on all servers!",
paste0(" is not available on ", Row$NotAvailableAt)))
Messages$TableAvailability <- c(Messages$TableAvailability,
Message)
}
# Get table names
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
# Assign tables from Opal DB to object symbols in R session
for(i in 1:length(CCPTableNames_Raw))
{
datashield.assign(conns = CCPConnections,
symbol = paste0("RDS_", CCPTableNames_Curated[i]),
value = ifelse(ProjectName == "Virtual",
CCPTableNames_Raw[i],
paste0(ProjectName, ".", CCPTableNames_Raw[i])),
id.name = "_id")
}
# Consolidate all raw data set tables in one list object called "RawDataSet"
ds.list(x = paste0("RDS_", CCPTableNames_Curated),
newobj = "RawDataSet",
datasources = CCPConnections)
# Make sure assignment was successful on all servers
ObjectInfo_RawDataSet <- ds.GetObjectInfo(ObjectName = "RawDataSet",
DataSources = CCPConnections)
Messages$Assignment <- c(Messages$Assignment,
paste0(unlist(ObjectInfo_RawDataSet), collapse = "\n"))
# Additionally to return, print messages on console
cat(paste0(unlist(Messages), collapse = "\n"))
devtools::load_all(".")
LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
CCPhosApp::StartCCPhosApp(CCPConnections = CCPConnections,
CCPhosData = NULL)
datashield.errors()
devtools::load_all(".")
devtools::load_all(".")
library(dsCCPhosClient)
?sample
devtools::load_all(".")
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Total.RData")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = CCPTestData_Total,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
CCPTestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = CCPTestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
CCPConnections <- ConnectToVirtualCCP(CCPTestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
CCPTestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
CCPTestData <- TestData
NumberOfSites <- 3
NumberOfPatientsPerSite <- 300
# Check value of NumberOfSites
if (NumberOfSites > 26) { stop("Maximum value for 'NumberOfSites' is 26.", call. = FALSE) }
# Determine names of virtual sites (here: SiteA, SiteB, ...)
SiteNames <- paste0("Site", LETTERS[1:NumberOfSites])
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
# Calculate auxiliary variables
AllPatientIDs <- CCPTestData$Patient$"_id"
# Calculate auxiliary variables
AllPatientIDs <- CCPTestData$patient$"_id"
CountTotalPatients <- n_distinct(AllPatientIDs)
PatientsPerSite <- floor(CountTotalPatients / NumberOfSites)
# Check if NumberOfPatientsPerSite has a feasible value and adopt it for PatientsPerSite
if (!is.null(NumberOfPatientsPerSite))
{
if (NumberOfPatientsPerSite > PatientsPerSite)
{
stop(paste0("Not enough patients in test data for entered 'NumberOfPatientsPerSite'. Proposal value is equal or lower than ", PatientsPerSite, ". Alternatively reduce 'NumberOfSites'."), call. = FALSE)
} else {
PatientsPerSite <- NumberOfPatientsPerSite
}
}
devtools::load_all(".")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
devtools::load_all(".")
DSI::datashield.logout(CCPConnections)
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
library(devtools)
# Linked to dataSHIELD ASSIGN functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.AugmentData.R")
# use_r("ds.CurateData.R")
use_r("ds.ExtractFromList.R")
devtools::load_all(".")
library(dsCCPhosClient)
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
dsCCPhosClient::ds.ExtractFromList(ListName = "CurationOutput",
ObjectName = "CuratedDataSet",
DataSources = CCPConnections)
datashield.errors()
library(readxl)
library(usethis)
Meta_ServerRequirements <- list(#--- Data frame containing names of required packages ---
RequiredPackages = data.frame(PackageName = character()) %>%
add_row(PackageName = "dsBase") %>%
add_row(PackageName = "dsCCPhos"),
#--- Data frame containing names and types of required functions ---
RequiredFunctions = data.frame(FunctionName = character(),
FunctionType = character()) %>%
add_row(FunctionName = "GetCurationReportDS", FunctionType = "aggregate") %>%
add_row(FunctionName = "AugmentDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "CurateDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "ExtractFromListDS", FunctionType = "assign") %>%
add_row(FunctionName = "UnpackAugmentedDataSetDS", FunctionType = "assign") %>%
add_row(FunctionName = "UnpackCuratedDataSetDS", FunctionType = "assign"))
library(dplyr)
library(readxl)
library(usethis)
Meta_ServerRequirements <- list(#--- Data frame containing names of required packages ---
RequiredPackages = data.frame(PackageName = character()) %>%
add_row(PackageName = "dsBase") %>%
add_row(PackageName = "dsCCPhos"),
#--- Data frame containing names and types of required functions ---
RequiredFunctions = data.frame(FunctionName = character(),
FunctionType = character()) %>%
add_row(FunctionName = "GetCurationReportDS", FunctionType = "aggregate") %>%
add_row(FunctionName = "AugmentDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "CurateDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "ExtractFromListDS", FunctionType = "assign") %>%
add_row(FunctionName = "UnpackAugmentedDataSetDS", FunctionType = "assign") %>%
add_row(FunctionName = "UnpackCuratedDataSetDS", FunctionType = "assign"))
# Save data in .rda-file and make it part of package
use_data(Meta_ServerRequirements, overwrite = TRUE)
devtools::load_all(".")
DSI::datashield.logout(CCPConnections)
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
dsCCPhosClient::ds.ExtractFromList(ListName = "CurationOutput",
ObjectName = "CuratedDataSet",
DataSources = CCPConnections)
devtools::load_all(".")
dsCCPhosClient::ds.ExtractFromList(ListName = "CurationOutput",
ObjectName = "CuratedDataSet",
DataSources = CCPConnections)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
Meta_ServerRequirements <- list(#--- Data frame containing names of required packages ---
RequiredPackages = data.frame(PackageName = character()) %>%
add_row(PackageName = "dsBase") %>%
add_row(PackageName = "dsCCPhos"),
#--- Data frame containing names and types of required functions ---
RequiredFunctions = data.frame(FunctionName = character(),
FunctionType = character()) %>%
add_row(FunctionName = "GetCurationReportDS", FunctionType = "aggregate") %>%
add_row(FunctionName = "AugmentDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "CurateDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "ExtractFromListDS", FunctionType = "assign"))
# Save data in .rda-file and make it part of package
use_data(Meta_ServerRequirements, overwrite = TRUE)
devtools::load_all(".")
devtools::load_all(".")
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Construct the the server-side function call
ServerCall <- call("CurateDataDS",
.RawDataSetName = RawDataSetName,
.RuleProfile_RawDataTransformation = RuleProfile_RawDataTransformation,
.RuleProfile_DiagnosisRedundancy = RuleProfile_DiagnosisRedundancy,
.RuleProfile_DiagnosisAssociation = RuleProfile_DiagnosisAssociation)
RawDataSetName = "RawDataSet"
RuleProfile_RawDataTransformation = "Default"
RuleProfile_DiagnosisRedundancy = "Default"
RuleProfile_DiagnosisAssociation = "Default"
# Construct the the server-side function call
ServerCall <- call("CurateDataDS",
.RawDataSetName = RawDataSetName,
.RuleProfile_RawDataTransformation = RuleProfile_RawDataTransformation,
.RuleProfile_DiagnosisRedundancy = RuleProfile_DiagnosisRedundancy,
.RuleProfile_DiagnosisAssociation = RuleProfile_DiagnosisAssociation)
ServerCall
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
library(devtools)
# Linked to dataSHIELD AGGREGATE functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ds.GetCurationReport.R")
# use_r("ds.GetObjectInfo.R")
use_r("ds.GetReportingObject.R")
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetReportingObject(ObjectName = "CurationReport",
DataSources = CCPConnections)
devtools::load_all(".")
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetReportingObject(ObjectName = "CurationReport",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetReportingObject(ObjectName = "CurationReport",
DataSources = CCPConnections)
CurationReport
