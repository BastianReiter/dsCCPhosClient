ServerColumns <- bind_cols(ServerColumns,
Column)
}
colnames(ServerColumns) <- ServerNames
View(ServerColumns)
Output <- bind_cols(Output,
ServerColumns)
View(Output)
ds.GetObjectInfo("RDS_Diagnosis", CCPConnections)
devtools::load_all(".")
rm(list=ls())
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
Test <- GetServerWorkspaceInfo(DataSources = CCPConnections)
?bind_cols
devtools::load_all(".")
Test <- GetServerWorkspaceInfo(DataSources = CCPConnections)
View(Test)
library(dsCCPhosClient)
GetServerWorkspaceInfo(DataSources = CCPConnections)
devtools::load_all(".")
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
GetServerWorkspaceInfo(DataSources = CCPConnections)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
datashield.errors()
GetServerWorkspaceInfo(DataSources = CCPConnections)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
library(dsCCPhosClient)
GetServerWorkspaceInfo(DataSources = CCPConnections)
datashield.symbols(conns = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get names of symbols (objects) in all server workspaces
ServerObjectNames <- DSI::datashield.symbols(conns = DataSources)
# Get all uniquely occurring object names across servers (although usually the set of symbol names should be the same on all servers)
UniqueObjectNames <- sort(unique(unlist(ServerObjectNames)))
UniqueObjectNames
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- bind_cols(Object = UniqueObjectNames,
Type = purrr::modify(UniqueObjectNames,
function(symbol) { dsBaseClient::ds.class(x = symbol,
datasources = DataSources)[[1]] }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
dsBaseClient::ds.class(x = "CuratedDataSet", datasources = DataSources)
dsBaseClient::ds.class(x = "CDS_BioSampling", datasources = DataSources)
DataSources[1]
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- bind_cols(Object = UniqueObjectNames,
Type = purrr::modify(UniqueObjectNames,
function(symbol) { dsBaseClient::ds.class(x = symbol,
datasources = DataSources[1]) }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
# Create tibble with object names and types (can't use mutate() because ds.class() does not work with vectors)
Output <- bind_cols(Object = UniqueObjectNames,
Type = purrr::modify(UniqueObjectNames,
function(symbol) { as.character(dsBaseClient::ds.class(x = symbol,
datasources = DataSources[1])) }))      # Note: The type definition is based on the object found on the first server (therefore '[[1]]')
Output
dsBaseClient::ds.class(x = "CDS_Diagnosis", datasources = DataSources)
devtools::load_all(".")
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages_UnpackingCDS <- dsCCPhosClient::ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CurationOutput",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# For testing purposes
CuratedDataSetName <- "CuratedDataSet"
OutputName <- "AugemntationOutput"
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
#Messages$Completion <- character()
Messages$Assignment <- list()
# Construct the server-side function call
ServerCall <- call("AugmentDataDS",
CuratedDataSetName.S = CuratedDataSetName)
# Execute the server-side function call
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
# Call helper function to check if assignment of AugmentationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = OutputName,
DataSources = DataSources))
AugmentationOutputObjects <- c("AugmentedDataSet",
"AugmentationReport",
"AugmentationMessages")
i <- 1
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# For testing purposes
CuratedDataSetName <- "CuratedDataSet"
OutputName <- "AugmentationOutput"
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
#Messages$Completion <- character()
Messages$Assignment <- list()
# Construct the server-side function call
ServerCall <- call("AugmentDataDS",
CuratedDataSetName.S = CuratedDataSetName)
# Execute the server-side function call
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
# Call helper function to check if assignment of AugmentationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = OutputName,
DataSources = DataSources))
AugmentationOutputObjects <- c("AugmentedDataSet",
"AugmentationReport",
"AugmentationMessages")
i <- 1
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
ServerCall
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
i <- 2
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
i <- 3
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
library(dsCCPhos)
i <- 2
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
library(dsCCPhosClient)
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
names(CurationReports)
names(CurationReports$SiteA)
names(CurationReports$SiteA$Transformation)
names(CurationReports[[1]]$Transformation)
names(CurationReports[1]$Transformation)
CurationReports[["SiteA"]]$Transformation[["Diagnosis"]]
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
ds.colnames(x = "ADS_Patients",
datasources = CCPConnections)
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections)
View(SampleStatistics)
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = Colors$MediumGrey,
"SiteA" = Colors$Primary,
"SiteB" = Colors$Secondary,
"SiteC" = Colors$Tertiary))
dsCCPhosClient::CCPhosColors
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = CCPhosColors$MediumGrey,
"SiteA" = CCPhosColors$Primary,
"SiteB" = CCPhosColors$Secondary,
"SiteC" = CCPhosColors$Tertiary))
View(TestPlot)
TestPlot
library(dsCCPhosClient)
devtools::load_all(".")
dsCCPhosClient::CCPSiteCredentials
devtools::load_all(".")
library(dsCCPhosClient)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = ,
Token = character())
library(devtools)
library(dplyr)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = ,
Token = character())
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://Sissy/",
Token = "Secret Token")
use_data(CCPSiteCredentials, overwrite = TRUE)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://Sissy/",
Token = "1234567890")
use_data(CCPSiteCredentials, overwrite = TRUE)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://Sissy/",
ProjectName = "CoolProject",
Token = "1234567890")
# Save data in .rda-file and make it part of package
use_data(CCPSiteCredentials, overwrite = TRUE)
dsCCPhosClient::CCPSiteCredentials
dsCCPhosClient::CCPSiteCredentials[SiteName == "Sissy",]
Test <- setNames(letters[1:5], nm = LETTERS[1:5])
Test
Test["D"]
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("CheckServerRequirements.R")
# use_r("ConnectToCCP.R")
# use_r("ConnectToVirtualCCP.R")
use_r("GetServerOpalDBInfo.R")
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteSpecifications <- tibble(SiteName = character(),
URL = character(),
ProjectName = character(),
Token = character())
# Add site "Sissy"
CCPSiteSpecifications <- add_row(CCPSiteSpecifications,
SiteName = "Sissy",
URL = "https://Sissy/",
ProjectName = "CoolProject",
Token = "1234567890")
# Save data in .rda-file and make it part of package
use_data(CCPSiteSpecifications, overwrite = TRUE)
devtools::load_all(".")
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
CCPConnections
CCPConnections[["SiteA"]]
CCPConnections["SiteA"]
library(dsCCPhosClient)
devtools::load_all(".")
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
devtools::load_all(".")
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
# For testing purposes
DataSources = CCPConnections
# For testing purposes
CCPSiteSpecifications = NULL
DataSources = CCPConnections
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = DataSources)
# Initiate data frame containing info about table availability
RequiredTableAvailability <- tibble(TableName = CCPTableNames_Raw)
for (i in 1:length(ServerNames))
{
# In case project is virtual, server Opal table names are just raw CCP table names
ServerTableNames <- CCPTableNames_Raw
# If project is not virtual, there can be server-specific project names and therefore server-specific Opal table names
if (!is.null(CCPSiteSpecifications))
{
# Get server-specific project name
ServerProjectName <- CCPSiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, ".", CCPTableNames_Raw)
}
# For every server, check if CCP raw data tables with site-specific correspondent names are existent in 'TableAvailability'
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := ServerTableNames %in% TableAvailability[[ServerNames[i]]])
}
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = DataSources)
# Initiate data frame containing info about table availability
RequiredTableAvailability <- tibble(TableName = CCPTableNames_Raw)
for (i in 1:length(ServerNames))
{
# In case project is virtual, server Opal table names are just raw CCP table names
ServerTableNames <- CCPTableNames_Raw
# If project is not virtual, there can be server-specific project names and therefore server-specific Opal table names
if (!is.null(CCPSiteSpecifications))
{
# Get server-specific project name
ServerProjectName <- CCPSiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, ".", CCPTableNames_Raw)
}
# For every server, check if CCP raw data tables with site-specific correspondent names are existent in 'TableAvailability'
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := ServerTableNames %in% TableAvailability[[ServerNames[i]]])
}
View(RequiredTableAvailability)
RequiredTableAvailability <- RequiredTableAvailability %>%
rowwise() %>%
mutate(IsAvailableEverywhere = all(c_across(all_of(ServerNames)) == TRUE),
NotAvailableAt = ifelse(IsAvailableEverywhere == FALSE,
paste0(ServerNames[c_across(all_of(ServerNames)) == FALSE], collapse = ", "),
NA)) %>%
ungroup()
View(RequiredTableAvailability)
devtools::load_all(".")
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
library(dsCCPhosClient)
?summarize
?dplyr::summarize
library(dsCCPhosClient)
library(dsCCPhosClient)
