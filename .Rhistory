TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetReportingObject(ObjectName = "CurationReport",
DataSources = CCPConnections)
devtools::load_all(".")
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetReportingObject(ObjectName = "CurationReport",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetReportingObject(ObjectName = "CurationReport",
DataSources = CCPConnections)
CurationReport
devtools::load_all(".")
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
Meta_ServerRequirements <- list(#--- Data frame containing names of required packages ---
RequiredPackages = data.frame(PackageName = character()) %>%
add_row(PackageName = "dsBase") %>%
add_row(PackageName = "dsCCPhos"),
#--- Data frame containing names and types of required functions ---
RequiredFunctions = data.frame(FunctionName = character(),
FunctionType = character()) %>%
add_row(FunctionName = "GetReportingObjectDS", FunctionType = "aggregate") %>%
add_row(FunctionName = "AugmentDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "CurateDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "ExtractFromListDS", FunctionType = "assign"))
# Save data in .rda-file and make it part of package
use_data(Meta_ServerRequirements, overwrite = TRUE)
library(dplyr)
library(readxl)
library(usethis)
Meta_ServerRequirements <- list(#--- Data frame containing names of required packages ---
RequiredPackages = data.frame(PackageName = character()) %>%
add_row(PackageName = "dsBase") %>%
add_row(PackageName = "dsCCPhos"),
#--- Data frame containing names and types of required functions ---
RequiredFunctions = data.frame(FunctionName = character(),
FunctionType = character()) %>%
add_row(FunctionName = "GetReportingObjectDS", FunctionType = "aggregate") %>%
add_row(FunctionName = "AugmentDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "CurateDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "ExtractFromListDS", FunctionType = "assign"))
# Save data in .rda-file and make it part of package
use_data(Meta_ServerRequirements, overwrite = TRUE)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetReportingObject(ObjectName = "CurationReport",
DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Monitor_Diagnosis)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Diagnosis)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Diagnosis)
length(CurationReports)
CurationReports[[2]]
Summary <- data.frame()
for (i in 1:length(CurationReports))
{
Summary <- Summary %>%
bind_rows(CurationReports[[i]])
}
length(CurationReports[[2]])
CurationReports[[2]][1]
CurationReports[[2]][[1]]
Summary <- data.frame()
for (i in 1:length(CurationReports))
{
for (j in 1:length(CurationReports[[1]]))
{
Summary <- Summary %>%
bind_rows(CurationReports[[i]][[j]])
}
}
View(Summary)
View(Summary)
Summary <- list()
for (i in 1:length(CurationReports[[1]]))      # Loop through all tables (Diagnosis, Histology, etc.)
{
SummaryOfTable <- data.frame()
for (j in 1:length(CurationReports))      # Loop through all servers
{
SummaryOfTable <- SummaryOfTable %>%
bind_rows(CurationReports[[j]][[i]])
}
SummaryOfTable <- SummaryOfTable %>%
group_by(Feature, Value, IsValueEligible) %>%
summarize(Raw = sum(Raw),
Transformed = sum(Transformed),
Final = sum(Final))
Summary <- c(Summary,
list(SummaryOfTable))
}
Summary <- list()
for (i in 1:length(CurationReports[[1]]))      # Loop through all tables (Diagnosis, Histology, etc.)
{
SummaryOfTable <- data.frame()
for (j in 1:length(CurationReports))      # Loop through all servers
{
SummaryOfTable <- SummaryOfTable %>%
bind_rows(CurationReports[[j]][[i]])
}
if (!is.null(SummaryOfTable))
{
SummaryOfTable <- SummaryOfTable %>%
group_by(Feature, Value, IsValueEligible) %>%
summarize(Raw = sum(Raw),
Transformed = sum(Transformed),
Final = sum(Final))
}
Summary <- c(Summary,
list(SummaryOfTable))
}
Test1 <- NULL
Test2 <- data.frame(x = 1:3, y = 4:6)
bind_rows(Test1, Test2)
Summary <- list()
for (i in 1:3)      # Loop through all tables (Diagnosis, Histology, etc.)
{
SummaryOfTable <- data.frame()
for (j in 1:length(CurationReports))      # Loop through all servers
{
SummaryOfTable <- SummaryOfTable %>%
bind_rows(CurationReports[[j]][[i]])
}
if (!is.null(SummaryOfTable))
{
SummaryOfTable <- SummaryOfTable %>%
group_by(Feature, Value, IsValueEligible) %>%
summarize(Raw = sum(Raw),
Transformed = sum(Transformed),
Final = sum(Final))
}
Summary <- c(Summary,
list(SummaryOfTable))
}
View(Summary)
Summary <- list()
for (i in 1:length(CurationReports[[1]]))      # Loop through all tables (Diagnosis, Histology, etc.)
{
SummaryOfTable <- data.frame()
for (j in 1:length(CurationReports))      # Loop through all servers
{
SummaryOfTable <- SummaryOfTable %>%
bind_rows(CurationReports[[j]][[i]])
}
# if (!is.null(SummaryOfTable))
# {
#     SummaryOfTable <- SummaryOfTable %>%
#                           group_by(Feature, Value, IsValueEligible) %>%
#                           summarize(Raw = sum(Raw),
#                                     Transformed = sum(Transformed),
#                                     Final = sum(Final))
# }
#
# Summary <- c(Summary,
#              list(SummaryOfTable))
}
nrow(Test1)
nrow(Test2)
Summary <- list()
for (i in 1:length(CurationReports[[1]]))      # Loop through all tables (Diagnosis, Histology, etc.)
{
SummaryOfTable <- data.frame()
for (j in 1:length(CurationReports))      # Loop through all servers
{
SummaryOfTable <- SummaryOfTable %>%
bind_rows(CurationReports[[j]][[i]])
}
if (nrow(SummaryOfTable) > 0)
{
SummaryOfTable <- SummaryOfTable %>%
group_by(Feature, Value, IsValueEligible) %>%
summarize(Raw = sum(Raw),
Transformed = sum(Transformed),
Final = sum(Final))
}
Summary <- c(Summary,
list(SummaryOfTable))
}
View(Summary)
names(Summary) <- names(CurationReports[[1]])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
names(CurationReports)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
names(CurationReports)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
names(CurationReports)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
names(CurationReports)
CurationReports[["SiteA"]][[3]]
CurationReports[["SiteA"]][[2]]
CurationReports[["All"]][[2]]
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
CurationReports[["All"]][[2]]
CurationReports[["SiteA"]][[2]]
library(dsCCPhosClient)
warnings()
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
?DSLite::defaultDSConfiguration
library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
rlang::last_trace()
Test <- ds.GetReportingObject(ObjectName = "CurationReport", DataSources = CCPConnections)
Test$SiteA$Diagnosis
library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
CCPhosApp::StartCCPhosApp(CCPConnections = CCPConnections,
CCPhosData = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
library(dsBaseClient)
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_dev_package("CCPhosApp", type = "Suggests", remote = "devtools::BastianReiter/CCPhosApp")
# use_package("dplyr")
use_package("DSLite", type = "Suggests")
?getOption
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_dev_package("CCPhosApp", type = "Suggests", remote = "devtools::BastianReiter/CCPhosApp")
# use_package("dplyr")
use_package("dsBaseClient", remote = "c(getOption('repos'), 'http://cran.obiba.org')")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_dev_package("CCPhosApp", type = "Suggests", remote = "devtools::BastianReiter/CCPhosApp")
# use_package("dplyr")
use_dev_package("dsBaseClient", remote = "c(getOption('repos'), 'http://cran.obiba.org')")
getOption("repos")
?use_dev_package
c(getOption('repos'), 'http://cran.obiba.org')
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_dev_package("CCPhosApp", type = "Suggests", remote = "devtools::BastianReiter/CCPhosApp")
# use_package("dplyr")
use_dev_package("dsBaseClient", remote = "devtools::datashield/dsBaseClient")
?use_dev_package
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
Test <- ds.GetReportingObject(ObjectName = "CurationReport", DataSources = CCPConnections)
Test$SiteA$Diagnosis
Test$SiteB$Staging
Test$SiteA$Staging
Test$SiteA$Diagnosis
Test$SiteA$Histology
library(dsCCPhosClient)
devtools::load_all(".")
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
Test <- ds.GetReportingObject(ObjectName = "CurationReport", DataSources = CCPConnections)
Test$SiteA$Patient
Test$SiteA$Diagnosis
Test$SiteA$Histology
Test$SiteA$Progress
Test$SiteA$Staging
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
Test <- ds.GetReportingObject(ObjectName = "CurationReport", DataSources = CCPConnections)
Test$SiteA$Staging
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
CurationReports$All$Staging
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 300)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
DSI::datashield.logout(CCPConnections)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
CCPhosApp::StartCCPhosApp(CCPConnections = CCPConnections,
CCPhosData = CurationReports)
# # Save for easier testing of CCPhosApp
saveRDS(object = CurationReports,
file = "CurationReport.rds")
View(CurationReports$SiteA$Staging)
?str_escape
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Diagnosis)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Staging)
# Exemplary look at a curation report table
View(CurationReports$SiteB$Staging)
# Exemplary look at a curation report table
View(CurationReports$SiteC$Staging)
?switch
