ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
i <- 3
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
library(dsCCPhos)
i <- 2
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = AugmentationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = AugmentationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectInfo(ObjectName = AugmentationOutputObjects[i],
DataSources = DataSources))
library(dsCCPhosClient)
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(DataSources = CCPConnections,
ProjectName = "Virtual")
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
names(CurationReports)
names(CurationReports$SiteA)
names(CurationReports$SiteA$Transformation)
names(CurationReports[[1]]$Transformation)
names(CurationReports[1]$Transformation)
CurationReports[["SiteA"]]$Transformation[["Diagnosis"]]
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
ds.colnames(x = "ADS_Patients",
datasources = CCPConnections)
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections)
View(SampleStatistics)
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = Colors$MediumGrey,
"SiteA" = Colors$Primary,
"SiteB" = Colors$Secondary,
"SiteC" = Colors$Tertiary))
dsCCPhosClient::CCPhosColors
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = CCPhosColors$MediumGrey,
"SiteA" = CCPhosColors$Primary,
"SiteB" = CCPhosColors$Secondary,
"SiteC" = CCPhosColors$Tertiary))
View(TestPlot)
TestPlot
library(dsCCPhosClient)
devtools::load_all(".")
dsCCPhosClient::CCPSiteCredentials
devtools::load_all(".")
library(dsCCPhosClient)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = ,
Token = character())
library(devtools)
library(dplyr)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = ,
Token = character())
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://Sissy/",
Token = "Secret Token")
use_data(CCPSiteCredentials, overwrite = TRUE)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://Sissy/",
Token = "1234567890")
use_data(CCPSiteCredentials, overwrite = TRUE)
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteCredentials <- tibble(SiteName = character(),
URL = character(),
ProjectName = character(),
Token = character())
# Add site "Sissy"
CCPSiteCredentials <- add_row(CCPSiteCredentials,
SiteName = "Sissy",
URL = "https://Sissy/",
ProjectName = "CoolProject",
Token = "1234567890")
# Save data in .rda-file and make it part of package
use_data(CCPSiteCredentials, overwrite = TRUE)
dsCCPhosClient::CCPSiteCredentials
dsCCPhosClient::CCPSiteCredentials[SiteName == "Sissy",]
Test <- setNames(letters[1:5], nm = LETTERS[1:5])
Test
Test["D"]
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("CheckServerRequirements.R")
# use_r("ConnectToCCP.R")
# use_r("ConnectToVirtualCCP.R")
use_r("GetServerOpalDBInfo.R")
# Initiate tibble that holds credentials of participating CCP sites
CCPSiteSpecifications <- tibble(SiteName = character(),
URL = character(),
ProjectName = character(),
Token = character())
# Add site "Sissy"
CCPSiteSpecifications <- add_row(CCPSiteSpecifications,
SiteName = "Sissy",
URL = "https://Sissy/",
ProjectName = "CoolProject",
Token = "1234567890")
# Save data in .rda-file and make it part of package
use_data(CCPSiteSpecifications, overwrite = TRUE)
devtools::load_all(".")
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
CCPConnections
CCPConnections[["SiteA"]]
CCPConnections["SiteA"]
library(dsCCPhosClient)
devtools::load_all(".")
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
devtools::load_all(".")
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
devtools::load_all(".")
devtools::load_all(".")
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
# For testing purposes
DataSources = CCPConnections
# For testing purposes
CCPSiteSpecifications = NULL
DataSources = CCPConnections
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = DataSources)
# Initiate data frame containing info about table availability
RequiredTableAvailability <- tibble(TableName = CCPTableNames_Raw)
for (i in 1:length(ServerNames))
{
# In case project is virtual, server Opal table names are just raw CCP table names
ServerTableNames <- CCPTableNames_Raw
# If project is not virtual, there can be server-specific project names and therefore server-specific Opal table names
if (!is.null(CCPSiteSpecifications))
{
# Get server-specific project name
ServerProjectName <- CCPSiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, ".", CCPTableNames_Raw)
}
# For every server, check if CCP raw data tables with site-specific correspondent names are existent in 'TableAvailability'
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := ServerTableNames %in% TableAvailability[[ServerNames[i]]])
}
# Get server names (sorted alphabetically)
ServerNames <- sort(names(DataSources))
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
# Get overview of available tables on servers
TableAvailability <- DSI::datashield.tables(conns = DataSources)
# Initiate data frame containing info about table availability
RequiredTableAvailability <- tibble(TableName = CCPTableNames_Raw)
for (i in 1:length(ServerNames))
{
# In case project is virtual, server Opal table names are just raw CCP table names
ServerTableNames <- CCPTableNames_Raw
# If project is not virtual, there can be server-specific project names and therefore server-specific Opal table names
if (!is.null(CCPSiteSpecifications))
{
# Get server-specific project name
ServerProjectName <- CCPSiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, ".", CCPTableNames_Raw)
}
# For every server, check if CCP raw data tables with site-specific correspondent names are existent in 'TableAvailability'
RequiredTableAvailability <- RequiredTableAvailability %>%
mutate(!!ServerNames[i] := ServerTableNames %in% TableAvailability[[ServerNames[i]]])
}
View(RequiredTableAvailability)
RequiredTableAvailability <- RequiredTableAvailability %>%
rowwise() %>%
mutate(IsAvailableEverywhere = all(c_across(all_of(ServerNames)) == TRUE),
NotAvailableAt = ifelse(IsAvailableEverywhere == FALSE,
paste0(ServerNames[c_across(all_of(ServerNames)) == FALSE], collapse = ", "),
NA)) %>%
ungroup()
View(RequiredTableAvailability)
devtools::load_all(".")
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
library(dsCCPhosClient)
?summarize
?dplyr::summarize
library(dsCCPhosClient)
library(dsCCPhosClient)
?sum
?left_join
devtools::load_all(".")
#library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData_Frankfurt.rds")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData_Frankfurt.RData")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
?pick
devtools::load_all(".")
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
Test <- data.frame()
nrow(Test)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
Test <- NULL
nrow(Test)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
library(dsCCPhosClient)
devtools::load_all(".")
library(dsCCPhosClient)
library(dsCCPhosClient)
library(dsCCPhosClient)
#library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages_ServerRequirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages_Loading <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
GetServerWorkspaceInfo(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages_DataCuration <- dsCCPhosClient::ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Details$Staging)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Details$Staging)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Transformation$Details$Staging)
# For testing purposes
DataSources <- CCPConnections
if (is.null(DataSources))
{
DataSources <- DSI::datashield.connections_find()
}
ServerCall <- call("GetReportingObjectDS",
ObjectName.S = "CurationReport")
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Initiate summary with vector from first server
UnlinkedEntriesCumulated <- CurationReports[[1]]$UnlinkedEntries
UnlinkedEntriesCumulated
if (length(CurationReports) > 1)
{
for (i in 2:length(CurationReports))      # Loop through all other servers
{
UnlinkedEntriesCumulated <- UnlinkedEntriesCumulated + CurationReports[[i]]$UnlinkedEntries
}
}
UnlinkedEntriesCumulated
TransformationMonitorsCumulated <- list()
for (i in 1:length(CurationReports[[1]]$Transformation$Details))      # Loop through all transformation monitor tables (Diagnosis, Histology, etc.)
{
AllServersTable <- data.frame()
for (j in 1:length(CurationReports))      # Loop through all servers
{
ServerTable <- CurationReports[[j]]$Transformation$Details[[i]]
if (!is.null(ServerTable))
{
ServerTable <- ServerTable %>%
mutate(TemporaryServerID = j)      # Create temporary server ID for processing
# Row-bind all server-specific transformation monitor tables
AllServersTable <- AllServersTable %>%
bind_rows(ServerTable)
}
}
if (nrow(AllServersTable) > 0)      # In case 'AllServersTable' is not empty
{
# Get summarized counts of raw values
SummaryRawValues <- AllServersTable %>%
filter(IsOccurring == TRUE) %>%
distinct(pick(TemporaryServerID,      # This makes sure that per server only one 'instance' of a particular value is counted
Feature,
Value_Raw,
Count_Raw)) %>%
group_by(Feature,
Value_Raw) %>%
summarize(Count_Raw = sum(Count_Raw, na.rm = TRUE))
# Get summarized counts of harmonized values
SummaryHarmonizedValues <- AllServersTable %>%
distinct(pick(TemporaryServerID,
Feature,
Value_Harmonized,
Count_Harmonized)) %>%
group_by(Feature,
Value_Harmonized) %>%
summarize(Count_Harmonized = sum(Count_Harmonized, na.rm = TRUE))
# Get summarized counts of recoded values
SummaryRecodedValues <- AllServersTable %>%
distinct(pick(TemporaryServerID,
Feature,
Value_Recoded,
Count_Recoded)) %>%
group_by(Feature,
Value_Recoded) %>%
summarize(Count_Recoded = sum(Count_Recoded, na.rm = TRUE))
# Get summarized counts of final values
SummaryFinalValues <- AllServersTable %>%
distinct(pick(TemporaryServerID,
Feature,
Value_Final,
Count_Final)) %>%
group_by(Feature,
Value_Final) %>%
summarize(Count_Final = sum(Count_Final, na.rm = TRUE))
AllServersTable <- AllServersTable %>%
select(-TemporaryServerID,
-Count_Raw,
-Count_Harmonized,
-Count_Recoded,
-Count_Final) %>%
distinct() %>%
#--- Delete remnant values marked as non-occurring that actually occur on some server ---
group_by(Feature, Value_Raw) %>%
arrange(desc(IsOccurring), .by_group = TRUE) %>%
slice_head() %>%
ungroup() %>%
#--- Add cumulated value counts of different transformation stages ---
left_join(SummaryRawValues, by = join_by(Feature, Value_Raw)) %>%
left_join(SummaryHarmonizedValues, by = join_by(Feature, Value_Harmonized)) %>%
left_join(SummaryRecodedValues, by = join_by(Feature, Value_Recoded)) %>%
left_join(SummaryFinalValues, by = join_by(Feature, Value_Final)) %>%
arrange(Feature,
desc(IsOccurring),
desc(IsEligible_Raw),
desc(IsEligible_Harmonized),
Value_Raw)
}
TransformationMonitorsCumulated <- c(TransformationMonitorsCumulated,
list(AllServersTable))
}
names(TransformationMonitorsCumulated) <- names(CurationReports[[1]]$Transformation$Details)
TransformationMonitorsCumulated
View(TransformationMonitorsCumulated$Patient)
# Initiate summary with vector from first server
DiagnosisClassificationCumulated <- CurationReports[[1]]$DiagnosisClassification
if (length(CurationReports) > 1)
{
for (i in 2:length(CurationReports))      # Loop through all other servers
{
DiagnosisClassificationCumulated <- DiagnosisClassificationCumulated + CurationReports[[i]]$DiagnosisClassification
}
}
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Transformation$Details$Staging)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Details$Staging)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Staging)
devtools::load_all(".")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$All$Transformation$Details$Staging)
library(dsCCPhosClient)
