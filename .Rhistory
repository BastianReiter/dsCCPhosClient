#-------------------------------------------------------------------------------
PlotData <- CurationReports$All$Transformation$EligibilityOverviews$Staging %>%
select(-ends_with("_Proportional")) %>%
pivot_longer(cols = c(Raw, Harmonized, Recoded, Final),
names_to = "Stage",
values_to = "Count") %>%
pivot_wider(names_from = "Eligibility",
values_from = "Count") %>%
nest(.by = Feature)      # 'Split' the whole table into smaller data frames for each 'Feature' value
library(plotly)
plot_ly(data = filter(PlotData, Feature == "UICCStage")$data[[1]],
x = ~Stage,
y = ~Eligible,
type = "bar",
name = "Eligible",
color = I(dsCCPhosClient::CCPhosColors$Green)) %>%
add_trace(y = ~Ineligible,
name = "Ineligible",
color = I(dsCCPhosClient::CCPhosColors$Red)) %>%
add_trace(y = ~Missing,
name = "Missing",
color = I(dsCCPhosClient::CCPhosColors$MediumGrey)) %>%
layout(xaxis = list(categoryorder = "array",
categoryarray = c("Raw", "Harmonized", "Recoded", "Final")),
yaxis = list(title = "Count"),
barmode = "stack")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Curated Data Set (CDS) into Augmented Data Set (ADS)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
# Overview of all objects in server R sessions
View(ServerWorkspaceInfo$Overview)
# Overview of all objects in server R sessions
View(ServerWorkspaceInfo$Overview)
# Detailed meta data of a particular object (also part of ServerWorkspaceInfo)
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
# Explore Object meta data: Structural overview
View(ObjectMetaData$FirstEligible$Structure)
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
devtools::load_all(".")
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
# For Testing Purposes
DataSources <- CCPConnections
TableName <- "ADS_Patients"
FeatureName <- "TNM_T"
require(dsBaseClient)
require(dplyr)
require(purrr)
# Get meta data of table object
TableMetaData <- ds.GetObjectMetaData(ObjectName = TableName,
DataSources = DataSources)
View(TableMetaData)
if (TableMetaData$FirstEligible$Class != "data.frame") { stop("Error: The referred table object does not seem to be a data.frame.", call. = FALSE)}
# SiteReturns: Obtain meta data for each server calling dsCCPhos::GetFeatureInfoDS()
ls_SiteReturns <- DSI::datashield.aggregate(conns = DataSources,
expr = call("GetFeatureInfoDS",
TableName.S = TableName,
FeatureName.S = FeatureName))
ls_SiteReturns$SiteA
# Convert site returns into tibble containing separate meta data
df_SeparateMetaData <- ls_SiteReturns %>%
map(\(SiteReturn) SiteReturn$MetaData) %>%
list_rbind() %>%
mutate(Site = names(DataSources), .before = 1)
# Convert site returns into tibble containing separate meta data
df_SeparateMetaData <- ls_SiteReturns %>%
list_rbind()
View(df_SeparateMetaData)
# Convert site returns into tibble containing separate meta data
df_SeparateMetaData <- ls_SiteReturns %>%
list_rbind() %>%
mutate(Site = names(DataSources), .before = 1)
View(df_SeparateMetaData)
# Calculate cumulated meta data
df_CumulatedMetaData <- tibble(Site = "All",
N_Total = sum(df_SeparateMetaData$N_Total),
N_Valid = sum(df_SeparateMetaData$N_Valid),
ValidProportion = N_Valid / N_Total,
N_Missing = sum(df_SeparateMetaData$N_Missing),
MissingProportion = N_Missing / N_Total)
devtools::load_all(".")
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
View(Test)
View(Test)
?unique
test <- c(1, NA, 3)
unique(Test)
unique(test)
CumulatedDataType <- unique(df_SeparateMetaData$DataType[!is.na(df_SeparateMetaData$DataType)])
CumulatedDataType
?switch
devtools::load_all(".")
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
Test
devtools::load_all(".")
Test
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("CheckServerRequirements.R")
# use_r("ConnectToCCP.R")
# use_r("ConnectToVirtualCCP.R")
use_r("ExploreFeature.R")
library(devtools)
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("CheckServerRequirements.R")
# use_r("ConnectToCCP.R")
# use_r("ConnectToVirtualCCP.R")
use_r("ExploreFeature.R")
Test <- ds.GetSampleStatistics(DataSources = CCPConnections,
TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis")
devtools::load_all(".")
Test <- ds.GetSampleStatistics(DataSources = CCPConnections,
TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis")
devtools::load_all(".")
Test <- ds.GetSampleStatistics(DataSources = CCPConnections,
TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis")
devtools::load_all(".")
Test <- ds.GetSampleStatistics(DataSources = CCPConnections,
TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis")
Test
devtools::load_all(".")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load required packages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(dsBaseClient)
library(dsCCPhosClient)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Establish Connections to virtual servers using dsCCPhosClient::ConnectToVirtualCCP()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check server requirements using dsCCPhosClient::CheckServerRequirements()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Messages <- CheckServerRequirements(DataSources = CCPConnections)
# datashield.pkg_status(conns = CCPConnections)
# datashield.method_status(conns = CCPConnections)
# datashield.methods(conns = CCPConnections, type = "assign")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load Raw Data Set (RDS) from Opal data base to R sessions on servers
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Get validation report of Raw Data Set (RDS)
# ValidationReportRDS <- ds.GetValidationReport_RDS(Name_RawDataSet = "RawDataSet",
#                                                       DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
#View(CurationReports$All$Transformation$Monitors$Staging)
#View(CurationReports$All$Transformation$EligibilityOverviews$Staging)
#View(CurationReports$All$Transformation$ValueSetOverviews$Raw)
# Get validation report of Curated Data Set (CDS)
# ValidationReportCDS <- ds.GetValidationReport_CDS(Name_CurationOutput = "CurationOutput",
#                                                   DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Plot data on value eligibility for exemplary table in CDS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - Restructure eligibility overview table to meet requirements of plot function
# - Create separate data frames for each 'Feature' value
# - Columns in final object:
#   - 'Feature': contains names of features
#   - 'data': plot data for feature-specific plot
#-------------------------------------------------------------------------------
PlotData <- CurationReports$All$Transformation$EligibilityOverviews$Staging %>%
select(-ends_with("_Proportional")) %>%
pivot_longer(cols = c(Raw, Harmonized, Recoded, Final),
names_to = "Stage",
values_to = "Count") %>%
pivot_wider(names_from = "Eligibility",
values_from = "Count") %>%
nest(.by = Feature)      # 'Split' the whole table into smaller data frames for each 'Feature' value
library(plotly)
plot_ly(data = filter(PlotData, Feature == "UICCStage")$data[[1]],
x = ~Stage,
y = ~Eligible,
type = "bar",
name = "Eligible",
color = I(dsCCPhosClient::CCPhosColors$Green)) %>%
add_trace(y = ~Ineligible,
name = "Ineligible",
color = I(dsCCPhosClient::CCPhosColors$Red)) %>%
add_trace(y = ~Missing,
name = "Missing",
color = I(dsCCPhosClient::CCPhosColors$MediumGrey)) %>%
layout(xaxis = list(categoryorder = "array",
categoryarray = c("Raw", "Harmonized", "Recoded", "Final")),
yaxis = list(title = "Count"),
barmode = "stack")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Curated Data Set (CDS) into Augmented Data Set (ADS)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get overview of objects in server workspaces
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - Using dsCCPhosClient::GetServerWorkspaceInfo() and dsCCPhosClient::ds.GetObjectMetaData()
#-------------------------------------------------------------------------------
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
# Overview of all objects in server R sessions
View(ServerWorkspaceInfo$Overview)
# Detailed meta data of a particular object (also part of ServerWorkspaceInfo)
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
# Explore Object meta data: Structural overview
View(ObjectMetaData$FirstEligible$Structure)
# Get type of feature 'PatientID'
ObjectMetaData$FirstEligible$DataTypes["PatientID"]
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
Test
devtools::load_all(".")
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
Test
devtools::load_all(".")
Test <- ds.GetSampleStatistics(DataSources = CCPConnections,
TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis")
devtools::load_all(".")
Test <- ds.GetSampleStatistics(DataSources = CCPConnections,
TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis")
Test
# For Testing Purposes
DataSources <- CCPConnections
TableName <- "ADS_Patients"
FeatureName <- "TNM_T"
GroupingFeatureName <- NULL
MaxNumberCategories <- NULL
require(dsBaseClient)
require(dplyr)
require(purrr)
# Get meta data of table object
TableMetaData <- ds.GetObjectMetaData(ObjectName = TableName,
DataSources = DataSources)
if (TableMetaData$FirstEligible$Class != "data.frame") { stop("Error: The referred table object does not seem to be a data.frame.", call. = FALSE)}
# Get data type of feature in question
FeatureType <- TableMetaData$FirstEligible$DataTypes[FeatureName]
# Stop function if referred feature is of class "numeric
if (FeatureType %in% c("integer", "double", "numeric")) { stop("Error: The referred feature can not be of class 'numeric'.", call. = FALSE) }
# SiteReturns: Obtain sample statistics for each server calling dsCCPhos::GetFrequencyTableDS()
ls_SiteReturns <- DSI::datashield.aggregate(conns = DataSources,
expr = call("GetFrequencyTableDS",
TableName.S = TableName,
FeatureName.S = FeatureName,
GroupingFeatureName.S = GroupingFeatureName,
MaxNumberCategories.S = MaxNumberCategories))
datashield.errors()
# Install own dataSHIELD packages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#devtools::install_github(repo = "BastianReiter/dsCCPhos")
#devtools::install_github(repo = "BastianReiter/dsCCPhosClient")
#devtools::install_github(repo = "BastianReiter/CCPhosApp")
# Install additional datashield-packages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#devtools::install_github("tombisho/dsSynthetic", dependencies = TRUE)
#devtools::install_github("tombisho/dsSyntheticClient", dependencies = TRUE)
#devtools::install_github("neelsoumya/dsSurvival")
#devtools::install_github("neelsoumya/dsSurvivalClient")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load required packages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(dsBaseClient)
library(dsCCPhosClient)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Establish Connections to virtual servers using dsCCPhosClient::ConnectToVirtualCCP()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000,
AddedDsPackages = "dsSurvivalFix")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check server requirements using dsCCPhosClient::CheckServerRequirements()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Messages <- CheckServerRequirements(DataSources = CCPConnections)
# datashield.pkg_status(conns = CCPConnections)
# datashield.method_status(conns = CCPConnections)
# datashield.methods(conns = CCPConnections, type = "assign")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load Raw Data Set (RDS) from Opal data base to R sessions on servers
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Get validation report of Raw Data Set (RDS)
# ValidationReportRDS <- ds.GetValidationReport_RDS(Name_RawDataSet = "RawDataSet",
#                                                       DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Messages <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Exemplary look at a curation report table
#View(CurationReports$All$Transformation$Monitors$Staging)
#View(CurationReports$All$Transformation$EligibilityOverviews$Staging)
#View(CurationReports$All$Transformation$ValueSetOverviews$Raw)
# Get validation report of Curated Data Set (CDS)
# ValidationReportCDS <- ds.GetValidationReport_CDS(Name_CurationOutput = "CurationOutput",
#                                                   DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Plot data on value eligibility for exemplary table in CDS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - Restructure eligibility overview table to meet requirements of plot function
# - Create separate data frames for each 'Feature' value
# - Columns in final object:
#   - 'Feature': contains names of features
#   - 'data': plot data for feature-specific plot
#-------------------------------------------------------------------------------
PlotData <- CurationReports$All$Transformation$EligibilityOverviews$Staging %>%
select(-ends_with("_Proportional")) %>%
pivot_longer(cols = c(Raw, Harmonized, Recoded, Final),
names_to = "Stage",
values_to = "Count") %>%
pivot_wider(names_from = "Eligibility",
values_from = "Count") %>%
nest(.by = Feature)      # 'Split' the whole table into smaller data frames for each 'Feature' value
library(plotly)
plot_ly(data = filter(PlotData, Feature == "UICCStage")$data[[1]],
x = ~Stage,
y = ~Eligible,
type = "bar",
name = "Eligible",
color = I(dsCCPhosClient::CCPhosColors$Green)) %>%
add_trace(y = ~Ineligible,
name = "Ineligible",
color = I(dsCCPhosClient::CCPhosColors$Red)) %>%
add_trace(y = ~Missing,
name = "Missing",
color = I(dsCCPhosClient::CCPhosColors$MediumGrey)) %>%
layout(xaxis = list(categoryorder = "array",
categoryarray = c("Raw", "Harmonized", "Recoded", "Final")),
yaxis = list(title = "Count"),
barmode = "stack")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transform Curated Data Set (CDS) into Augmented Data Set (ADS)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get overview of objects in server workspaces
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - Using dsCCPhosClient::GetServerWorkspaceInfo() and dsCCPhosClient::ds.GetObjectMetaData()
#-------------------------------------------------------------------------------
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
# Overview of all objects in server R sessions
View(ServerWorkspaceInfo$Overview)
# Detailed meta data of a particular object (also part of ServerWorkspaceInfo)
ObjectMetaData <- ds.GetObjectMetaData(ObjectName = "ADS_Patients",
DataSources = CCPConnections)
# Explore Object meta data: Structural overview
View(ObjectMetaData$FirstEligible$Structure)
# Get type of feature 'PatientID'
ObjectMetaData$FirstEligible$DataTypes["PatientID"]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Perform exemplary analyses
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
devtools::load_all(".")
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
Test
Test <- ds.GetSampleStatistics(DataSources = CCPConnections,
TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis")
Test
# For Testing Purposes
DataSources <- CCPConnections
TableName <- "ADS_Patients"
FeatureName <- "TNM_T"
GroupingFeatureName <- NULL
MaxNumberCategories <- NULL
# Get meta data of table object
TableMetaData <- ds.GetObjectMetaData(ObjectName = TableName,
DataSources = DataSources)
if (TableMetaData$FirstEligible$Class != "data.frame") { stop("Error: The referred table object does not seem to be a data.frame.", call. = FALSE)}
# Get data type of feature in question
FeatureType <- TableMetaData$FirstEligible$DataTypes[FeatureName]
# Stop function if referred feature is of class "numeric
if (FeatureType %in% c("integer", "double", "numeric")) { stop("Error: The referred feature can not be of class 'numeric'.", call. = FALSE) }
# SiteReturns: Obtain sample statistics for each server calling dsCCPhos::GetFrequencyTableDS()
ls_SiteReturns <- DSI::datashield.aggregate(conns = DataSources,
expr = call("GetFrequencyTableDS",
TableName.S = TableName,
FeatureName.S = FeatureName,
GroupingFeatureName.S = GroupingFeatureName,
MaxNumberCategories.S = MaxNumberCategories))
ls_SiteReturns$SiteA
library(devtools)
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("CheckServerRequirements.R")
# use_r("ConnectToCCP.R")
# use_r("ConnectToVirtualCCP.R")
# use_r("ExploreFeature.R")
# use_r("GetServerOpalDBInfo.R")
# use_r("GetServerWorkspaceInfo.R")
# use_r("LoadRawDataSet.R")
use_r("MergeTables.R")
ls_SiteReturns$SiteA
# Convert site returns into tibble containing separate statistics
df_CumulatedFrequencyTable <- ls_SiteReturns %>%
list_rbind()
View(df_CumulatedFrequencyTable)
?list_rbind
# Convert site returns into tibble containing separate statistics
df_CumulatedFrequencyTable <- ls_SiteReturns %>%
list_rbind(names_to = "Site")
View(df_CumulatedFrequencyTable)
# Convert site returns into tibble containing separate frequency tables
df_SeparateFrequencyTables <- ls_SiteReturns %>%
list_rbind(names_to = "Site")
df_SeparateFrequencyTables
df_CumulatedFrequencyTable <- df_SeparateFrequencyTables %>%
mutate(Site = "All") %>%
group_by(Value) %>%
summarize(Frequency = sum(Frequency))
View(df_CumulatedFrequencyTable)
df_CumulatedFrequencyTable <- df_SeparateFrequencyTables %>%
mutate(Site = "All") %>%
group_by(Value) %>%
summarize(Frequency = sum(Frequency)) %>%
ungroup() %>%
mutate(Proportion = Frequency / sum(Frequency))
View(df_CumulatedFrequencyTable)
df_CumulatedFrequencyTable <- df_SeparateFrequencyTables %>%
group_by(Value) %>%
summarize(Frequency = sum(Frequency)) %>%
ungroup() %>%
mutate(Site = "All",
Proportion = Frequency / sum(Frequency))
?list_rbind
devtools::load_all(".")
devtools::load_all(".")
Test <- ds.GetFrequencyTable(DataSources = CCPConnections,
TableName = "ADS_Patients",
MetricFeatureName = "TNM_T")
Test <- ds.GetFrequencyTable(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
devtools::load_all(".")
Test <- ds.GetFrequencyTable(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
View(Test)
Test <- ds.GetFrequencyTable(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T",
MaxNumberCategories = 5)
View(Test)
