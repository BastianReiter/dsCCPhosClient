OutputName = "CurationOutput",
DataSources = CCPConnections)
rlang::last_trace()
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
Messages <- ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = "1000")
Messages
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
datashield.errors()
# For testing purposes only
RawDataSetName = "RawDataSet"
OutputName = "CurationOutput"
RuleProfile_RawDataHarmonization = "Default"
RuleProfile_DiagnosisRedundancy = "Default"
RuleProfile_DiagnosisAssociation = "Default"
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- list()
Messages$CurationCompletion <- list()
# Construct the the server-side function call
ServerCall <- call("CurateDataDS",
RawDataSetName.S = RawDataSetName,
RuleProfile_RawDataHarmonization.S = RuleProfile_RawDataHarmonization,
RuleProfile_DiagnosisRedundancy.S = RuleProfile_DiagnosisRedundancy,
RuleProfile_DiagnosisAssociation.S = RuleProfile_DiagnosisAssociation)
# Execute the server-side function call
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
# Call helper function to check if assignment of CurationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = OutputName,
DataSources = DataSources))
CurationOutputObjects <- c("CuratedDataSet",
"CurationReport",
"CurationMessages")
for(i in 1:length(CurationOutputObjects))
{
# Construct the server-side function call
ServerCall <- call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = CurationOutputObjects[i])
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = CurationOutputObjects[i],
value = ServerCall)
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = CurationOutputObjects[i],
DataSources = DataSources))
}
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
Messages <- ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = "1000")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = "1000")
datashield.errors()
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = "1000")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
devtools::load_all(".")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = "1000")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo(DataSources = CCPConnections)
# Overview of all objects in server R sessions
View(ServerWorkspaceInfo$Overview)
Test <- ds.GetFeatureInfo(DataSources = CCPConnections,
TableName = "ADS_Patients",
FeatureName = "TNM_T")
Test
library(dplyr)
library(readxl)
library(usethis)
Meta_TableNames <- dsCCPhos::Meta_TableNames
Meta_FeatureNames <- dsCCPhos::Meta_FeatureNames
Meta_ValueSets <- dsCCPhos::Meta_ValueSets
RuleSet_RawDataHarmonization <- dsCCPhos::RuleSet_RawDataHarmonization
RuleSet_DiagnosisRedundancy <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleSet_DiagnosisAssociation <- dsCCPhos::RuleSet_DiagnosisAssociation
use_data(Meta_TableNames, overwrite = TRUE)
use_data(Meta_FeatureNames, overwrite = TRUE)
use_data(Meta_ValueSets, overwrite = TRUE)
use_data(RuleSet_RawDataHarmonization, overwrite = TRUE)
use_data(RuleSet_DiagnosisRedundancy, overwrite = TRUE)
use_data(RuleSet_DiagnosisAssociation, overwrite = TRUE)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
devtools::load_all(".")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
CCPTestData <- TestData
NumberOfSites <- 3
NumberOfPatientsPerSite <- 1000
AddedDsPackages <- NULL
# Check value of NumberOfSites
if (NumberOfSites > 26) { stop("Maximum value for 'NumberOfSites' is 26.", call. = FALSE) }
# Determine names of virtual sites (here: SiteA, SiteB, ...)
SiteNames <- paste0("Site", LETTERS[1:NumberOfSites])
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
# Calculate auxiliary variables
AllPatientIDs <- CCPTestData$patient$PatientID
# Calculate auxiliary variables
AllPatientIDs <- CCPTestData$patient$"_id"
# AllPatientIDs <- CCPTestData$Patient$PatientID
CountTotalPatients <- n_distinct(AllPatientIDs)
PatientsPerSite <- floor(CountTotalPatients / NumberOfSites)
# Check if NumberOfPatientsPerSite has a feasible value and adopt it for PatientsPerSite
if (!is.null(NumberOfPatientsPerSite))
{
if (NumberOfPatientsPerSite > PatientsPerSite)
{
stop(paste0("Not enough patients in test data for entered 'NumberOfPatientsPerSite'. Proposal value is equal or lower than ", PatientsPerSite, ". Alternatively reduce 'NumberOfSites'."), call. = FALSE)
} else {
PatientsPerSite <- NumberOfPatientsPerSite
}
}
for (i in 1:NumberOfSites)
{
# 1) Prepare site data
#~~~~~~~~~~~~~~~~~~~~~~
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs,
size = PatientsPerSite)
# Get data subsets that relate to sampled PatientIDs
SiteTestData <- list(sample = as.data.frame(filter(RawDataSet$sample, RawDataSet$sample$"patient-id" %in% SamplePatientIDs)),
diagnosis = as.data.frame(filter(RawDataSet$diagnosis, RawDataSet$diagnosis$"patient-id" %in% SamplePatientIDs)),
GeneralPerformance = NULL,
histology = as.data.frame(filter(RawDataSet$histology, RawDataSet$histology$"patient-id" %in% SamplePatientIDs)),
metastasis = as.data.frame(filter(RawDataSet$metastasis, RawDataSet$metastasis$"patient-id" %in% SamplePatientIDs)),
"molecular-marker" = NULL,
OtherClassification = NULL,
patient = as.data.frame(filter(RawDataSet$patient, RawDataSet$patient$"_id" %in% SamplePatientIDs)),
progress = as.data.frame(filter(RawDataSet$progress, RawDataSet$progress$"patient-id" %in% SamplePatientIDs)),
"radiation-therapy" = as.data.frame(filter(RawDataSet$"radiation-therapy", RawDataSet$"radiation-therapy"$"patient-id" %in% SamplePatientIDs)),
tnm = as.data.frame(filter(RawDataSet$tnm, RawDataSet$tnm$"patient-id" %in% SamplePatientIDs)),
surgery = as.data.frame(filter(RawDataSet$surgery, RawDataSet$surgery$"patient-id" %in% SamplePatientIDs)),
"system-therapy" = as.data.frame(filter(RawDataSet$"system-therapy", RawDataSet$"system-therapy"$"patient-id" %in% SamplePatientIDs)),
TherapyRecommendation = NULL)
# # Get data subsets that relate to sampled PatientIDs
# SiteTestData <- list(BioSampling = NULL,
#                      Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$PatientID %in% SitePatientIDs)),
#                      GeneralPerformance = NULL,
#                      Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$PatientID %in% SitePatientIDs)),
#                      Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$PatientID %in% SitePatientIDs)),
#                      MolecularDiagnostics = NULL,
#                      OtherClassification = NULL,
#                      Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$PatientID %in% SitePatientIDs)),
#                      Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$PatientID %in% SitePatientIDs)),
#                      RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$PatientID %in% SitePatientIDs)),
#                      Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$PatientID %in% SitePatientIDs)),
#                      Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$PatientID %in% SitePatientIDs)),
#                      SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$PatientID %in% SitePatientIDs)),
#                      TherapyRecommendation = NULL)
# # *** TEMPORARY fix *** until table names are clear
# names(SiteTestData) <- c("sample",
#                          "diagnosis",
#                          "GeneralPerformance",
#                          "histology",
#                          "metastasis",
#                          "molecular-marker",
#                          "OtherClassification",
#                          "patient",
#                          "progress",
#                          "radiation-therapy",
#                          "tnm",
#                          "surgery",
#                          "system-therapy",
#                          "TherapyRecommendation")
# 2) Build virtual server in global environment
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
assign(x = paste0("Server_", SiteNames[i]),
value = newDSLiteServer(tables = SiteTestData,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos",
AddedDsPackages))),
envir = .GlobalEnv)
# 3) Add login data to login builder
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LoginBuilder$append(server = SiteNames[i],
url = paste0("Server_", SiteNames[i]),
driver = "DSLiteDriver")
# 3) Update AllPatientIDs: Delete used-up PatientIDs
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
}
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
devtools::load_all(".")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSTableCheck$TableStatus
names(RDSTableCheck$TableStatus)
colnames(RDSTableCheck$TableStatus)
stringr::str_remove(colnames(RDSTableCheck$TableStatus), "RDS_")
stringr::str_remove(colnames(RDSTableCheck$TableStatus), "RDS_") %>% set_names(colnames(RDSTableCheck$TableStatus))
Test <- stringr::str_remove(colnames(RDSTableCheck$TableStatus), "RDS_") %>% set_names(colnames(RDSTableCheck$TableStatus))
names(Test)[1]
names(Test)[1] <- "Site"
Test
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Test <- ds.GetSurvModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased")
Test$SiteA
Test$SiteB
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Test <- ds.GetSurvModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased")
devtools::load_all(".")
Test <- ds.GetSurvModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased")
Test$SiteA
Test <- ds.GetSurvModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
MinFollowUpTime = 20)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
MinFollowUpTime = 20)
datashield.errors()
devtools::load_all(".")
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
MinFollowUpTime = 20)
Test$SiteA
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
MinFollowUpTime = 20)
Test$SiteA
Test$SiteB
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "Gender",
MinFollowUpTime = 20)
Test$SiteA
