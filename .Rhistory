for (packagename in PackageNames)
{
devtools::unload(package = packagename)
}
for (packagename in PackageNames)
{
devtools::install(paste0("../", packagename))
}
}
LocalPackageUpdate()
LocalPackageUpdate <- function()
{
require(devtools)
Path <- ""
PackageNames <- c("dsCCPhosClient",
"dsFredaClient",
"dsCCPhos",
"dsFreda")
for (packagename in PackageNames)
{
devtools::unload(package = packagename)
}
for (packagename in PackageNames)
{
try(devtools::install(paste0("../", packagename)))
}
}
LocalPackageUpdate()
rlang::last_trace()
loaded_packages()
loaded_packages()$package
LocalPackageUpdate <- function()
{
require(devtools)
Path <- ""
PackageNames <- c("dsCCPhosClient",
"dsFredaClient",
"dsCCPhos",
"dsFreda")
for (packagename in PackageNames)
{
if (packagename %in% loaded_packages()$package)
{
devtools::unload(package = packagename)
}
}
for (packagename in PackageNames)
{
devtools::install(paste0("../", packagename))
}
}
LocalPackageUpdate()
?devtools::install
?devtools::load_all
#-------------------------------------------------------------------------------
LocalPackageUpdate <- function(PackageNames = c("dsCCPhosClient",
"dsFredaClient",
"dsCCPhos",
"dsFreda"),
Mode = "load")
#-------------------------------------------------------------------------------
{
require(devtools)
for (packagename in PackageNames)
{
if (packagename %in% loaded_packages()$package)
{
devtools::unload(package = packagename)
}
}
if (Mode == "install")
{
for (packagename in PackageNames)
{
devtools::install(pkg = paste0("../", packagename),
upgrade = "never")
}
}
if (Mode == "load")
{
for (packagename in PackageNames)
{
devtools::load_all(path = paste0("../", packagename))
}
}
}
LocalPackageUpdate
LocalPackageUpdate()
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Module = "CCP",
TransformationStage = "Raw")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
CDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CuratedDataSet",
Modul = "CCP",
TransformationStage = "Curated")
# Get curation reports
CurationReport <- ds.GetCurationReport()
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "AugmentedDataSet")
CohortDescription <- ds.GetCohortDescription(DataSetName = "AugmentedDataSet",
CCPDataSetType = "ADS")
# Transform data into display-friendly time series tables using auxiliary function 'DisplayTimeSeries()'
PatientCount_TimeSeries <- DisplayTimeSeries(TimeSeriesData = CohortDescription$CohortSize_OverTime,
TimePointFeature = DiagnosisYear,
ValueFeature = PatientCount,
GroupingFeature = Server,
IncludeMissingTimePoints = TRUE)
CohortDescription$CohortSize_OverTime
# Transform data into display-friendly time series tables using auxiliary function 'DisplayTimeSeries()'
PatientCount_TimeSeries <- DisplayTimeSeries(TimeSeriesData = CohortDescription$CohortSize_OverTime,
TimePointFeature = "DiagnosisYear",
ValueFeature = "PatientCount",
GroupingFeature = "Server",
IncludeMissingTimePoints = TRUE)
PatientCount_TimeSeries
Test <- ds.GetCrossTab(TableName = "ADS.Patient",
FeatureNames = c("Sex", "LastVitalStatus", "CountDiagnoses"),
RemoveNA = TRUE)
ds.names()
ds.tables()
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
rlang::last_trace()
#-------------------------------------------------------------------------------
LocalPackageUpdate <- function(PackageNames = c("dsCCPhosClient",
"dsFredaClient",
"dsCCPhos",
"dsFreda"),
Mode = "load")
#-------------------------------------------------------------------------------
{
require(devtools)
# Unload all packages first
for (packagename in PackageNames)
{
if (packagename %in% loaded_packages()$package)
{
devtools::unload(package = packagename)
}
}
# If Mode is 'load' only use load_all() to (re-)load all functions from chosen local packages
if (Mode == "load")
{
for (packagename in rev(PackageNames))
{
devtools::load_all(path = paste0("../", packagename))
}
}
# If Mode is 'install' (re-)install all chosen local packages
if (Mode == "install")
{
for (packagename in rev(PackageNames))
{
devtools::install(pkg = paste0("../", packagename),
upgrade = "never")
}
}
}
LocalPackageUpdate()
# Collect comprehensive information about all workspace objects
ServerWorkspaceInfo <- GetServerWorkspaceInfo()
ServerWorkspaceInfo$Overview
View(ServerWorkspaceInfo$Overview)
View(ServerWorkspaceInfo$Overview$All)
library(dplyr)
library(dplyr)
library(usethis)
CCPhosAlphaPalettes <- list(Levels_2 <- c(0.5, 0.9),
Levels_3 <- c(0.2, 0.5, 0.9),
Levels_4 <- c(0.3, 0.5, 0.7, 0.9),
Levels_5 <- c(0.4, 0.5, 0.6, 0.7, 0.8))
# Save data in .rda-file and make it part of package
use_data(CCPhosAlphaPalettes, overwrite = TRUE)
CCPhosColors <- list(LightGrey = "#EDEDED",
MediumGrey = "#D0D0D0",
DarkGrey = "#595959",
#---------
Primary = "#054996",
PrimaryLight = "#05499650",
Secondary = "#8e1e39",
SecondaryLight = "#8e1e3950",
Tertiary = "#2B8C88",
TertiaryLight = "#2B8C8850",
#---------
Accent = "#960551",
AccentLight = "#96055150",
#---------
BlueNice = "#7EA6E0",
Green = "#269D27",
Orange = "#DE8F02",
Red = "#A90939")
# Save data in .rda-file and make it part of package
use_data(CCPhosColors, overwrite = TRUE)
?ds.GetDataSetCheck
Meta.Tables <- dsCCPhos::Meta.Tables
Meta.Features <- dsCCPhos::Meta.Features
Meta.Values <- dsCCPhos::Meta.Values
Set.DataHarmonization <- dsCCPhos::Set.DataHarmonization
Set.DiagnosisAssociation <- dsCCPhos::Set.DiagnosisAssociation
Set.DiagnosisRedundancy <- dsCCPhos::Set.DiagnosisRedundancy
Set.Dictionary <- dsCCPhos::Set.Dictionary
Set.FeatureObligations <- dsCCPhos::Set.FeatureObligations
Set.FeatureTracking <- dsCCPhos::Set.FeatureTracking
Set.FuzzyStringMatching <- dsCCPhos::Set.FuzzyStringMatching
Set.TransformativeExpressions <- dsCCPhos::Set.TransformativeExpressions
use_data(Meta.Tables, overwrite = TRUE)
use_data(Meta.Features, overwrite = TRUE)
use_data(Meta.Values, overwrite = TRUE)
library(dplyr)
library(usethis)
Meta.Tables <- dsCCPhos::Meta.Tables
Meta.Features <- dsCCPhos::Meta.Features
Meta.Values <- dsCCPhos::Meta.Values
Set.DataHarmonization <- dsCCPhos::Set.DataHarmonization
Set.DiagnosisAssociation <- dsCCPhos::Set.DiagnosisAssociation
Set.DiagnosisRedundancy <- dsCCPhos::Set.DiagnosisRedundancy
Set.Dictionary <- dsCCPhos::Set.Dictionary
Set.FeatureObligations <- dsCCPhos::Set.FeatureObligations
Set.FeatureTracking <- dsCCPhos::Set.FeatureTracking
Set.FuzzyStringMatching <- dsCCPhos::Set.FuzzyStringMatching
Set.TransformativeExpressions <- dsCCPhos::Set.TransformativeExpressions
use_data(Meta.Tables, overwrite = TRUE)
use_data(Meta.Features, overwrite = TRUE)
use_data(Meta.Values, overwrite = TRUE)
use_data(Set.DataHarmonization, overwrite = TRUE)
use_data(Set.DiagnosisAssociation, overwrite = TRUE)
use_data(Set.DiagnosisRedundancy, overwrite = TRUE)
use_data(Set.Dictionary, overwrite = TRUE)
use_data(Set.FeatureObligations, overwrite = TRUE)
use_data(Set.FeatureTracking, overwrite = TRUE)
use_data(Set.FuzzyStringMatching, overwrite = TRUE)
use_data(Set.TransformativeExpressions, overwrite = TRUE)
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
RDSValidationReports <- ds.GetRDSValidationReport()
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = "1000",
SampleName = "RDSSample")
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = 1000,
SampleName = "RDSSample")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
test <- 1:10 / 3
as.character(test)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = 1000,
SampleName = "RDSSample")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
CDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CuratedDataSet",
Stage = "Curated")
# Get curation reports
CurationReport <- ds.GetCurationReport()
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "AugmentedDataSet")
quote(dsCCPhos::CurateDataDS)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
?getExportedValue
getExportedValue("stats", "rnorm")
?DSI::datashield.assign
library(devtools)
# Set up central roxygen "script"
#-------------------------------------------------------------------------------
use_package_doc()
# Use the %>%-operator in this package (not enough to import dplyr)
#-------------------------------------------------------------------------------
use_pipe(export = FALSE)
# Use specific functions from external packages
#-------------------------------------------------------------------------------
use_import_from("dsFredaClient", c("DisplayTimeSeries",
"ds.ExtractFromList",
"ds.FilterTable",
"ds.GetCrossTab",
"ds.GetCurationReport",
"ds.GetDataSetCheck",
"ds.GetFeatureInfo",
"ds.GetFrequencyTable",
"ds.GetObjectMetaData",
"ds.GetObjectStatus",
"ds.GetSampleStatistics",
"ds.GetTableCheck",
"ds.GetTTEModel",
"ds.JoinTables",
"ds.MakeList",
"ds.MutateTable",
"ExploreFeature",
"ExportPlot",
"GetEligibleValues",
"GetServerOpalInfo",
"GetServerWorkspaceInfo",
"ggTheme",
"gtTheme",
"MakeBoxPlot",
"MakeColumnPlot"))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
use_package("assertthat")
use_package("cli")
use_package("dplyr")
use_dev_package("dsBaseClient", remote = "devtools::datashield/dsBaseClient")
use_package("dsTidyverseClient", type = "Suggests")
use_package("DSLite", type = "Suggests")
use_package("DSI")
use_package("purrr")
use_package("ggplot2", type = "Suggests")
use_package("gt", type = "Suggests")
use_package("quarto", type = "Suggests")
use_package("scales", type = "Suggests")
use_package("sysfonts", type = "Suggests")
use_package("tibble")
use_package("tidyr")
use_package("dsTidyverse", type = "Suggests")
use_package("utils", type = "Suggests")
# Use specific functions from external packages
#-------------------------------------------------------------------------------
use_import_from("dsFredaClient", c("AddCumulativeRow",
"CheckDSConnections",
"DisplayTimeSeries",
"ds.ExtractFromList",
"ds.FilterTable",
"ds.GetCrossTab",
"ds.GetCurationReport",
"ds.GetDataSetCheck",
"ds.GetFeatureInfo",
"ds.GetFrequencyTable",
"ds.GetObjectMetaData",
"ds.GetObjectStatus",
"ds.GetSampleStatistics",
"ds.GetTableCheck",
"ds.GetTTEModel",
"ds.JoinTables",
"ds.MakeList",
"ds.MutateTable",
"ExploreFeature",
"ExportPlot",
"GetEligibleValues",
"GetServerOpalInfo",
"GetServerWorkspaceInfo",
"ggTheme",
"gtTheme",
"MakeBoxPlot",
"MakeColumnPlot"))
?floor
?n_distinct
?PrintMessages
devtools::load_all(".")
