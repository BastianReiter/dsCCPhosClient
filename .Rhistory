EventFeature = "IsDocumentedDeceased")
Test$SiteA
Test <- ds.GetSurvModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
MinFollowUpTime = 20)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
MinFollowUpTime = 20)
datashield.errors()
devtools::load_all(".")
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
MinFollowUpTime = 20)
Test$SiteA
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
MinFollowUpTime = 20)
Test$SiteA
Test$SiteB
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "Gender",
MinFollowUpTime = 20)
Test$SiteA
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
datashield.errors()
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = "1000")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
library(dplyr)
library(readxl)
library(usethis)
Meta_Tables <- dsCCPhos::Meta_Tables
Meta_Features <- dsCCPhos::Meta_Features
Meta_ValueSets <- dsCCPhos::Meta_ValueSets
RuleSet_RawDataHarmonization <- dsCCPhos::RuleSet_RawDataHarmonization
RuleSet_DiagnosisRedundancy <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleSet_DiagnosisAssociation <- dsCCPhos::RuleSet_DiagnosisAssociation
use_data(Meta_TableNames, overwrite = TRUE)
use_data(Meta_FeatureNames, overwrite = TRUE)
use_data(Meta_ValueSets, overwrite = TRUE)
use_data(RuleSet_RawDataHarmonization, overwrite = TRUE)
use_data(RuleSet_DiagnosisRedundancy, overwrite = TRUE)
use_data(RuleSet_DiagnosisAssociation, overwrite = TRUE)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
Meta_Tables <- dsCCPhos::Meta_Tables
Meta_Features <- dsCCPhos::Meta_Features
Meta_ValueSets <- dsCCPhos::Meta_ValueSets
RuleSet_RawDataHarmonization <- dsCCPhos::RuleSet_RawDataHarmonization
RuleSet_DiagnosisRedundancy <- dsCCPhos::RuleSet_DiagnosisRedundancy
RuleSet_DiagnosisAssociation <- dsCCPhos::RuleSet_DiagnosisAssociation
use_data(Meta_Tables, overwrite = TRUE)
use_data(Meta_Features, overwrite = TRUE)
use_data(Meta_ValueSets, overwrite = TRUE)
use_data(RuleSet_RawDataHarmonization, overwrite = TRUE)
use_data(RuleSet_DiagnosisRedundancy, overwrite = TRUE)
use_data(RuleSet_DiagnosisAssociation, overwrite = TRUE)
devtools::load_all(".")
devtools::load_all(".")
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
View(CurationReport$IneligibleEntries)
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "Gender",
MinFollowUpTime = 20)
# For Testing Purposes
DataSources <- CCPConnections
TableName <- "ADS_Patients"
TimeFeature <- "TimeFollowUp"
EventFeature <- "IsDocumentedDeceased"
ModelType <- "coxph"
CovariateA <- NULL
MinFollowUpTime <- 20
CovariateB <- NULL
CovariateC <- NULL
require(dplyr)
# Get meta data of table object
TableMetaData <- ds.GetObjectMetaData(ObjectName = TableName,
DataSources = DataSources)
TableMetaData
# For testing purposes
ObjectName <- "ADS_Patients"
DataSources <- CCPConnections
require(purrr)
require(purrr)
# Construct server-side function call
ServerCall <- call("GetObjectMetaDataDS",
ObjectName.S = ObjectName)
# Get object meta data from every server
ObjectMetaData <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Get logical vector indicating existence of object on servers
ObjectExistence <- ObjectMetaData %>%
map_lgl(\(metadatalist) metadatalist$ObjectExists)
# Get names of all servers that host the object (so everywhere it exists)
EligibleServers <- names(DataSources)[ObjectExistence]
# Add to output list: Meta data from any (first eligible) server that hosts the object in question
ObjectMetaData$FirstEligible <- if(!is.null(EligibleServers)) { ObjectMetaData[[first(EligibleServers)]] } else { NULL }
ObjectMetaData$SiteA
devtools::load_all(".")
devtools::load_all(".")
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "Gender",
MinFollowUpTime = 20)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "Gender",
MinFollowUpTime = 20)
Test
devtools::load_all(".")
devtools::load_all(".")
DSI::datashield.logout(CCPConnections)
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
devtools::load_all(".")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
View(CurationReport$IneligibleEntries)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "Gender",
MinFollowUpTime = 20)
Test
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "Gender",
CovariateB = "UICCStageCategory",
MinFollowUpTime = 20)
Test
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "ADS_Patients",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "UICCStageCategory",
#CovariateB = "UICCStageCategory",
MinFollowUpTime = 20)
Test
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
View(CurationReport$IneligibleEntries)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
library(dplyr)
library(readxl)
library(usethis)
Meta_Tables <- dsCCPhos::Meta_Tables
Meta_Features <- dsCCPhos::Meta_Features
Meta_ValueSets <- dsCCPhos::Meta_ValueSets
RuleSet_RawDataHarmonization <- dsCCPhos::RuleSet_RawDataHarmonization
Meta_DataHarmonization <- dsCCPhos::Meta_DataHarmonization
Meta_DataHarmonization <- dsCCPhos::Meta_DataHarmonization
Meta_DiagnosisRedundancy <- dsCCPhos::Meta_DiagnosisRedundancy
Meta_DiagnosisAssociation <- dsCCPhos::Meta_DiagnosisAssociation
use_data(Meta_Tables, overwrite = TRUE)
use_data(Meta_Features, overwrite = TRUE)
use_data(Meta_ValueSets, overwrite = TRUE)
use_data(Meta_DataHarmonization, overwrite = TRUE)
use_data(Meta_DiagnosisRedundancy, overwrite = TRUE)
use_data(Meta_DiagnosisAssociation, overwrite = TRUE)
Meta_FeatureObligations <- dsCCPhos::Meta_FeatureObligations
use_data(Meta_FeatureObligations, overwrite = TRUE)
?ds.CurateData
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
require(dplyr)
require(purrr)
# For testing purposes
DataSources <- CCPConnections
ServerCall <- call("GetReportingObjectDS",
ObjectName.S = "CurationReport")
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Turn returned list 'inside-out' using purrr::list_transpose() for easier processing
CurationReports <- CurationReports %>% list_transpose()
# Bind rows of site-specific vectors
IneligibleEntries_Sites <- as_tibble(do.call(rbind, CurationReports$IneligibleEntries))
# Add row with column sums and add site name feature
IneligibleEntriesTable <- colSums(IneligibleEntries_Sites) %>%
bind_rows(IneligibleEntries_Sites) %>%
mutate(SiteName = c("All", names(DataSources)), .before = 1)
View(IneligibleEntries_Sites)
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Turn returned list 'inside-out' using purrr::list_transpose() for easier processing
CurationReports <- CurationReports %>% list_transpose()
str(CurationReports)
?str
str(CurationReports, max.level = 3)
str(CurationReports, max.level = 2)
CurationReports$ValueSetOverviews
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
CurationReports$SiteA$DiagnosisClassification
CurationReports$SiteA$Transformation$ValueSetOverviews$BioSampling$Raw
# Turn returned list 'inside-out' using purrr::list_transpose() for easier processing
CurationReports <- CurationReports %>% list_transpose()
# Bind rows of site-specific vectors
IneligibleEntries_Sites <- as_tibble(do.call(rbind, CurationReports$IneligibleEntries))
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
### For testing purposes
DataSources <- CCPConnections
ServerCall <- call("GetReportingObjectDS",
ObjectName.S = "CurationReport")
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Turn returned list 'inside-out' using purrr::list_transpose() for easier processing
CurationReports <- CurationReports %>% list_transpose()
# Bind rows of site-specific vectors
ExcludedEntries_Primary <- as_tibble(do.call(rbind, CurationReports$ExcludedEntries$PrimaryExclusion))
CurationReports$ExcludedEntries$SiteA$PrimaryExclusion
?list_transpose
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Turn returned list 'inside-out' using purrr::list_transpose() for easier processing
CurationReportsW <- CurationReports %>% list_transpose()
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Turn returned list 'inside-out' using purrr::list_transpose() for easier processing
CurationReports <- CurationReports %>% list_transpose()
ExcludedEntries <- CurationReports$ExcludedEntries %>% list_transpose()
# Bind rows of site-specific vectors
ExcludedEntries_Primary <- as_tibble(do.call(rbind, ExcludedEntries$PrimaryExclusion))
ExcludedEntries_Secondary <- as_tibble(do.call(rbind, ExcludedEntries$SecondaryExclusion))
View(ExcludedEntries_Primary)
# Add row with column sums and add site name feature
ExcludedEntriesTable_Primary <- colSums(ExcludedEntries_Primary) %>%
bind_rows(ExcludedEntries_Primary) %>%
mutate(SiteName = c("All", names(DataSources)), .before = 1)
ExcludedEntriesTable_Secondary <- colSums(ExcludedEntries_Secondary) %>%
bind_rows(ExcludedEntries_Secondary) %>%
mutate(SiteName = c("All", names(DataSources)), .before = 1)
View(ExcludedEntriesTable_Primary)
devtools::load_all(".")
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
devtools::load_all(".")
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
View(CurationReport$ExcludedEntries$PrimaryExclusion)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 5000)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
### For testing purposes
DataSources <- CCPConnections
ServerCall <- call("GetReportingObjectDS",
ObjectName.S = "CurationReport")
CurationReports <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Turn returned list 'inside-out' using purrr::list_transpose() for easier processing
CurationReports <- CurationReports %>% list_transpose()
