symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i],
id.name = "_id")
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
# Try out data augmentation method
dsCCPhosClient::ds.AugmentData(Name_CurationOutput = "CurationOutput",
Name_Output = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
dsCCPhosClient::ds.UnpackAugmentedDataSet(Name_AugmentationOutput = "AugmentationOutput",
DataSources = CCPConnections)
ds.colnames(x = "ADS_Patients",
datasources = CCPConnections)
# For Testing Purposes
TableName <- "ADS_Patients"
MetricFeatureName <- "PatientAgeAtDiagnosis"
DataSources <- CCPConnections
ParametricStatistics <- ds.meanSdGp(x = paste0(TableName, "$", MetricFeatureName),
y = "1",
datasources = DataSources)
NonParametricStatistics_Split <- ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "split",
datasources = DataSources)
NonParametricStatistics_Combined <- ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "combine",
datasources = DataSources)
ParametricStatistics
Means <- ParametricStatistics$Mean_gp_study
Means
names(Means)
is.vector(Means)
typeof(Means)
is.matrix(Means)
as.data.frame(Means)
Means <- as.data.frame(Means)
names(Means)
t(Means)
names(t(Means))
Col_N <- t(ParametricStatistics$Nvalid_gp_study)
Col_N
Col_Mean <- t(ParametricStatistics$Mean_gp_study)
Col_SD <- t(ParametricStatistics$StDev_gp_study)
Col_SEM <- t(ParametricStatistics$SEM_gp_study)
df_Output <- tibble(N = Col_N,
Mean = Col_Mean,
SD = Col_SD,
SEM = Sol_SEM)
df_Output <- tibble(N = Col_N,
Mean = Col_Mean,
SD = Col_SD,
SEM = Col_SEM)
View(df_Output)
Col_N <- as.vector(ParametricStatistics$Nvalid_gp_study)
Col_N <- as.vector(ParametricStatistics$Nvalid_gp_study)
Col_Mean <- as.vector(ParametricStatistics$Mean_gp_study)
Col_SD <- as.vector(ParametricStatistics$StDev_gp_study)
Col_SEM <- as.vector(ParametricStatistics$SEM_gp_study)
df_Output <- tibble(N = Col_N,
Mean = Col_Mean,
SD = Col_SD,
SEM = Col_SEM)
View(df_Output)
ParametricStatistics$Nvalid_gp_study
colnames(ParametricStatistics$Nvalid_gp_study)
Col_Names <- colnames(ParametricStatistics$Nvalid_gp_study)
Col_SiteNames <- colnames(ParametricStatistics$Nvalid_gp_study)
df_Output <- tibble(Site = Col_SiteNames,
N = Col_N,
Mean = Col_Mean,
SD = Col_SD,
SEM = Col_SEM)
?replace
Col_SiteNames <- replace(Col_SiteNames, Col_SiteNames == "COMBINE", "All")
df_Output <- tibble(Site = Col_SiteNames,
N = Col_N,
Mean = Col_Mean,
SD = Col_SD,
SEM = Col_SEM)
Col_SiteNames <- colnames(ParametricStatistics$Nvalid_gp_study)
Col_SiteNames <- replace(Col_SiteNames, Col_SiteNames == "COMBINE", "All")
Col_N <- as.vector(ParametricStatistics$Nvalid_gp_study)
Col_Mean <- as.vector(ParametricStatistics$Mean_gp_study)
Col_SD <- as.vector(ParametricStatistics$StDev_gp_study)
Col_SEM <- as.vector(ParametricStatistics$SEM_gp_study)
df_Output <- tibble(Site = Col_SiteNames,
N = Col_N,
Mean = Col_Mean,
SD = Col_SD,
SEM = Col_SEM)
View(df_Output)
NonParametricStatistics_Split <- ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "split",
datasources = DataSources)
NonParametricStatistics_Split
unlist(NonParametricStatistics_Split)
?unlist
as.data.frame(NonParametricStatistics_Split)
t(as.data.frame(NonParametricStatistics_Split))
View(df_Output)
NonParametricStatistics_Combined <- ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "combine",
datasources = DataSources)
NonParametricStatistics_Combined
View(df_Output)
Test <- rbind(t(as.data.frame(NonParametricStatistics_Split)),
NonParametricStatistics_Combined)
Test
Test <- as.data.frame(rbind(t(as.data.frame(NonParametricStatistics_Split)),
NonParametricStatistics_Combined)
return(Outgoing)
Test <- as.data.frame(rbind(t(as.data.frame(NonParametricStatistics_Split)),
NonParametricStatistics_Combined))
View(Test)
Test <- as.data.frame(rbind(t(as.data.frame(NonParametricStatistics_Split)),
"All" = NonParametricStatistics_Combined))
View(Test)
ls_ParametricStatistics <- ds.meanSdGp(x = paste0(TableName, "$", MetricFeatureName),
y = "1",
datasources = DataSources)
Col_SiteNames <- colnames(ls_ParametricStatistics$Nvalid_gp_study)
Col_SiteNames <- replace(Col_SiteNames, Col_SiteNames == "COMBINE", "All")
Col_N <- as.vector(ls_ParametricStatistics$Nvalid_gp_study)
Col_Mean <- as.vector(ls_ParametricStatistics$Mean_gp_study)
Col_SD <- as.vector(ls_ParametricStatistics$StDev_gp_study)
Col_SEM <- as.vector(ls_ParametricStatistics$SEM_gp_study)
df_Output <- tibble(Site = Col_SiteNames,
N = Col_N,
Mean = Col_Mean,
SD = Col_SD,
SEM = Col_SEM)
ls_NonParametricStatistics_Split <- ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "split",
datasources = DataSources)
vc_NonParametricStatistics_Combined <- ds.quantileMean(x = paste0(TableName, "$", MetricFeatureName),
type = "combine",
datasources = DataSources)
df_NonParametricStatistics <- as.data.frame(rbind(t(as.data.frame(ls_NonParametricStatistics_Split)),
"All" = vc_NonParametricStatistics_Combined))
View(df_NonParametricStatistics)
View(df_Output)
#--- Nonparametric Statistics ---
Col_q5 <- df_NonParametricStatistics$`5%`
Col_Q1 <- df_NonParametricStatistics$`25%`
Col_Median <- df_NonParametricStatistics$`50%`
Col_Q3 <- df_NonParametricStatistics$`75%`
Col_q95 <- df_NonParametricStatistics$`95%`
df_Output <- tibble(Site = Col_SiteNames,
N = Col_N,
q5 = Col_q5,
Q1 = Col_Q1,
Median = Col_Median,
Q3 = Col_Q3,
q95 = Col_q95,
Mean = Col_Mean,
SD = Col_SD,
SEM = Col_SEM)
View(df_Output)
?ds.quantileMean
devtools::load_all(".")
library(dsCCPhosClient)
ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections)
# Data visualization
#~~~~~~~~~~~~~~~~~~~
use_r("MakeBoxViolinPlot.R")
library(devtools)
# Data visualization
#~~~~~~~~~~~~~~~~~~~
use_r("MakeBoxViolinPlot.R")
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections)
SampleStatistics
SampleStatistics["All", "q5"]
SampleStatistics["All", q5]
SampleStatistics[, "q5"]
View(SampleStatistics)
SampleStatistics[Site == "All", "q5"]
SampleStatistics["Site" == "All", "q5"]
SampleStatistics[SampleStatistics$Site == "All", "q5"]
# Create boxplot using ggplot
ggplot(PlotData, aes(ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
library(ggplot2)
# Create boxplot using ggplot
ggplot(PlotData, aes(ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
PlotData <- data.frame(ymin = SampleStatistics[SampleStatistics$Site == "All", "q5"],
lower = SampleStatistics[SampleStatistics$Site == "All", "Q1"],
middle = SampleStatistics[SampleStatistics$Site == "All", "Median"],
upper = SampleStatistics[SampleStatistics$Site == "All", "Q3"],
ymax = SampleStatistics[SampleStatistics$Site == "All", "q95"],
mean = SampleStatistics[SampleStatistics$Site == "All", "Mean"])
# Create boxplot using ggplot
ggplot(PlotData, aes(ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
PlotData <- data.frame(ymin = SampleStatistics[SampleStatistics$Site == "All", "q5"],
lower = SampleStatistics[SampleStatistics$Site == "All", "Q1"],
middle = SampleStatistics[SampleStatistics$Site == "All", "Median"],
upper = SampleStatistics[SampleStatistics$Site == "All", "Q3"],
ymax = SampleStatistics[SampleStatistics$Site == "All", "q95"],
mean = SampleStatistics[SampleStatistics$Site == "All", "Mean"])
View(PlotData)
View(PlotData)
colnames(PlotData) <- c("ymin", "lower", "middle", "upper", "ymax", "mean")
# Create boxplot using ggplot
ggplot(PlotData, aes(ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
?geom_boxplot
# Create boxplot using ggplot
ggplot(PlotData, aes(y = 1, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
# Create boxplot using ggplot
ggplot(PlotData, aes(y = PlotData, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
# Create boxplot using ggplot
ggplot(PlotData, aes(y = 0:80, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
# Create boxplot using ggplot
ggplot(PlotData, aes(y = 80, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
# Create boxplot using ggplot
ggplot(PlotData, aes(y = c(ymin, lower, middle, upper, ymax), ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
# Create boxplot using ggplot
ggplot(PlotData, aes(y = c(0, 20, 40, 60, 80, 100), ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
# Create boxplot using ggplot
ggplot(PlotData, aes(y = "Test", ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
# Create boxplot using ggplot
ggplot(PlotData, aes(x = "Test", ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
coord_flip() +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
# Create boxplot using ggplot
ggplot(PlotData, aes(x = "Test", ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
View(SampleStatistics)
df_PlotData <- data.frame(ymin = SampleStatistics$q5,
lower = SampleStatistics$Q1,
middle = SampleStatistics$Median,
upper = SampleStatistics$Q3,
ymax = SampleStatistics$q95,
mean = SampleStatistics$Mean)
View(df_PlotData)
View(df_PlotData)
# For testing purposes
SampleStatistics <- SampleStatistics
df_PlotData <- data.frame(x = SampleStatistics$Site,
ymin = SampleStatistics$q5,
lower = SampleStatistics$Q1,
middle = SampleStatistics$Median,
upper = SampleStatistics$Q3,
ymax = SampleStatistics$q95,
mean = SampleStatistics$Mean)
# Create boxplot using ggplot
Plot <- ggplot(PlotData, aes(x = x, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
Plot
df_PlotData <- data.frame(x = SampleStatistics$Site,
ymin = SampleStatistics$q5,
lower = SampleStatistics$Q1,
middle = SampleStatistics$Median,
upper = SampleStatistics$Q3,
ymax = SampleStatistics$q95,
mean = SampleStatistics$Mean)
View(df_PlotData)
# Create boxplot using ggplot
Plot <- ggplot(PlotData, aes(x = x, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
Plot
# Create boxplot using ggplot
Plot <- ggplot(PlotData, aes(x = df_PlotData$x, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
Plot
# Create boxplot using ggplot
Plot <- ggplot(df_PlotData, aes(x = x, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax)) +
geom_boxplot(stat = "identity", width = 0.5, fill = "lightblue") +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
labs(title = "Boxplot with Aggregated Data", y = "Value") +
theme_minimal()
Plot
devtools::load_all(".")
MakeBoxPlot(SampleStatistics)
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections) %>%
MakeBoxPlot()
# Data visualization
#~~~~~~~~~~~~~~~~~~~
# use_r("MakeBoxPlot.R")
use_r("ggTheme_CCP")
?use_package
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dplyr")
# use_package("DSI")
# use_package("tibble")
use_package("ggplot2", type = "Suggests")
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dplyr")
# use_package("DSI")
# use_package("ggplot2", type = "Suggests")
use_package("sysfonts", type = "Suggests")
devtools::load_all(".")
devtools::load_all(".")
# For testing purposes
SampleStatistics <- SampleStatistics
df_PlotData <- data.frame(x = SampleStatistics$Site,
ymin = SampleStatistics$q5,
lower = SampleStatistics$Q1,
middle = SampleStatistics$Median,
upper = SampleStatistics$Q3,
ymax = SampleStatistics$q95,
mean = SampleStatistics$Mean)
# Create boxplot using ggplot
Plot <- ggplot(data = df_PlotData,
aes(x = x,
ymin = ymin,
lower = lower,
middle = middle,
upper = upper,
ymax = ymax)) +
do.call(ggTheme, c(list(...),
list(Theme_SizeFactorTickLabels_x = 1.3),      # Increase x axis tick label text size by default
ThemeArguments)) +      # Pass additional optional arguments
geom_boxplot(stat = "identity",
width = 0.4,
alpha = 0.7,
outlier.shape = NA,
show.legend = FALSE) +
geom_point(aes(y = mean), color = "red", size = 2, shape = 19) +
labs(x = AxisTitle_x,
y = AxisTitle_y) +
#--- Option: If no axis title, delete space for label --------------
{
if (AxisTitle_x == "") { theme(axis.title.x = element_blank()) }
} + {
if (AxisTitle_y == "") { theme(axis.title.y = element_blank()) }
} +
scale_x_discrete(labels = label_wrap(TickLabelWidth_x)) +      # Set width of x axis tick mark labels, after which linebreak should occur
scale_y_continuous(labels = function(value) round(value, Decimals)) +
ylim(AxisLimits_y[1], AxisLimits_y[2]) +      # Set y axis limits
scale_fill_manual(values = FillPalette)      # Set custom fill color palette
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections) %>%
MakeBoxPlot()
??label_wrap
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dplyr")
# use_package("DSI")
# use_package("ggplot2", type = "Suggests")
use_package("scales", type = "Suggests")
devtools::load_all(".")
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections) %>%
MakeBoxPlot()
SampleStatistics
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections) %>%
TestPlot <- MakeBoxPlot(SampleStatistics)
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections) %>%
TestPlot <- MakeBoxPlot(SampleStatistics)
SampleStatistics <- ds.GetSampleStatistics(TableName = "ADS_Patients",
MetricFeatureName = "PatientAgeAtDiagnosis",
DataSources = CCPConnections)
TestPlot <- MakeBoxPlot(SampleStatistics)
TestPlot
devtools::load_all(".")
TestPlot <- MakeBoxPlot(SampleStatistics)
TestPlot
AlphaPalettes <- list(Levels_2 <- c(0.5, 0.9),
Levels_3 <- c(0.2, 0.5, 0.9),
Levels_4 <- c(0.3, 0.5, 0.7, 0.9),
Levels_5 <- c(0.4, 0.5, 0.6, 0.7, 0.8))
# Save data in .rda-file and make it part of package
use_data(AlphaPalettes, overwrite = TRUE)
Colors <- list(LightGrey = "#EDEDED",
MediumGrey = "#D0D0D0",
DarkGrey = "#595959",
#---------
Primary = "#054996",
PrimaryLight = "#05499650",
Secondary = "#8e1e39",
SecondaryLight = "#8e1e3950",
Tertiary = "#2B8C88",
TertiaryLight = "#2B8C8850",
#---------
Accent = "#960551",
AccentLight = "#96055150",
#---------
BlueNice = "#7EA6E0")
# Save data in .rda-file and make it part of package
use_data(Colors, overwrite = TRUE)
devtools::load_all(".")
devtools::load_all(".")
TestPlot <- MakeBoxPlot(SampleStatistics)
TestPlot
devtools::load_all(".")
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis")
TestPlot
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = Colors$BlueNice)
warnings()
TestPlot
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = Colors$BlueNice))
TestPlot
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = Colors$BlueNice,
"SiteA" = Colors$Primary,
"SiteB" = Colors$Secondary,
"SiteC" = Colors$Tertiary))
TestPlot
Colors$BlueNice
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c(Colors$BlueNice,
Colors$Primary,
Colors$Secondary,
Colors$Tertiary))
TestPlot
devtools::load_all(".")
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c(Colors$BlueNice,
Colors$Primary,
Colors$Secondary,
Colors$Tertiary))
TestPlot
Colors$DarkGrey
warnings()
library(dsCCPhosClient)
