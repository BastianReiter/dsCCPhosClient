symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i],
id.name = "_id")
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Make sure assignment was successful on all servers
ds.GetObjectInfo(ObjectName = "RawDataSet",
DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Ready for working with dsCCPhos
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# First test with dsBase-function
# Test <- ds.mean(x = "Metastasis$datum_fernmetastasen",
#                 type = "both",
#                 datasources = CCPConnections)
# Get validation report of Raw Data Set (RDS)
# ValidationReportRDS <- ds.GetValidationReport_RDS(Name_RawDataSet = "RawDataSet",
#                                                       DataSources = CCPConnections)
CCPhosApp::StartCCPhosApp(CCPConnections = CCPConnections,
CCPhosData = NULL)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   - Virtual dataSHIELD infrastructure for testing purposes -
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Install own dataSHIELD packages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#devtools::install_github(repo = "BastianReiter/dsCCPhos")
#devtools::install_github(repo = "BastianReiter/dsCCPhosClient")
#devtools::install_github(repo = "BastianReiter/CCPhosApp")
# Install additional datashield-packages
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#devtools::install_github("tombisho/dsSynthetic", dependencies = TRUE)
#devtools::install_github("tombisho/dsSyntheticClient", dependencies = TRUE)
#devtools::install_github("neelsoumya/dsSurvival")
#devtools::install_github("neelsoumya/dsSurvivalClient")
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load test data in local environment
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_A.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_B.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_C.RData")
CCPTestData_A <- CCPTestData_Small_A
CCPTestData_B <- CCPTestData_Small_B
CCPTestData_C <- CCPTestData_Small_C
#load("./Development/Data/RealData/CCPTestData_Total.RData")
#load("./Development/Data/RealData/CCPTestData_A.RData")
#load("./Development/Data/RealData/CCPTestData_B.RData")
#load("./Development/Data/RealData/CCPTestData_C.RData")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Setting up virtual servers with included test data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Server_SiteTotal <- newDSLiteServer(tables = CCPTestData_Total,
#                                     config = DSLite::defaultDSConfiguration(include = c("dsBase",
#                                                                                         "dsCCPhos")))
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Check out some server properties
# Server_SiteA$config()
# Server_SiteA$profile()
# Server_SiteA$assignMethods()
# Server_SiteA$aggregateMethods()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Establish connection to virtual servers
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
# LoginBuilder$append(server = "SiteTotal",
#                     url = "Server_SiteTotal",
#                     driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to servers
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Explore server configurations
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# List all available dataSHIELD methods on servers
DSI::datashield.methods(conns = CCPConnections)
# Alternatively use DSI::datashield.method_status() to get more comparable overview
# AGGREGATE functions
DSI::datashield.method_status(conns = CCPConnections,
type = "aggregate")
# ASSIGN functions
DSI::datashield.method_status(conns = CCPConnections,
type = "assign")
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Prepare data objects in server R sessions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Goal: Assignment of list object "RawDataSet" on all R server sessions
#-------------------------------------------------------------------------------
# Get overview of accessible tables on servers
DSI::datashield.tables(conns = CCPConnections)
# Get table names of CCP core data set
CCPTableNames_Raw <- dsCCPhos::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhos::Meta_TableNames$TableName_Curated
# Check if all tables are accessible on all servers
ls_TableCheck <- purrr::map(as.list(CCPTableNames_Curated),
function(tbl)
{
datashield.table_status(conns = CCPConnections,
table = tbl)
})
# Turn list into data.frame
df_TableCheck <- do.call(rbind, ls_TableCheck)
# Make tables from data repository accessible in R session
for(i in 1:length(CCPTableNames_Curated))
{
datashield.assign(conns = CCPConnections,
symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i],
id.name = "_id")
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Make sure assignment was successful on all servers
ds.GetObjectInfo(ObjectName = "RawDataSet",
DataSources = CCPConnections)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Ready for working with dsCCPhos
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# First test with dsBase-function
# Test <- ds.mean(x = "Metastasis$datum_fernmetastasen",
#                 type = "both",
#                 datasources = CCPConnections)
# Get validation report of Raw Data Set (RDS)
# ValidationReportRDS <- ds.GetValidationReport_RDS(Name_RawDataSet = "RawDataSet",
#                                                       DataSources = CCPConnections)
CCPhosApp::StartCCPhosApp(CCPConnections = CCPConnections,
CCPhosData = NULL)
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ConnectToCCP.R")
use_r("ConnectToVirtualCCP.R")
library(devtools)
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("ConnectToCCP.R")
use_r("ConnectToVirtualCCP.R")
?unique
?n_unique
?which
test1 <- a:f
test1 <- letters(1:10)
?letters
test1 <- letters[1:10]
test2 <- letters[3, 5, 7]
test2 <- letters[c(3, 5, 7)]
test2 %in% test1
test1 %in% test2
!(test1 %in% test2)
?assign
load("./Development/Data/RealData/CCPTestData_Total.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Total.RData")
# For testing purposes
CCPTestData <- CCPTestData_Total
NumberOfSites <- 4
AllPatientIDs <- CCPTestData$Patient$"_id"
CountTotalPatients <- n_distinct(AllPatientIDs)
PatientsPerSite <- floor(CountTotalPatients / NumberOfSites)
for (i in 1:NumberOfSites)
{
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
SiteTestData)
}
PartitionedTestData <- list()
for (i in 1:NumberOfSites)
{
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
SiteTestData)
}
# For testing purposes
CCPTestData <- CCPTestData_Total
NumberOfSites <- 4
AllPatientIDs <- CCPTestData$Patient$"_id"
CountTotalPatients <- n_distinct(AllPatientIDs)
PatientsPerSite <- floor(CountTotalPatients / NumberOfSites)
PartitionedTestData <- list()
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
SiteTestData)
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
SiteTestData)
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
SiteTestData)
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
{
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
SiteTestData)
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
}
# For testing purposes
CCPTestData <- CCPTestData_Total
NumberOfSites <- 4
AllPatientIDs <- CCPTestData$Patient$"_id"
CountTotalPatients <- n_distinct(AllPatientIDs)
PatientsPerSite <- floor(CountTotalPatients / NumberOfSites)
PartitionedTestData <- list()
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
paste0("Site", LETTERS[i]) = SiteTestData)
# For testing purposes
CCPTestData <- CCPTestData_Total
NumberOfSites <- 4
AllPatientIDs <- CCPTestData$Patient$"_id"
CountTotalPatients <- n_distinct(AllPatientIDs)
PatientsPerSite <- floor(CountTotalPatients / NumberOfSites)
PartitionedTestData <- list()
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
list(SiteTestData))
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
list(SiteTestData))
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
list(SiteTestData))
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
PartitionedTestData <- c(PartitionedTestData,
list(SiteTestData))
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
# For testing purposes
CCPTestData <- CCPTestData_Total
NumberOfSites <- 4
AllPatientIDs <- CCPTestData$Patient$"_id"
CountTotalPatients <- n_distinct(AllPatientIDs)
PatientsPerSite <- floor(CountTotalPatients / NumberOfSites)
PartitionedTestData <- list()
for (i in 1:NumberOfSites)
{
# Get a random sample of PatientIDs
SitePatientIDs <- sample(AllPatientIDs, PatientsPerSite)
# Get data subsets that relate to samples PatientIDs
SiteTestData <- list(BioSampling = as.data.frame(filter(CCPTestData$BioSampling, CCPTestData$BioSampling$"patient-id" %in% SitePatientIDs)),
Diagnosis = as.data.frame(filter(CCPTestData$Diagnosis, CCPTestData$Diagnosis$"patient-id" %in% SitePatientIDs)),
Histology = as.data.frame(filter(CCPTestData$Histology, CCPTestData$Histology$"patient-id" %in% SitePatientIDs)),
Metastasis = as.data.frame(filter(CCPTestData$Metastasis, CCPTestData$Metastasis$"patient-id" %in% SitePatientIDs)),
MolecularDiagnostics = as.data.frame(filter(CCPTestData$MolecularDiagnostics, CCPTestData$MolecularDiagnostics$"patient-id" %in% SitePatientIDs)),
Patient = as.data.frame(filter(CCPTestData$Patient, CCPTestData$Patient$"_id" %in% SitePatientIDs)),
Progress = as.data.frame(filter(CCPTestData$Progress, CCPTestData$Progress$"patient-id" %in% SitePatientIDs)),
RadiationTherapy = as.data.frame(filter(CCPTestData$RadiationTherapy, CCPTestData$RadiationTherapy$"patient-id" %in% SitePatientIDs)),
Staging = as.data.frame(filter(CCPTestData$Staging, CCPTestData$Staging$"patient-id" %in% SitePatientIDs)),
Surgery = as.data.frame(filter(CCPTestData$Surgery, CCPTestData$Surgery$"patient-id" %in% SitePatientIDs)),
SystemicTherapy = as.data.frame(filter(CCPTestData$SystemicTherapy, CCPTestData$SystemicTherapy$"patient-id" %in% SitePatientIDs)))
# Add data list to big list
PartitionedTestData <- c(PartitionedTestData,
list(SiteTestData))
# Update AllPatientIDs: Delete already taken PatientIDs
AllPatientIDs <- AllPatientIDs[!(AllPatientIDs %in% SitePatientIDs)]
}
# Determin names of virtual sites
SiteNames <- paste0("Site", LETTERS[1:NumberOfSites])
?assign
?datashield.login
devtools::load_all(".")
devtools::load_all(".")
View(CCPTestData_Small_C)
Test <- ConnectToVirtualCCP(CCPTestData = CCPTestData_Total,
NumberOfSites = 3)
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = Test)
CCPConnections <- ConnectToVirtualCCP(CCPTestData = CCPTestData_Total,
NumberOfSites = 3)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
CCPConnections <- ConnectToVirtualCCP(CCPTestData = CCPTestData_Total,
NumberOfSites = 3)
devtools::load_all(".")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = CCPTestData_Total,
NumberOfSites = 3)
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Total.RData")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = CCPTestData_Total,
NumberOfSites = 3)
# List all available dataSHIELD methods on servers
DSI::datashield.methods(conns = CCPConnections)
# Alternatively use DSI::datashield.method_status() to get more comparable overview
# AGGREGATE functions
DSI::datashield.method_status(conns = CCPConnections,
type = "aggregate")
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = CCPConnections)
# Alternatively use DSI::datashield.method_status() to get more comparable overview
# AGGREGATE functions
DSI::datashield.method_status(conns = CCPConnections,
type = "aggregate")
# ASSIGN functions
DSI::datashield.method_status(conns = CCPConnections,
type = "assign")
# ASSIGN functions
Test <- DSI::datashield.method_status(conns = CCPConnections,
type = "assign")
View(Test)
Meta_RequiredCCPhosFunctions <- data.frame(FunctionName = character(),
FunctionType = character())
View(Meta_RequiredCCPhosFunctions)
?add_row
Meta_RequiredCCPhosFunctions <- data.frame(FunctionName = character(),
FunctionType = character()) %>%
add_row(FunctionName = "GetCurationReportDS", FunctionType = "aggregate")
View(Meta_RequiredCCPhosFunctions)
Meta_RequiredCCPhosFunctions <- data.frame(FunctionName = character(),
FunctionType = character()) %>%
add_row(FunctionName = "GetCurationReportDS", FunctionType = "aggregate") %>%
add_row(FunctionName = "AugmentDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "CurateDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "UnpackAugmentedDataSetDS", FunctionType = "assign") %>%
add_row(FunctionName = "UnpackCuratedDataSetDS", FunctionType = "assign")
# Save data in .rda-file and make it part of package
use_data(Meta_RequiredCCPhosFunctions, overwrite = TRUE)
library(usethis)
Meta_RequiredCCPhosFunctions <- data.frame(FunctionName = character(),
FunctionType = character()) %>%
add_row(FunctionName = "GetCurationReportDS", FunctionType = "aggregate") %>%
add_row(FunctionName = "AugmentDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "CurateDataDS", FunctionType = "assign") %>%
add_row(FunctionName = "UnpackAugmentedDataSetDS", FunctionType = "assign") %>%
add_row(FunctionName = "UnpackCuratedDataSetDS", FunctionType = "assign")
# Save data in .rda-file and make it part of package
use_data(Meta_RequiredCCPhosFunctions, overwrite = TRUE)
devtools::load_all(".")
# List all available dataSHIELD methods on servers
DSI::datashield.methods(conns = CCPConnections)
# Alternatively use DSI::datashield.method_status() to get more comparable overview
# AGGREGATE functions
DSI::datashield.method_status(conns = CCPConnections,
type = "aggregate")
