TestPlot
devtools::load_all(".")
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c(Colors$BlueNice,
Colors$Primary,
Colors$Secondary,
Colors$Tertiary))
TestPlot
devtools::load_all(".")
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c(Colors$BlueNice,
Colors$Primary,
Colors$Secondary,
Colors$Tertiary))
TestPlot
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = Colors$MediumGrey,
"SiteA" = Colors$Primary,
"SiteB" = Colors$Secondary,
"SiteC" = Colors$Tertiary))
TestPlot
devtools::load_all(".")
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = Colors$MediumGrey,
"SiteA" = Colors$Primary,
"SiteB" = Colors$Secondary,
"SiteC" = Colors$Tertiary))
TestPlot
devtools::load_all(".")
TestPlot <- MakeBoxPlot(SampleStatistics = SampleStatistics,
AxisTitle_y = "Patient age at diagnosis",
FillPalette = c("All" = Colors$MediumGrey,
"SiteA" = Colors$Primary,
"SiteB" = Colors$Secondary,
"SiteC" = Colors$Tertiary))
TestPlot
?ds.meanSdGp
?ds.quantileMean
?ds.extractQuantiles
?ds.ranksSecure
ds.ranksSecure(input.var.name = "ADS_Patients$PatientAgeAtDiagnosis",
datasources = CCPConnections)
datashield.errors()
# Data visualization
#~~~~~~~~~~~~~~~~~~~
# use_r("ExportPlot.R")
# use_r("ggTheme_CCP")
# use_r("gtTheme_CCP")
# use_r("MakeBoxPlot.R")
use_r("MakeColumnPlot.R")
load("C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Reporting/MonitorData_Frankfurt.RData")
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(Name_CurationOutput = "CurationOutput",
DataSources = CCPConnections)
?save
save(CurationReports$SiteA,
file = "../Reporting/TransformationMonitor.rda")
CurationReports$SiteA
# For testing purposes
TransformationMonitor <- CurationReports$SiteA
save(TransformationMonitor,
file = "../Reporting/TransformationMonitor.rda")
save(TransformationMonitor,
file = "./Development/Reporting/TransformationMonitor.rda")
#| label: Setup
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = FALSE)
SiteName <- "Frankfurt"
source(here::here("Scripts/SETUP.R"))
#| label: Setup
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = FALSE)
#SiteName <- "Frankfurt"
#source(here::here("Scripts/SETUP.R"))
load("./Development/Reporting/Monitoring/TransformationMonitor.rda")
load("./Development/Reporting/TransformationMonitor.rda")
#| label: HarmonizationMonitors
#| warning: false
load("./Development/Reporting/TransformationMonitor.rda")
#| label: HarmonizationMonitors
#| warning: false
load("TransformationMonitor.rda")
ls_Tables <- map(TransformationMonitor,
function(inp_df)
{
inp_df %>%
gt(groupname_col = "Feature") %>%
theme_gt_CDSG(inp_TableAlign = "left", inp_ShowNAs = TRUE, inp_TableWidth = "80%") %>%
tab_style(locations = cells_body(rows = (Value != "NA" & IsValueEligible == TRUE & Final > 0)),
style = cell_fill(color = "green")) %>%
tab_style(locations = cells_body(rows = (Value != "NA" & IsValueEligible == TRUE & Final == 0)),
style = cell_fill(color = "lightgreen")) %>%
tab_style(locations = cells_body(rows = (Value == "NA" | is.na(Value))),
style = cell_fill(color = "gray")) %>%
tab_style(locations = cells_body(columns = c(Value, IsValueEligible, Transformed),
rows = (Value != "NA" & IsValueEligible == FALSE & Transformed > 0 & Final == 0)),
style = cell_fill(color = "red")) %>%
tab_style(locations = cells_body(columns = c(Value, IsValueEligible, Raw, Transformed),
rows = (Value != "NA" & IsValueEligible == FALSE & Raw > 0 & Transformed == 0)),
style = cell_fill(color = "orange"))
})
#| label: Setup
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = FALSE)
#SiteName <- "Frankfurt"
source(here::here("RSetup.R"))
#| label: Setup
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = FALSE)
#SiteName <- "Frankfurt"
source("RSetup.R"))
#| label: Setup
#| echo: false
#| include: false
knitr::opts_chunk$set(echo = FALSE)
#SiteName <- "Frankfurt"
source("RSetup.R")
# Exemplary look at a curation report table
View(CurationReports$SiteA$Monitor_Staging)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Monitor_Diagnosis)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Monitor_Diagnosis)
View(CCPTestData_Small_A$Diagnosis)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
library(dsCCPhosClient)
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_A.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_B.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_C.RData")
CCPTestData_A <- CCPTestData_Small_A
CCPTestData_B <- CCPTestData_Small_B
CCPTestData_C <- CCPTestData_Small_C
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to servers
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = CCPConnections)
# Get table names of CCP core data set
CCPTableNames_Raw <- dsCCPhos::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhos::Meta_TableNames$TableName_Curated
# Make tables from data repository accessible in R session
for(i in 1:length(CCPTableNames_Curated))
{
datashield.assign(conns = CCPConnections,
symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i],
id.name = "_id")
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(Name_CurationOutput = "CurationOutput",
DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Monitor_Diagnosis)
# For testing purposes
TransformationMonitor <- CurationReports$SiteA
save(TransformationMonitor,
file = "./Development/Reporting/TransformationMonitor.rda")
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_A.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_B.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_C.RData")
CCPTestData_A <- CCPTestData_Small_A
CCPTestData_B <- CCPTestData_Small_B
CCPTestData_C <- CCPTestData_Small_C
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to servers
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = CCPConnections)
# Get table names of CCP core data set
CCPTableNames_Raw <- dsCCPhos::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhos::Meta_TableNames$TableName_Curated
# Make tables from data repository accessible in R session
for(i in 1:length(CCPTableNames_Curated))
{
datashield.assign(conns = CCPConnections,
symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i],
id.name = "_id")
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReports <- dsCCPhosClient::ds.GetCurationReport(Name_CurationOutput = "CurationOutput",
DataSources = CCPConnections)
# Exemplary look at a curation report table
View(CurationReports$SiteA$Monitor_Diagnosis)
# For testing purposes
TransformationMonitor <- CurationReports$SiteA
save(TransformationMonitor,
file = "./Development/Reporting/TransformationMonitor.rda")
library(devtools)
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dplyr")
# use_package("DSI")
# use_package("ggplot2", type = "Suggests")
# use_package("gt", type = "Suggests")
use_package("quarto", type = "Suggests")
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dplyr")
# use_package("DSI")
# use_package("ggplot2", type = "Suggests")
# use_package("gt", type = "Suggests")
# use_package("quarto", type = "Suggests")
use_package("rmarkdown", type = "Suggests")
# Data visualization
#~~~~~~~~~~~~~~~~~~~
# use_r("ExportPlot")
# use_r("ggTheme_CCP")
# use_r("gtTheme_CCP")
# use_r("MakeBoxPlot")
# use_r("MakeColumnPlot")
use_r("MakeCurationReport")
?quarto::quarto_render
?tryCatch
devtools::load_all(".")
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_A.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_B.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_C.RData")
CCPTestData_A <- CCPTestData_Small_A
CCPTestData_B <- CCPTestData_Small_B
CCPTestData_C <- CCPTestData_Small_C
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to servers
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = CCPConnections)
# Get table names of CCP core data set
CCPTableNames_Raw <- dsCCPhos::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhos::Meta_TableNames$TableName_Curated
# Make tables from data repository accessible in R session
for(i in 1:length(CCPTableNames_Curated))
{
datashield.assign(conns = CCPConnections,
symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i],
id.name = "_id")
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
dsCCPhosClient::MakeCurationReport(ReportTemplatePath = "./Development/Reporting/CurationReport.qmd")
?quarto::quarto_render
?save
?saveRDS
?quarto::quarto_render
# For testing purposes
CurationReport <- CurationReports
ReportTemplatePath <- "./Development/Reporting/CurationReport.qmd "
saveRDS(object = CurationReport,
file = "./Developmente/Reporting/CurationReport.rds")
saveRDS(object = CurationReport,
file = "./Development/Reporting/CurationReport.rds")
quarto_render(input = ReportTemplatePath,
execute_params = list(PathToCurationReportData = "CurationReport.rds"))
devtools::load_all(".")
library(dsCCPhosClient)
# For testing purposes
CurationReport <- CurationReports
ReportTemplatePath <- "./Development/Reporting/CurationReport.qmd "
saveRDS(object = CurationReport,
file = "./Development/Reporting/CurationReport.rds")
tryCatch({
quarto_render(input = ReportTemplatePath,
execute_params = list(PathToCurationReportData = "CurationReport.rds"))
cat("Report created successfully!\n")
},
error = function(e)
{
cat("Error rendering Quarto document:", conditionMessage(e), "\n")
})
ReportTemplatePath <- "./Development/Reporting/CurationReport.qmd"
saveRDS(object = CurationReport,
file = "./Development/Reporting/CurationReport.rds")
tryCatch({
quarto_render(input = ReportTemplatePath,
execute_params = list(PathToCurationReportData = "CurationReport.rds"))
cat("Report created successfully!\n")
},
error = function(e)
{
cat("Error rendering Quarto document:", conditionMessage(e), "\n")
})
?quarto_serve
?quarto_render
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(Name_CurationOutput = "CurationOutput",
DataSources = CCPConnections)
devtools::load_all(".")
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(Name_CurationOutput = "CurationOutput",
DataSources = CCPConnections)
dsCCPhosClient::MakeCurationReport(CurationReportData = CurationReport,
ReportTemplatePath = "./Development/Reporting/CurationReport.qmd")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dplyr")
# use_package("DSI")
# use_package("ggplot2", type = "Suggests")
# use_package("gt", type = "Suggests")
# use_package("quarto", type = "Suggests")
# use_package("rmarkdown", type = "Suggests")
# use_package("scales", type = "Suggests")
# use_package("sysfonts", type = "Suggests")
# use_package("tibble")
use_package("utils", type = "Suggests")
PathToRenderedReport <- str_replace(PathToReportTemplate, pattern = ".qmd", ".html")
# For testing purposes
# CurationReport <- CurationReport
PathReportTemplate <- "./Development/Reporting/CurationReport.qmd"
PathToRenderedReport <- str_replace(PathToReportTemplate, pattern = ".qmd", ".html")
# For testing purposes
# CurationReport <- CurationReport
PathToReportTemplate <- "./Development/Reporting/CurationReport.qmd"
PathToRenderedReport <- str_replace(PathToReportTemplate, pattern = ".qmd", ".html")
?str_replace
devtools::load_all(".")
dsCCPhosClient::MakeCurationReport(CurationReportData = CurationReport,
PathToReportTemplate = "./Development/Reporting/CurationReport.qmd")
# Temporarily save R object containing curation report data to make it accessible to the Quarto background R sesssion
saveRDS(object = CurationReport,
file = "./Development/Reporting/CurationReport.rds")
PathToRenderedReport <- quarto_render(input = PathToReportTemplate,
execute_params = list(PathToCurationReportData = "CurationReport.rds"))
?quarto_render
devtools::load_all(".")
devtools::load_all(".")
dsCCPhosClient::MakeCurationReport(CurationReportData = CurationReport,
PathToReportTemplate = "./Development/Reporting/CurationReport.qmd")
shiny::runApp('Development/Reporting/ShinyApp/CCPhos')
runApp('Development/Reporting/ShinyApp/CCPhos')
# Load needed packages
library(dsBase)
library(dsBaseClient)
library(dsCCPhos)
library(dsCCPhosClient)
library(DSLite)
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_A.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_B.RData")
load("../dsCCPhos/Development/Data/TestData/CCPTestData_Small_C.RData")
CCPTestData_A <- CCPTestData_Small_A
CCPTestData_B <- CCPTestData_Small_B
CCPTestData_C <- CCPTestData_Small_C
Server_SiteA <- newDSLiteServer(tables = CCPTestData_A,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteB <- newDSLiteServer(tables = CCPTestData_B,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
Server_SiteC <- newDSLiteServer(tables = CCPTestData_C,
config = DSLite::defaultDSConfiguration(include = c("dsBase",
"dsCCPhos")))
# Returns an environment
LoginBuilder <- DSI::newDSLoginBuilder(.silent = FALSE)
LoginBuilder$append(server = "SiteA",
url = "Server_SiteA",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteB",
url = "Server_SiteB",
driver = "DSLiteDriver")
LoginBuilder$append(server = "SiteC",
url = "Server_SiteC",
driver = "DSLiteDriver")
# Returns a data frame of login data to servers
LoginData <- LoginBuilder$build()
# Get list of DSConnection objects of all servers
CCPConnections <- DSI::datashield.login(logins = LoginData,
assign = TRUE)
# Get info about installed packages on servers
DSI::datashield.pkg_status(conns = CCPConnections)
# Get table names of CCP core data set
CCPTableNames_Raw <- dsCCPhos::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhos::Meta_TableNames$TableName_Curated
# Make tables from data repository accessible in R session
for(i in 1:length(CCPTableNames_Curated))
{
datashield.assign(conns = CCPConnections,
symbol = CCPTableNames_Curated[i],
value = CCPTableNames_Curated[i],
id.name = "_id")
}
# Consolidate all raw data tables in one list object called "RawDataSet"
ds.list(x = CCPTableNames_Curated,
newobj = "RawDataSet",
datasources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
dsCCPhosClient::ds.CurateData(Name_RawDataSet = "RawDataSet",
Name_Output = "CurationOutput",
DataSources = CCPConnections)
# Get Curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(Name_CurationOutput = "CurationOutput",
DataSources = CCPConnections)
saveRDS(object = CurationReport,
file = "CurationReport.rds")
CCPhosApp::StartCCPhosApp(CCPhosData = CurationReport)
devtools::load_all(".")
