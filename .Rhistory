Stage = "Raw")
RDSValidationReports <- ds.GetRDSValidationReport()
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = "1000",
SampleName = "RDSSample")
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = 1000,
SampleName = "RDSSample")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
test <- 1:10 / 3
as.character(test)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
CheckServerRequirements()
LoadRawDataSet(ServerSpecifications = NULL)
RDSTableCheck <- ds.GetDataSetCheck(DataSetName = "RawDataSet",
Stage = "Raw")
ds.DrawSample(RawDataSetName = "RawDataSet",
SampleSize = 1000,
SampleName = "RDSSample")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
CDSTableCheck <- ds.GetDataSetCheck(DataSetName = "CuratedDataSet",
Stage = "Curated")
# Get curation reports
CurationReport <- ds.GetCurationReport()
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
ADSTableCheck <- ds.GetDataSetCheck(DataSetName = "AugmentedDataSet")
quote(dsCCPhos::CurateDataDS)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
devtools::load_all(".")
?getExportedValue
getExportedValue("stats", "rnorm")
?DSI::datashield.assign
library(devtools)
# Set up central roxygen "script"
#-------------------------------------------------------------------------------
use_package_doc()
# Use the %>%-operator in this package (not enough to import dplyr)
#-------------------------------------------------------------------------------
use_pipe(export = FALSE)
# Use specific functions from external packages
#-------------------------------------------------------------------------------
use_import_from("dsFredaClient", c("DisplayTimeSeries",
"ds.ExtractFromList",
"ds.FilterTable",
"ds.GetCrossTab",
"ds.GetCurationReport",
"ds.GetDataSetCheck",
"ds.GetFeatureInfo",
"ds.GetFrequencyTable",
"ds.GetObjectMetaData",
"ds.GetObjectStatus",
"ds.GetSampleStatistics",
"ds.GetTableCheck",
"ds.GetTTEModel",
"ds.JoinTables",
"ds.MakeList",
"ds.MutateTable",
"ExploreFeature",
"ExportPlot",
"GetEligibleValues",
"GetServerOpalInfo",
"GetServerWorkspaceInfo",
"ggTheme",
"gtTheme",
"MakeBoxPlot",
"MakeColumnPlot"))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
use_package("assertthat")
use_package("cli")
use_package("dplyr")
use_dev_package("dsBaseClient", remote = "devtools::datashield/dsBaseClient")
use_package("dsTidyverseClient", type = "Suggests")
use_package("DSLite", type = "Suggests")
use_package("DSI")
use_package("purrr")
use_package("ggplot2", type = "Suggests")
use_package("gt", type = "Suggests")
use_package("quarto", type = "Suggests")
use_package("scales", type = "Suggests")
use_package("sysfonts", type = "Suggests")
use_package("tibble")
use_package("tidyr")
use_package("dsTidyverse", type = "Suggests")
use_package("utils", type = "Suggests")
# Use specific functions from external packages
#-------------------------------------------------------------------------------
use_import_from("dsFredaClient", c("AddCumulativeRow",
"CheckDSConnections",
"DisplayTimeSeries",
"ds.ExtractFromList",
"ds.FilterTable",
"ds.GetCrossTab",
"ds.GetCurationReport",
"ds.GetDataSetCheck",
"ds.GetFeatureInfo",
"ds.GetFrequencyTable",
"ds.GetObjectMetaData",
"ds.GetObjectStatus",
"ds.GetSampleStatistics",
"ds.GetTableCheck",
"ds.GetTTEModel",
"ds.JoinTables",
"ds.MakeList",
"ds.MutateTable",
"ExploreFeature",
"ExportPlot",
"GetEligibleValues",
"GetServerOpalInfo",
"GetServerWorkspaceInfo",
"ggTheme",
"gtTheme",
"MakeBoxPlot",
"MakeColumnPlot"))
?floor
?n_distinct
?PrintMessages
devtools::load_all(".")
# Use specific functions from external packages
#-------------------------------------------------------------------------------
use_import_from("dsFredaClient", c("AddCumulativeRow",
"CheckDSConnections",
"DisplayTimeSeries",
"ds.ExtractFromList",
"ds.FilterTable",
"ds.GetCrossTab",
"ds.GetCurationReport",
"ds.GetDataSetCheck",
"ds.GetFeatureInfo",
"ds.GetFrequencyTable",
"ds.GetObjectMetaData",
"ds.GetObjectStatus",
"ds.GetSampleStatistics",
"ds.GetTableCheck",
"ds.GetTTEModel",
"ds.JoinTables",
"ds.MakeList",
"ds.MutateTable",
"ExploreFeature",
"ExportPlot",
"GetEligibleValues",
"GetServerOpalInfo",
"GetServerWorkspaceInfo",
"ggTheme",
"gtTheme",
"MakeBoxPlot",
"MakeColumnPlot",
"MakeFunctionMessage"))
library(devtools)
library(dplyr)
# Use specific functions from external packages
#-------------------------------------------------------------------------------
use_import_from("dsFredaClient", c("AddCumulativeRow",
"CheckDSConnections",
"DisplayTimeSeries",
"ds.ExtractFromList",
"ds.FilterTable",
"ds.GetCrossTab",
"ds.GetCurationReport",
"ds.GetDataSetCheck",
"ds.GetFeatureInfo",
"ds.GetFrequencyTable",
"ds.GetObjectMetaData",
"ds.GetObjectStatus",
"ds.GetSampleStatistics",
"ds.GetTableCheck",
"ds.GetTTEModel",
"ds.JoinTables",
"ds.MakeList",
"ds.MutateTable",
"ExploreFeature",
"ExportPlot",
"GetEligibleValues",
"GetServerOpalInfo",
"GetServerWorkspaceInfo",
"ggTheme",
"gtTheme",
"MakeBoxPlot",
"MakeColumnPlot",
"MakeFunctionMessage"))
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsFredaClient)
library(dsTidyverseClient)
library(resourcer)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
# Definition of test resource, exemplary with local csv-file
TestResource <- resourcer::newResource(name = "TestResource",
#url = "file://./Development/Test/DummyData.csv",
url = "file://localhost/C:/Users/Basti/ARBEIT Lokal/dsCCPhosClient/Development/Test/DummyData.csv",
format = "csv")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfServers = 3,
NumberOfPatientsPerServer = 2000,
AddedDsPackages = "dsTidyverse",
Resources = list(TestResource = TestResource))
LoadRawDataSet(ServerSpecifications = NULL)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Test <- ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
RawDataSetName <- "RawDataSet"
OutputName <- "CurationOutput"
RunAssignmentChecks <- TRUE
UnpackCuratedDataSet <- TRUE
DSConnections <- CCPConnections
# Initiate output messaging objects
Messages <- list()
if (RunAssignmentChecks == TRUE) { Messages$Assignment <- list() }
Messages$CurationCompletion <- list()
# 1) Trigger dsCCPhos::CurateDataDS()
#-------------------------------------------------------------------------------
# Execute the server-side function call
DSI::datashield.assign(conns = DSConnections,
symbol = OutputName,
value = call("CurateDataDS",
RawDataSetName.S = RawDataSetName,
Settings.S = Settings))
Settings <- NULL
# 1) Trigger dsCCPhos::CurateDataDS()
#-------------------------------------------------------------------------------
# Execute the server-side function call
DSI::datashield.assign(conns = DSConnections,
symbol = OutputName,
value = call("CurateDataDS",
RawDataSetName.S = RawDataSetName,
Settings.S = Settings))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if assignment of CurationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = OutputName,
DSConnections = DSConnections))
}
CurationOutputObjects <- c("CuratedDataSet",
"CurationReport",
"Messages")
for(i in 1:length(CurationOutputObjects))
{
# Execute server-side list extraction
DSI::datashield.assign(conns = DSConnections,
symbol = CurationOutputObjects[i],
value = call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = CurationOutputObjects[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = CurationOutputObjects[i],
DSConnections = DSConnections))
}
}
# Optionally unpack (unlist) CuratedDataSet
if (UnpackCuratedDataSet == TRUE)
{
# Get curated table names
CCPTableNames.CDS <- dsCCPhosClient::Meta.Tables$TableName.Curated
for(i in 1:length(CCPTableNames.CDS))
{
# Execute server-side assign function
DSI::datashield.assign(conns = DSConnections,
symbol = paste0("CDS.", CCPTableNames.CDS[i]),      # E.g. 'CDS.Metastasis'
value = call("ExtractFromListDS",
ListName.S = "CuratedDataSet",
ObjectName.S = CCPTableNames.CDS[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = paste0("CDS.", CCPTableNames.CDS[i]),
DSConnections = DSConnections))
}
}
}
if (RunAssignmentChecks == TRUE)
{
# Turn list into (named) vector
Messages$Assignment <- purrr::list_c(Messages$Assignment)
# Add topic element to start of vector
Messages$Assignment <- c(Topic = "Object assignment on servers",
Messages$Assignment)
}
CurationMessages <- DSI::datashield.aggregate(conns = DSConnections,
expr = call("GetReportingObjectDS",
ObjectName.S = "Messages"))
# Create table object for output
CurationCompletionCheck <- Messages %>%
map(\(ServerMessages) tibble(CheckCurationCompletion = ServerMessages$CheckCurationCompletion) ) %>%
list_rbind(names_to = "ServerName")
# Create table object for output
CurationCompletionCheck <- Messages %>%
map(\(ServerMessages) tibble(CheckCurationCompletion = ServerMessages$CheckCurationCompletion) ) %>%
list_rbind(names_to = "ServerName")
Messages
#--- For Testing Purposes ---
RawDataSetName <- "RawDataSet"
OutputName <- "CurationOutput"
Settings <- NULL
RunAssignmentChecks <- TRUE
UnpackCuratedDataSet <- TRUE
DSConnections <- CCPConnections
# Initiate output messaging objects
Messages <- list()
if (RunAssignmentChecks == TRUE) { Messages$Assignment <- list() }
Messages$CurationCompletion <- list()
# 1) Trigger dsCCPhos::CurateDataDS()
#-------------------------------------------------------------------------------
# Execute the server-side function call
DSI::datashield.assign(conns = DSConnections,
symbol = OutputName,
value = call("CurateDataDS",
RawDataSetName.S = RawDataSetName,
Settings.S = Settings))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if assignment of CurationOutput succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = OutputName,
DSConnections = DSConnections))
}
CurationOutputObjects <- c("CuratedDataSet",
"CurationReport",
"Messages")
for(i in 1:length(CurationOutputObjects))
{
# Execute server-side list extraction
DSI::datashield.assign(conns = DSConnections,
symbol = CurationOutputObjects[i],
value = call("ExtractFromListDS",
ListName.S = OutputName,
ObjectName.S = CurationOutputObjects[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = CurationOutputObjects[i],
DSConnections = DSConnections))
}
}
# Optionally unpack (unlist) CuratedDataSet
if (UnpackCuratedDataSet == TRUE)
{
# Get curated table names
CCPTableNames.CDS <- dsCCPhosClient::Meta.Tables$TableName.Curated
for(i in 1:length(CCPTableNames.CDS))
{
# Execute server-side assign function
DSI::datashield.assign(conns = DSConnections,
symbol = paste0("CDS.", CCPTableNames.CDS[i]),      # E.g. 'CDS.Metastasis'
value = call("ExtractFromListDS",
ListName.S = "CuratedDataSet",
ObjectName.S = CCPTableNames.CDS[i]))
if (RunAssignmentChecks == TRUE)
{
# Call helper function to check if object assignment succeeded
Messages$Assignment <- c(Messages$Assignment,
ds.GetObjectStatus(ObjectName = paste0("CDS.", CCPTableNames.CDS[i]),
DSConnections = DSConnections))
}
}
}
if (RunAssignmentChecks == TRUE)
{
# Turn list into (named) vector
Messages$Assignment <- purrr::list_c(Messages$Assignment)
# Add topic element to start of vector
Messages$Assignment <- c(Topic = "Object assignment on servers",
Messages$Assignment)
}
# Create table object for output
CurationCompletionCheck <- CurationMessages %>%
map(\(ServerMessages) tibble(CheckCurationCompletion = ServerMessages$CheckCurationCompletion) ) %>%
list_rbind(names_to = "ServerName")
# Create vector of messages informing about curation completion
Messages$CurationCompletion <- CurationMessages %>%
imap(function(ServerMessages, servername)
{
case_when(ServerMessages$CheckCurationCompletion == "green" ~ dsFredaClient::MakeFunctionMessage(Text = paste0("Curation on server '", servername, "' performed successfully!"),
IsClassSuccess = TRUE),
ServerMessages$CheckCurationCompletion == "yellow" ~ dsFredaClient::MakeFunctionMessage(Text = paste0("Curation on server '", servername, "' performed with warnings! \n",
ServerMessages$FinalMessage),
IsClassWarning = TRUE),
ServerMessages$CheckCurationCompletion == "red" ~ dsFredaClient::MakeFunctionMessage(Text = paste0("Curation on server '", servername, "' could not be performed! \n",
ServerMessages$FinalMessage),
IsClassFailure = TRUE),
TRUE ~ dsFredaClient::MakeFunctionMessage(Text = paste0("Curation on server '", servername, "' could not be assessed. \n",
ServerMessages$FinalMessage),
IsClassFailure = TRUE))
}) %>%
list_c()
# Add topic element to start of vector
Messages$CurationCompletion <- c(Topic = "Curation process completion",
Messages$CurationCompletion)
# Print messages on console
PrintMessages(Messages)
# Invisibly return Messages and Curation completion check object
invisible(list(Messages = Messages,
CurationCompletionCheck = CurationCompletionCheck))
devtools::load_all(".")
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
ds.CurateData(RawDataSetName = "RawDataSet",
Settings = NULL,
OutputName = "CurationOutput")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
devtools::load_all(".")
rm(DSConnections)
devtools::load_all(".")
# Run ds.AugmentData
ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput")
