OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Messages <- ds.FilterTable(TableName = "ADS_Patient",
FilterStatement = "CountDiagnoses == 1",
OutputName = "ADS_Patient_Filtered",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Messages <- ds.FilterTable(TableName = "ADS_Patient",
FilterStatement = "CountDiagnoses == 1",
OutputName = "ADS_Patient_Filtered",
DataSources = CCPConnections)
datashield.errors()
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Messages <- ds.FilterTable(TableName = "ADS_Patient",
FilterStatement = "CountDiagnoses == 1",
OutputName = "ADS_Patient_Filtered",
DataSources = CCPConnections)
datashield.errors()
TableName <- "ADS_Patient"
FilterStatement <- "PatientID"
OutputName <- "PatientAnalysis"
DataSources <- CCPConnections
### For testing purposes
TableName <- "ADS_Patient"
FilterStatement <- "CountDiagnoses == 1"
OutputName <- "Test"
DataSources <- CCPConnections
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses \\=\\= 1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
FilterStatement <- "CountDiagnoses 3"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses3"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
FilterStatement <- "CountDiagnoses==1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses(1)"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
FilterStatement <- "'CountDiagnoses==1'"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "'CountDiagnoses == 1'"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses '==' 1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
ServerCall
?DSI::datashield.assign
FilterStatement <- "CountDiagnoses == 1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = quote(FilterStatement))
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
# Call helper function to check if object assignment succeeded
AssignmentInfo <- ds.GetObjectStatus(OutputName,
DataSources = DataSources)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
Messages <- ds.FilterTable(TableName = "ADS_Patient",
FilterStatement = "CountDiagnoses == 1",
OutputName = "ADS_Patient_Filtered",
DataSources = CCPConnections)
devtools::load_all(".")
Messages <- ds.FilterTable(TableName = "ADS_Patient",
FilterStatement = "CountDiagnoses == 1",
OutputName = "ADS_Patient_Filtered",
DataSources = CCPConnections)
datashield.errors()
quote(FilterStatement)
TableName <- "ADS_Patient"
FilterStatement <- "CountDiagnoses == 1"
OutputName <- "Test"
DataSources <- CCPConnections
### For testing purposes
TableName <- "ADS_Patient"
FilterStatement <- quote("CountDiagnoses == 1")
OutputName <- "Test"
DataSources <- CCPConnections
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
enquo(quote("ABC"))
enquo(sym("ABC"))
rlang::last_trace()
?enquo
sym("ABC")
!!sym("ABC")
enquo(sym("ABC"))
quote("CountDiagnoses == 1")
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = quote("CountDiagnoses == 1"))
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses == 1"
sym(FilterStatement)
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = sym(FilterStatement))
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses __ 1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses *equal* 1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses equal 1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses equal"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses%equal%1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnosesequal1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses_equal_1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses_equal_ 1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses_==_1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
FilterStatement <- "CountDiagnoses'=='1"
# Construct the server-side function call
ServerCall <- call("FilterTableDS",
TableName.S = TableName,
FilterStatement.S = FilterStatement)
# Execute server-side assign function
DSI::datashield.assign(conns = DataSources,
symbol = OutputName,
value = ServerCall)
datashield.errors()
# Automatically print DataSHIELD errors
options(datashield.errors.print = TRUE)
library(devtools)
library(dplyr)
# General / Auxiliary functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("Auxiliary.R")
# use_r("CheckServerRequirements.R")
# use_r("ConnectToCCP.R")
# use_r("ConnectToVirtualCCP.R")
use_r("EncodeOpStatements.R")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
install.packages("dsTidyverseClient")
install.packages("dsTidyverseClient")
install.packages("DSI")
install.packages("installr")
installr::updateR()
install.packages("DSI")
install.packages("DSI")
install.packages("dsTidyverseClient")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_dev_package("CCPhosApp", type = "Suggests", remote = "devtools::BastianReiter/CCPhosApp")
# use_package("cli")
# use_package("dplyr")
# use_dev_package("dsBaseClient", remote = "devtools::datashield/dsBaseClient")
# use_dev_package("dsCCPhos", remote = "devtools::BastianReiter/dsCCPhos")
use_package("dsTidyverseClient")
library(devtools)
library(dplyr)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_dev_package("CCPhosApp", type = "Suggests", remote = "devtools::BastianReiter/CCPhosApp")
# use_package("cli")
# use_package("dplyr")
# use_dev_package("dsBaseClient", remote = "devtools::datashield/dsBaseClient")
# use_dev_package("dsCCPhos", remote = "devtools::BastianReiter/dsCCPhos")
use_package("dsTidyverseClient")
# use_package("DSI")
# use_package("purrr")
# use_package("ggplot2", type = "Suggests")
# use_package("gt", type = "Suggests")
# use_package("quarto", type = "Suggests")
# use_package("rmarkdown", type = "Suggests")
# use_package("scales", type = "Suggests")
# use_package("sysfonts", type = "Suggests")
# use_package("tibble")
# use_package("tidyr")
use_package("dsTidyverse")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
install.packages("dsBaseClient")
devtools::install_github(repo = "datashield/dsBaseClient")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
install.packages("DSLite")
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
datashield.errors()
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
install.packages("dsBase")
devtools::install_github("datashield/dsBase")
