if (ServerProjectName == "Virtual") { ServerProjectName <- "" }
# Else add a dot ('.') to ServerProjectName according to Opal table name nomenclature
else { ServerProjectName <- paste0(ServerProjectName, ".") }
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, CCPTableNames_Raw)
}
# Loop through all tables from Opal DB and assign their content to objects (data.frames) in R session
for(j in 1:length(ServerTableNames))
{
datashield.assign(conns = DataSources[[i]],
symbol = paste0("RDS_", CCPTableNames_Curated[j]),
value = ServerTableNames[j])
#id.name = "_id")
}
}
BundledMessages <- list()
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table)
}
devtools::load_all(".")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
# For testing purposes
CCPSiteSpecifications <- NULL
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- c(Topic = "Object assignment on servers")
# Get server names
ServerNames <- names(DataSources)
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
require(dplyr)
require(dsBaseClient)
require(DSI)
require(purrr)
require(tidyr)
# For testing purposes
CCPSiteSpecifications <- NULL
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- c(Topic = "Object assignment on servers")
# Get server names
ServerNames <- names(DataSources)
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
require(dplyr)
require(dsBaseClient)
require(DSI)
require(purrr)
require(tidyr)
# For testing purposes
CCPSiteSpecifications <- NULL
DataSources <- CCPConnections
# Initiate output messaging objects
Messages <- list()
Messages$Assignment <- c(Topic = "Object assignment on servers")
# Get server names
ServerNames <- names(DataSources)
# Get table names from meta data
CCPTableNames_Raw <- dsCCPhosClient::Meta_TableNames$TableName_Raw
CCPTableNames_Curated <- dsCCPhosClient::Meta_TableNames$TableName_Curated
# Loop through all participating sites / servers
for (i in 1:length(ServerNames))
{
# In case CCPSiteSpecifications are NULL, server Opal table names are just raw CCP table names
ServerTableNames <- CCPTableNames_Raw
# If CCPSiteSpecifications are assigned, there can be server-specific project names and therefore server-specific Opal table names
if (!is.null(CCPSiteSpecifications))
{
# Get server-specific project name
ServerProjectName <- CCPSiteSpecifications %>%
filter(SiteName == ServerNames[i]) %>%
select(ProjectName) %>%
pull()
# If ServerProjectName is "Virtual" (as it is the case when using virtual infrastructure in CCPhosApp) make the variable empty so that server Opal table names are just raw CCP table names
if (ServerProjectName == "Virtual") { ServerProjectName <- "" }
# Else add a dot ('.') to ServerProjectName according to Opal table name nomenclature
else { ServerProjectName <- paste0(ServerProjectName, ".") }
# Create vector with server-specific table names (raw CCP table names concatenated with server-specific project name)
ServerTableNames <- paste0(ServerProjectName, CCPTableNames_Raw)
}
# Loop through all tables from Opal DB and assign their content to objects (data.frames) in R session
for(j in 1:length(ServerTableNames))
{
datashield.assign(conns = DataSources[[i]],
symbol = paste0("RDS_", CCPTableNames_Curated[j]),
value = ServerTableNames[j])
#id.name = "_id")
}
}
BundledMessages <- list()
# Loop through all CCP tables to get info about assignment on servers
for(i in 1:length(CCPTableNames_Curated))
{
# Make sure assignment was successful on all servers
ObjectStatus_Table <- ds.GetObjectStatus(ObjectName = paste0("RDS_", CCPTableNames_Curated[i]),
DataSources = DataSources)
# Add info about table assignment to Messages
BundledMessages <- c(BundledMessages,
ObjectStatus_Table)
}
# Turn list into (named) vector and add it to Messages
Messages$Assignment <- c(Messages$Assignment,
purrr::list_c(BundledMessages))
Messages$Assignment
Test <- paste0("RDS_", CCPTableNames_Curated) %>%
map(function(tablename)
{
unlist(ds.class(x = tablename, datasources = CCPConnections))
}) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose()
Test$SiteA
TestW <- Test %>%
map(\(siteobjects) siteobjects[siteobjects != "NULL"])
TestW$SiteA
Test <- paste0("RDS_", CCPTableNames_Curated) %>%
map(\(tablename) unlist(ds.class(x = tablename, datasources = CCPConnections))) %>%
set_names(paste0("RDS_", CCPTableNames_Curated)) %>%
list_transpose() %>%
map(\(TableNames) names(TableNames[TableNames != "NULL"]))
devtools::load_all(".")
DSI::datashield.logout(CCPConnections)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
devtools::load_all(".")
DSI::datashield.logout(CCPConnections)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
TableCheck$SiteA
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
case_when(TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE ~ "green",
TableInfo$TableExists == FALSE ~ "red",
TableInfo$TableComplete == FALSE ~ "yellow",
TRUE ~ "grey")
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
TableCheck$SiteA$RDS_BioSampling
case_when(TableCheck$SiteA$RDS_BioSampling$TableExists == TRUE & TableCheck$SiteA$RDS_BioSampling$TableComplete == TRUE ~ "green",
TableCheck$SiteA$RDS_BioSampling$TableExists == FALSE ~ "red",
TableCheck$SiteA$RDS_BioSampling$TableComplete == FALSE ~ "yellow",
TRUE ~ "grey")
TableCheck$SiteA$RDS_BioSampling$TableExists
TableCheck$SiteA$RDS_BioSampling$TableComplete
?case_when
case_when(TableCheck$SiteA$RDS_BioSampling$TableExists == FALSE ~ "red",
TableCheck$SiteA$RDS_BioSampling$TableExists == TRUE & TableCheck$SiteA$RDS_BioSampling$TableComplete == TRUE ~ "green",
TableCheck$SiteA$RDS_BioSampling$TableComplete == FALSE ~ "yellow",
TRUE ~ "grey")
case_when(TableCheck$SiteA$RDS_BioSampling$TableExists == FALSE ~ "red",
TableCheck$SiteA$RDS_BioSampling$TableExists == TRUE ~ "green",
TableCheck$SiteA$RDS_BioSampling$TableComplete == FALSE ~ "yellow",
TRUE ~ "grey")
case_when(TableCheck$SiteA$RDS_BioSampling$TableExists == FALSE ~ "red",
TableCheck$SiteA$RDS_BioSampling$TableExists == TRUE ~ "green",
TRUE ~ "grey")
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
View(TableStatus)
devtools::load_all(".")
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
devtools::load_all(".")
devtools::load_all(".")
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
# For testing purposes
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
TableStatus
TableCheck %>% list_transpose()
TableCheck$SiteA$RDS_OtherClassification$TableExists
?list_transpose
TableCheck %>% list_transpose(simplify = FALSE)
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
require(dplyr)
require(purrr)
# For testing purposes
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
# Create list of data frames (one per RDS table) containing info about existence of table features
FeatureStatus <- TableCheck %>%
list_transpose(simplify = FALSE) %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence)  %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = FeatureName,
values_from = Exists)
})
Test <- TableCheck %>% list_transpose(simplify = FALSE)
Test
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
require(dplyr)
require(purrr)
# For testing purposes
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
TableCheck
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
require(dplyr)
require(purrr)
# For testing purposes
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
# Create list of data frames (one per RDS table) containing info about existence of table features
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence)  %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = FeatureName,
values_from = Exists)
})
FeatureStatus$RDS_BioSampling
FeatureStatus$RDS_GeneralCondition
FeatureStatus$RDS_Histology
TableStatus$RDS_BioSampling
View(TableCheck)
View(TableCheck)
TableStatus
devtools::load_all(".")
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
View(CurationReport$UnlinkedEntries)
View(CurationReport$Transformation)
View(CurationReport$Transformation$All)
View(CurationReport$DiagnosisClassification)
devtools::load_all(".")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 1000)
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSTableCheck
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
RDSValidationReport$SiteA
# Transform Raw Data Set (RDS) into Curated Data Set (CDS)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Get curation reports
CurationReport <- dsCCPhosClient::ds.GetCurationReport(DataSources = CCPConnections)
View(CurationReport$UnlinkedEntries)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
