TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
datashield.errors()
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
install.packages("dsBase")
devtools::install_github("datashield/dsBase")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
?ds.filter
ds.filter(df.name = "ADS_Patient",
tidy_expr = list(CountDiagnoses ==1),
newobj = "PatientsFiltered",
datasources = CCPConnections)
Messages <- ds.JoinTables(TableNameA = "ADS_Patient",
TableNameB = "ADS_Diagnosis",
ByStatement = "PatientID",
OutputName = "Analysis",
DataSources = CCPConnections)
Messages <- ds.JoinTables(TableNameA = "ADS_Patient",
TableNameB = "ADS_Diagnosis",
ByStatement = "PatientID",
OutputName = "AnalysisDataSet",
DataSources = CCPConnections)
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "AnalysisDataSet",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "coxph",
CovariateA = "UICCStageCategory",
#CovariateB = "UICCStageCategory",
MinFollowUpTime = 20)
Test$SiteA
library(ggplot2)
library(ggsurvfit)
Test$SiteA %>%
ggsurvfit()
?ggsurvfit
Test$SiteA
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "AnalysisDataSet",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "survfit",
CovariateA = "UICCStageCategory",
#CovariateB = "UICCStageCategory",
MinFollowUpTime = 20)
library(ggplot2)
library(ggsurvfit)
Test$SiteA %>%
ggsurvfit()
DSI::datashield.logout(CCPConnections)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 10000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
# Transform Raw Data Set (RDS) into Curated Data Set (CDS) (using default settings)
Curation <- ds.CurateData(RawDataSetName = "RawDataSet",
OutputName = "CurationOutput",
DataSources = CCPConnections)
# Make tables from Curated Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackCuratedDataSet(CuratedDataSetName = "CuratedDataSet",
DataSources = CCPConnections)
# Run ds.AugmentData
Messages <- ds.AugmentData(CuratedDataSetName = "CuratedDataSet",
OutputName = "AugmentationOutput",
DataSources = CCPConnections)
# Make tables from Augmented Data Set directly addressable by unpacking them into R server session
Messages <- ds.UnpackAugmentedDataSet(AugmentedDataSetName = "AugmentedDataSet",
DataSources = CCPConnections)
ds.filter(df.name = "ADS_Patient",
tidy_expr = list(CountDiagnoses == 1),
newobj = "ADS_Patient_OneDiagnosis",
datasources = CCPConnections)
Messages <- ds.JoinTables(TableNameA = "ADS_Patient_OneDiagnosis",
TableNameB = "ADS_Diagnosis",
ByStatement = "PatientID",
OutputName = "AnalysisDataSet",
DataSources = CCPConnections)
Test <- ds.GetTTEModel(DataSources = CCPConnections,
TableName = "AnalysisDataSet",
TimeFeature = "TimeFollowUp",
EventFeature = "IsDocumentedDeceased",
ModelType = "survfit",
CovariateA = "UICCStageCategory",
#CovariateB = "UICCStageCategory",
MinFollowUpTime = 20)
library(ggplot2)
library(ggsurvfit)
Test$SiteA %>%
ggsurvfit()
Test$SiteB %>%
ggsurvfit()
Test$SiteC %>%
ggsurvfit()
RDSValidationReport <- ds.GetRDSValidationReport(DataSources = CCPConnections)
RDSValidationReport
ValidationSummaries <- RDSValidationReport %>%
map(\(report) summary(report))
ValidationReportTables <- ValidationSummaries %>%
map(\(summary) as.data.frame(summary, check.names = FALSE))
ValidationReportTables$SiteA
View(ValidationReportTables$SiteA)
ValidationReportTables$SiteA
ValidationSummaries$SiteA
summary(RDSValidationReport$SiteA)
plot(RDSValidationReport$SiteA)
plot(RDSValidationReport$SiteA$RDS_DiseaseStatus)
RDSValidationReports <- ds.GetRDSValidationReport(DataSources = CCPConnections)
summary(RDSValidationReports$SiteA$RDS_DiseaseStatus)
devtools::load_all(".")
library(dplyr)
library(dsCCPhosClient)
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
require(dplyr)
require(purrr)
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
TableCheck$SiteA$RDS_DiseaseStatus$RateNonMissingValues
Test <- TableCheck %>% list_transpose()
Test$RDS_DiseaseStatus$SiteA
TableInfo <- Test$RDS_DiseaseStatus
Test2 <- TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence)  %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = FeatureName,
values_from = Exists)
Test2
SiteTableInfo <- TableInfo$SiteA
Test3 <- SiteTableInfo$FeatureTypes
Test3
as_tibble(Test3)
tibble(Feature = names(Test3), Type = Test3)
transpose(tibble(Feature = names(Test3), Type = Test3))
t(tibble(Feature = names(Test3), Type = Test3))
tibble(Feature = names(Test3), Type = Test3) %>% pivot_longer(cols = -1)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
Test <- TableCheck %>% list_transpose()
TableInfo <- Test$RDS_DiseaseStatus
Test2 <- TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureTypes)  %>%
list_rbind(names_to = "SiteName")
Test2
View(Test2)
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
require(dplyr)
require(purrr)
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create list of data frames (one per RDS table) containing info about existence of table features
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence)  %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = Exists)
})
View(FeatureStatus)
FeatureStatus$RDS_Diagnosis
# Create list of data frames (one per RDS table) containing info about types of table features
FeatureTypes <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureTypes)  %>%
list_rbind(names_to = "SiteName")
pivot_wider(names_from = Feature,
values_from = Type)
})
TableCheck$SiteA$RDS_Diagnosis$FeatureTypes
Test <- TableCheck %>% list_transpose()
Test$RDS_DiseaseStatus$SiteA$FeatureTypes
# Create list of data frames (one per RDS table) containing info about types of table features
FeatureTypes <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureTypes) %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = Type)
})
Test$RDS_GeneralCondition$SiteA$FeatureTypes
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
require(dplyr)
require(purrr)
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create list of data frames (one per RDS table) containing info about existence of table features
FeatureStatus <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = Exists)
})
# Create list of data frames (one per RDS table) containing info about types of table features
FeatureTypes <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureTypes) %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = Type)
})
FeatureTypes$RDS_GeneralCondition
FeatureTypes$RDS_DiseaseStatus
# Create list of data frames (one per RDS table) containing info about types of table features
NonMissingValueRates <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$NonMissingValueRates) %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = NonMissingValueRate)
})
Test <- TableCheck %>% list_transpose()
Test$RDS_DiseaseStatus$SiteA$RateOfNonMissingValues
# Create list of data frames (one per RDS table) containing feature-specific non-missing value rates
NonMissingValueRates <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$NonMissingValueRates) %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = NonMissingValueRate)
})
Test$RDS_BioSampling$SiteA$RateOfNonMissingValues
# Create list of data frames (one per RDS table) containing feature-specific non-missing value rates
NonMissingValueRates <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$NonMissingValueRates) %>%
list_rbind(names_to = "SiteName")
# pivot_wider(names_from = Feature,
#             values_from = NonMissingValueRate)
})
NonMissingValueRates$RDS_BioSampling
NonMissingValueRates$RDS_DiseaseStatus
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
DataSources <- CCPConnections
RawDataSetName <- "RawDataSet"
ServerCall <- call("CheckRDSTablesDS",
RawDataSetName.S = RawDataSetName)
TableCheck <- DSI::datashield.aggregate(conns = DataSources,
expr = ServerCall)
# Create data frame containing "traffic light" info about existence/completeness of RDS tables
TableStatus <- TableCheck %>%
map(function(SiteTableCheck)
{
SiteTableStatus <- SiteTableCheck %>%
map_chr(function(TableInfo)
{
Status <- "grey"
if (TableInfo$TableExists == FALSE) { Status <- "red" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == TRUE) { Status <- "green" }
else if (TableInfo$TableExists == TRUE & TableInfo$TableComplete == FALSE) { Status <- "yellow" }
}) %>%
rbind() %>%
as_tibble()
}) %>%
list_rbind(names_to = "SiteName") %>%
mutate(CheckRDSTables = case_when(if_all(-SiteName, ~ .x == "green") ~ "green",
if_any(-SiteName, ~ .x == "red") ~ "red",
if_any(-SiteName, ~ .x == "yellow") ~ "yellow",
TRUE ~ "grey"))
# Create list of data frames (one per RDS table) containing info about existence of table features
FeatureExistence <- TableCheck %>%
list_transpose() %>%
map(function(TableInfo)
{
TableInfo %>%
map(\(SiteTableInfo) SiteTableInfo$FeatureExistence) %>%
list_rbind(names_to = "SiteName") %>%
pivot_wider(names_from = Feature,
values_from = Exists)
})
FeatureExistence
TableInfo <- TableCheck$SiteA$RDS_Diagnosis
TableInfo$FeatureExistence
sum(TableInfo$FeatureExistence$Exists)
sum(TableInfo$FeatureExistence$Exists)
CountExistingFeatures <- sum(TableInfo$FeatureExistence$Exists)
CountTotalFeatures <- nrow(TableInfo$FeatureExistence)
require(stingr)
require(stringr)
devtools::load_all(".")
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
?str_starts
devtools::load_all(".")
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
RDSTableCheck$TableStatus$CheckRDSTables
RDSTableCheck$TableStatus$RDS_DiseaseStatus
RDSTableCheck$TableStatus$RDS_Histology
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
TableData <- RDSTableCheck$TableStatus$RDS_DiseaseStatus
CCPhosApp::DataFrameToHtmlTable(DataFrame = TableData,
ColContentHorizontalAlign = "center",
ColumnLabels = ColumnLabels,
ColumnMaxWidth = 14,
SemanticTableClass = "ui small compact celled structured table",
TurnColorValuesIntoDots = TRUE)
CCPhosApp::DataFrameToHtmlTable(DataFrame = TableData,
ColContentHorizontalAlign = "center",
#ColumnLabels = ColumnLabels,
ColumnMaxWidth = 14,
SemanticTableClass = "ui small compact celled structured table",
TurnColorValuesIntoDots = TRUE)
TableData <- RDSTableCheck$TableStatus
View(TableData)
TableData <- RDSTableCheck$TableStatus
CCPhosApp::DataFrameToHtmlTable(DataFrame = TableData,
ColContentHorizontalAlign = "center",
#ColumnLabels = ColumnLabels,
ColumnMaxWidth = 14,
SemanticTableClass = "ui small compact celled structured table",
TurnColorValuesIntoDots = TRUE)
saveRDS(TableData, file = "TestTable.rds")
devtools::load_all(".")
library(dsBaseClient)
library(dsCCPhosClient)
library(dsTidyverseClient)
# Print DataSHIELD errors right away
options(datashield.errors.print = TRUE)
#TestData <- readRDS("../dsCCPhos/Development/Data/RealData/CCPRealData_Frankfurt.rds")
TestData <- readRDS("../dsCCPhos/Development/Data/TestData/CCPTestData.rds")
CCPConnections <- ConnectToVirtualCCP(CCPTestData = TestData,
NumberOfSites = 3,
NumberOfPatientsPerSite = 2000,
AddedDsPackages = "dsTidyverse")
Requirements <- CheckServerRequirements(DataSources = CCPConnections)
Messages <- LoadRawDataSet(CCPSiteSpecifications = NULL,
DataSources = CCPConnections)
RDSTableCheck <- ds.CheckRDSTables(DataSources = CCPConnections)
saveRDS(RDSTableCheck, "TestTableCheck.rds")
?colorRampPalette
?colorRamp
?colorRampPalette
